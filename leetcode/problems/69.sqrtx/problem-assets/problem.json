{"slug":"sqrtx","id":69,"frontendId":69,"title":"Sqrt(x)","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":964,"dislikes":0,"status":2,"tag":[{"name":"Math","slug":"math","translatedName":"数学"},{"name":"Binary Search","slug":"binary-search","translatedName":"二分查找"}],"totalAccepted":505797,"totalSubmission":1301547,"hints":["Try exploring all integers. (Credits: @annujoshi)","Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"],"sampleTestCase":"4","exampleTestcases":"4\n8","content":"<p>Given a non-negative integer <code>x</code>,&nbsp;compute and return <em>the square root of</em> <code>x</code>.</p>\n\n<p>Since the return type&nbsp;is an integer, the decimal digits are <strong>truncated</strong>, and only <strong>the integer part</strong> of the result&nbsp;is returned.</p>\n\n<p><strong>Note:&nbsp;</strong>You are not allowed to use any built-in exponent function or operator, such as <code>pow(x, 0.5)</code> or&nbsp;<code>x ** 0.5</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 4\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 8\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","translatedContent":"<p>给你一个非负整数 <code>x</code> ，计算并返回&nbsp;<code>x</code>&nbsp;的 <strong>算术平方根</strong> 。</p>\n\n<p>由于返回类型是整数，结果只保留 <strong>整数部分 </strong>，小数部分将被 <strong>舍去 。</strong></p>\n\n<p><strong>注意：</strong>不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 4\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 8\n<strong>输出：</strong>2\n<strong>解释：</strong>8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","translatedTitle":"x 的平方根 ","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int mySqrt(int x) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int mySqrt(int x) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def mySqrt(self, x: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint mySqrt(int x){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MySqrt(int x) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func mySqrt(_ x: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func mySqrt(x int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def mySqrt(x: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun mySqrt(x: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function mySqrt(x: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n\n  end\nend"}]}