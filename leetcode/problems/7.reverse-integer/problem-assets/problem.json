{"slug":"reverse-integer","id":7,"frontendId":7,"title":"Reverse Integer","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":3440,"dislikes":0,"status":2,"tag":[{"name":"Math","slug":"math","translatedName":"数学"}],"totalAccepted":972712,"totalSubmission":2763752,"hints":[],"sampleTestCase":"123","exampleTestcases":"123\n-123\n120","content":"<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","translatedContent":"<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p>\n\n<p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−2<sup>31</sup>,  2<sup>31 </sup>− 1]</code> ，就返回 0。</p>\n<strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 123\n<strong>输出：</strong>321\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = -123\n<strong>输出：</strong>-321\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 120\n<strong>输出：</strong>21\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 0\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> <= x <= 2<sup>31</sup> - 1</code></li>\n</ul>\n","translatedTitle":"整数反转","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int reverse(int x) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int reverse(int x) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def reverse(self, x: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint reverse(int x){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int Reverse(int x) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func reverse(_ x: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func reverse(x int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def reverse(x: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun reverse(x: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function reverse(x: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"}]}