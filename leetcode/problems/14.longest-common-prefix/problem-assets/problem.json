{"slug":"longest-common-prefix","id":14,"frontendId":14,"title":"Longest Common Prefix","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2101,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"}],"totalAccepted":759966,"totalSubmission":1811115,"hints":[],"sampleTestCase":"[\"flower\",\"flow\",\"flight\"]","exampleTestcases":"[\"flower\",\"flow\",\"flight\"]\n[\"dog\",\"racecar\",\"car\"]","content":"<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>Output:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lower-case English letters.</li>\n</ul>\n","translatedContent":"<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n\n<p>如果不存在公共前缀，返回空字符串&nbsp;<code>\"\"</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>strs = [\"flower\",\"flow\",\"flight\"]\n<strong>输出：</strong>\"fl\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>strs = [\"dog\",\"racecar\",\"car\"]\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>输入不存在公共前缀。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> 仅由小写英文字母组成</li>\n</ul>\n","translatedTitle":"最长公共前缀","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String longestCommonPrefix(String[] strs) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * longestCommonPrefix(char ** strs, int strsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func longestCommonPrefix(strs []string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function longestCommonPrefix(strs: string[]): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (longest-common-prefix strs)\n  (-> (listof string?) string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlongest_common_prefix(Strs) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n\n  end\nend"}]}