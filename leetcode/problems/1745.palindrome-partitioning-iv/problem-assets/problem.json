{"slug":"palindrome-partitioning-iv","id":1871,"frontendId":1745,"title":"Palindrome Partitioning IV","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":26,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":3956,"totalSubmission":8103,"hints":["Preprocess checking palindromes in O(1)","Note that one string is a prefix and another one is a suffix you can try brute forcing the rest"],"sampleTestCase":"\"abcbdd\"","exampleTestcases":"\"abcbdd\"\n\"bcbddxy\"","content":"<p>Given a string <code>s</code>, return <code>true</code> <em>if it is possible to split the string</em> <code>s</code> <em>into three <strong>non-empty</strong> palindromic substrings. Otherwise, return </em><code>false</code>.​​​​​</p>\n\n<p>A string is said to be palindrome if it the same string when reversed.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcbdd&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>&quot;abcbdd&quot; = &quot;a&quot; + &quot;bcb&quot; + &quot;dd&quot;, and all three substrings are palindromes.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcbddxy&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>s cannot be split into 3 palindromes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code>​​​​​​ consists only of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串 <code>s</code> ，如果可以将它分割成三个 <strong>非空</strong> 回文子字符串，那么返回 <code>true</code> ，否则返回 <code>false</code> 。</p>\n\n<p>当一个字符串正着读和反着读是一模一样的，就称其为 <strong>回文字符串</strong> 。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"abcbdd\"\n<b>输出：</b>true\n<strong>解释：</strong>\"abcbdd\" = \"a\" + \"bcb\" + \"dd\"，三个子字符串都是回文的。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"bcbddxy\"\n<b>输出：</b>false\n<strong>解释：</strong>s 没办法被分割成 3 个回文子字符串。\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 <= s.length <= 2000</code></li>\n\t<li><code>s</code>​​​​​​ 只包含小写英文字母。</li>\n</ul>\n","translatedTitle":"回文串分割 IV","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool checkPartitioning(string s) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean checkPartitioning(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def checkPartitioning(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def checkPartitioning(self, s: str) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool checkPartitioning(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool CheckPartitioning(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkPartitioning = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {Boolean}\ndef check_partitioning(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func checkPartitioning(_ s: String) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func checkPartitioning(s string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def checkPartitioning(s: String): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun checkPartitioning(s: String): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn check_partitioning(s: String) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkPartitioning($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function checkPartitioning(s: string): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (check-partitioning s)\n  (-> string? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec check_partitioning(S :: unicode:unicode_binary()) -> boolean().\ncheck_partitioning(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec check_partitioning(s :: String.t) :: boolean\n  def check_partitioning(s) do\n\n  end\nend"}]}