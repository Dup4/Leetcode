{"slug":"longest-valid-parentheses","id":32,"frontendId":32,"title":"Longest Valid Parentheses","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":1756,"dislikes":0,"status":2,"tag":[{"name":"Stack","slug":"stack","translatedName":"栈"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":248610,"totalSubmission":686392,"hints":[],"sampleTestCase":"\"(()\"","exampleTestcases":"\"(()\"\n\")()())\"\n\"\"","content":"<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n","translatedContent":"<p>给你一个只包含 <code>'('</code> 和 <code>')'</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>\n\n<p> </p>\n\n<div class=\"original__bRMd\">\n<div>\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"(()\"\n<strong>输出：</strong>2\n<strong>解释：</strong>最长有效括号子串是 \"()\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \")()())\"\n<strong>输出：</strong>4\n<strong>解释：</strong>最长有效括号子串是 \"()()\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"\"\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= s.length <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> 为 <code>'('</code> 或 <code>')'</code></li>\n</ul>\n</div>\n</div>\n","translatedTitle":"最长有效括号","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int longestValidParentheses(string s) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int longestValidParentheses(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def longestValidParentheses(self, s: str) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint longestValidParentheses(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int LongestValidParentheses(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func longestValidParentheses(s string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def longestValidParentheses(s: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun longestValidParentheses(s: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function longestValidParentheses(s: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n\n  end\nend"}]}