{"slug":"best-time-to-buy-and-sell-stock-iv","id":188,"title":"Best Time to Buy and Sell Stock IV","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":669,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":106569,"totalSubmission":263879,"hints":[],"sampleTestCase":"2\n[2,4,1]","exampleTestcases":"2\n[2,4,1]\n2\n[3,2,6,5,0,3]","content":"<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p>\n\n<p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [2,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [3,2,6,5,0,3]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= k &lt;= 100</code></li>\n\t<li><code>0 &lt;= prices.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给定一个整数数组 <code>prices</code> ，它的第<em> </em><code>i</code> 个元素 <code>prices[i]</code> 是一支给定的股票在第 <code>i</code><em> </em>天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p>\n\n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>k = 2, prices = [2,4,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>k = 2, prices = [3,2,6,5,0,3]\n<strong>输出：</strong>7\n<strong>解释：</strong>在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\n     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= k <= 100</code></li>\n\t<li><code>0 <= prices.length <= 1000</code></li>\n\t<li><code>0 <= prices[i] <= 1000</code></li>\n</ul>\n","translatedTitle":"买卖股票的最佳时机 IV","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maxProfit(int k, int[] prices) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint maxProfit(int k, int* prices, int pricesSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaxProfit(int k, int[] prices) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} k\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(k, prices) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} k\n# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(k, prices)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maxProfit(_ k: Int, _ prices: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maxProfit(k int, prices []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maxProfit(k: Int, prices: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maxProfit(k: Int, prices: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn max_profit(k: i32, prices: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($k, $prices) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maxProfit(k: number, prices: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (max-profit k prices)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec max_profit(K :: integer(), Prices :: [integer()]) -> integer().\nmax_profit(K, Prices) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec max_profit(k :: integer, prices :: [integer]) :: integer\n  def max_profit(k, prices) do\n\n  end\nend"}]}