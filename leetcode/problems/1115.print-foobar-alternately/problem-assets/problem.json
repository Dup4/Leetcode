{"slug":"print-foobar-alternately","id":1187,"frontendId":1115,"title":"Print FooBar Alternately","categoryTitle":"Concurrency","difficulty":1,"starred":false,"locked":false,"likes":191,"dislikes":0,"status":2,"tag":[{"name":"Concurrency","slug":"concurrency","translatedName":"多线程"}],"totalAccepted":68023,"totalSubmission":118654,"hints":[],"sampleTestCase":"1","exampleTestcases":"1\n2","content":"<p>Suppose you are given the following code:</p>\n\n<pre>\nclass FooBar {\n  public void foo() {\n    for (int i = 0; i &lt; n; i++) {\n      print(&quot;foo&quot;);\n    }\n  }\n\n  public void bar() {\n    for (int i = 0; i &lt; n; i++) {\n      print(&quot;bar&quot;);\n    }\n  }\n}\n</pre>\n\n<p>The same instance of <code>FooBar</code> will be passed to two different threads:</p>\n\n<ul>\n\t<li>thread <code>A</code> will call <code>foo()</code>, while</li>\n\t<li>thread <code>B</code> will call <code>bar()</code>.</li>\n</ul>\n\n<p>Modify the given program to output <code>&quot;foobar&quot;</code> <code>n</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> &quot;foobar&quot;\n<strong>Explanation:</strong> There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar().\n&quot;foobar&quot; is being output 1 time.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> &quot;foobarfoobar&quot;\n<strong>Explanation:</strong> &quot;foobar&quot; is being output 2 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你一个类：</p>\n\n<pre>\nclass FooBar {\n  public void foo() {\n&nbsp; &nbsp; for (int i = 0; i &lt; n; i++) {\n&nbsp; &nbsp; &nbsp; print(\"foo\");\n&nbsp;   }\n  }\n\n  public void bar() {\n&nbsp; &nbsp; for (int i = 0; i &lt; n; i++) {\n&nbsp; &nbsp; &nbsp; print(\"bar\");\n&nbsp; &nbsp; }\n  }\n}\n</pre>\n\n<p>两个不同的线程将会共用一个 <code>FooBar</code>&nbsp;实例：</p>\n\n<ul>\n\t<li>线程 A 将会调用&nbsp;<code>foo()</code>&nbsp;方法，而</li>\n\t<li>线程 B 将会调用&nbsp;<code>bar()</code>&nbsp;方法</li>\n</ul>\n\n<p>请设计修改程序，以确保 <code>\"foobar\"</code> 被输出 <code>n</code> 次。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 1\n<strong>输出：</strong>\"foobar\"\n<strong>解释：</strong>这里有两个线程被异步启动。其中一个调用 foo() 方法, 另一个调用 bar() 方法，\"foobar\" 将被输出一次。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 2\n<strong>输出：</strong>\"foobarfoobar\"\n<strong>解释：</strong>\"foobar\" 将被输出两次。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"交替打印 FooBar","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class FooBar {\nprivate:\n    int n;\n\npublic:\n    FooBar(int n) {\n        this->n = n;\n    }\n\n    void foo(function<void()> printFoo) {\n        \n        for (int i = 0; i < n; i++) {\n            \n        \t// printFoo() outputs \"foo\". Do not change or remove this line.\n        \tprintFoo();\n        }\n    }\n\n    void bar(function<void()> printBar) {\n        \n        for (int i = 0; i < n; i++) {\n            \n        \t// printBar() outputs \"bar\". Do not change or remove this line.\n        \tprintBar();\n        }\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class FooBar {\n    private int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        \n        for (int i = 0; i < n; i++) {\n            \n        \t// printFoo.run() outputs \"foo\". Do not change or remove this line.\n        \tprintFoo.run();\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printBar.run() outputs \"bar\". Do not change or remove this line.\n        \tprintBar.run();\n        }\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class FooBar(object):\n    def __init__(self, n):\n        self.n = n\n\n\n    def foo(self, printFoo):\n        \"\"\"\n        :type printFoo: method\n        :rtype: void\n        \"\"\"\n        for i in xrange(self.n):\n            \n            # printFoo() outputs \"foo\". Do not change or remove this line.\n        \tprintFoo()\n\n\n    def bar(self, printBar):\n        \"\"\"\n        :type printBar: method\n        :rtype: void\n        \"\"\"\n        for i in xrange(self.n):\n            \n            # printBar() outputs \"bar\". Do not change or remove this line.\n        \tprintBar()"},{"lang":"Python3","langSlug":"python3","code":"class FooBar:\n    def __init__(self, n):\n        self.n = n\n\n\n    def foo(self, printFoo: 'Callable[[], None]') -> None:\n        \n        for i in range(self.n):\n            \n            # printFoo() outputs \"foo\". Do not change or remove this line.\n        \tprintFoo()\n\n\n    def bar(self, printBar: 'Callable[[], None]') -> None:\n        \n        for i in range(self.n):\n            \n            # printBar() outputs \"bar\". Do not change or remove this line.\n        \tprintBar()"},{"lang":"C","langSlug":"c","code":"typedef struct {\n    int n;\n} FooBar;\n\nFooBar* fooBarCreate(int n) {\n    FooBar* obj = (FooBar*) malloc(sizeof(FooBar));\n    obj->n = n;\n    return obj;\n}\n\nvoid foo(FooBar* obj) {\n    \n    for (int i = 0; i < obj->n; i++) {\n        \n        // printFoo() outputs \"foo\". Do not change or remove this line.\n        printFoo();\n    }\n}\n\nvoid bar(FooBar* obj) {\n    \n    for (int i = 0; i < obj->n; i++) {\n        \n        // printBar() outputs \"bar\". Do not change or remove this line.\n        printBar();\n    }\n}\n\nvoid fooBarFree(FooBar* obj) {\n    \n}"},{"lang":"C#","langSlug":"csharp","code":"public class FooBar {\n    private int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void Foo(Action printFoo) {\n        \n        for (int i = 0; i < n; i++) {\n            \n        \t// printFoo() outputs \"foo\". Do not change or remove this line.\n        \tprintFoo();\n        }\n    }\n\n    public void Bar(Action printBar) {\n        \n        for (int i = 0; i < n; i++) {\n            \n            // printBar() outputs \"bar\". Do not change or remove this line.\n        \tprintBar();\n        }\n    }\n}"}]}