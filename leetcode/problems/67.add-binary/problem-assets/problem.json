{"slug":"add-binary","id":67,"frontendId":67,"title":"Add Binary","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":762,"dislikes":0,"status":2,"tag":[{"name":"Bit Manipulation","slug":"bit-manipulation","translatedName":"位运算"},{"name":"Math","slug":"math","translatedName":"数学"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Simulation","slug":"simulation","translatedName":"模拟"}],"totalAccepted":229132,"totalSubmission":424693,"hints":[],"sampleTestCase":"\"11\"\n\"1\"","exampleTestcases":"\"11\"\n\"1\"\n\"1010\"\n\"1011\"","content":"<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n","translatedContent":"<p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p>\n\n<p>输入为 <strong>非空 </strong>字符串且只包含数字&nbsp;<code>1</code>&nbsp;和&nbsp;<code>0</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> a = &quot;11&quot;, b = &quot;1&quot;\n<strong>输出:</strong> &quot;100&quot;</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> a = &quot;1010&quot;, b = &quot;1011&quot;\n<strong>输出:</strong> &quot;10101&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>每个字符串仅由字符 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code> 组成。</li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li>\n\t<li>字符串如果不是 <code>&quot;0&quot;</code> ，就都不含前导零。</li>\n</ul>\n","translatedTitle":"二进制求和","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string addBinary(string a, string b) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String addBinary(String a, String b) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def addBinary(self, a: str, b: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * addBinary(char * a, char * b){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string AddBinary(string a, string b) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func addBinary(a string, b string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def addBinary(a: String, b: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun addBinary(a: String, b: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function addBinary(a: string, b: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (add-binary a b)\n  (-> string? string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n\n  end\nend"}]}