{"slug":"shortest-palindrome","id":214,"frontendId":214,"title":"Shortest Palindrome","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":433,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"},{"name":"String Matching","slug":"string-matching","translatedName":"字符串匹配"},{"name":"Hash Function","slug":"hash-function","translatedName":"哈希函数"},{"name":"Rolling Hash","slug":"rolling-hash","translatedName":"滚动哈希"}],"totalAccepted":35506,"totalSubmission":93792,"hints":[],"sampleTestCase":"\"aacecaaa\"","exampleTestcases":"\"aacecaaa\"\n\"abcd\"","content":"<p>You are given a string <code>s</code>. You can convert <code>s</code> to a palindrome by adding characters in front of it.</p>\n\n<p>Return <em>the shortest palindrome you can find by performing this transformation</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aacecaaa\"\n<strong>Output:</strong> \"aaacecaaa\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> \"dcbabcd\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n","translatedContent":"<p>给定一个字符串 <em><strong>s</strong></em>，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"aacecaaa\"\n<strong>输出：</strong>\"aaacecaaa\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abcd\"\n<strong>输出：</strong>\"dcbabcd\"\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= s.length <= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n","translatedTitle":"最短回文串","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string shortestPalindrome(string s) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String shortestPalindrome(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def shortestPalindrome(self, s: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * shortestPalindrome(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string ShortestPalindrome(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {string}\n */\nvar shortestPalindrome = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {String}\ndef shortest_palindrome(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func shortestPalindrome(_ s: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func shortestPalindrome(s string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def shortestPalindrome(s: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun shortestPalindrome(s: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn shortest_palindrome(s: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function shortestPalindrome($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function shortestPalindrome(s: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (shortest-palindrome s)\n  (-> string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec shortest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nshortest_palindrome(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec shortest_palindrome(s :: String.t) :: String.t\n  def shortest_palindrome(s) do\n\n  end\nend"}]}