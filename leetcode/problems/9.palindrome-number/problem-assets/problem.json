{"slug":"palindrome-number","id":9,"title":"Palindrome Number","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":1792,"dislikes":0,"status":0,"tag":[{"name":"Math","slug":"math","translatedName":"数学"}],"totalAccepted":892493,"totalSubmission":1543103,"hints":["Beware of overflow when you reverse the integer."],"sampleTestCase":"121","exampleTestcases":"121\n-121\n10","content":"<p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is palindrome integer.</p>\n\n<p>An integer is a <strong>palindrome</strong> when it reads the same backward as forward.</p>\n\n<ul>\n\t<li>For example, <code>121</code> is a palindrome while <code>123</code> is not.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?","translatedContent":"<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，<code>121</code> 是回文，而 <code>123</code> 不是。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 121\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = -121\n<strong>输出：</strong>false\n<strong>解释：</strong>从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 10\n<strong>输出：</strong>false\n<strong>解释：</strong>从右向左读, 为 01 。因此它不是一个回文数。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = -101\n<strong>输出：</strong>false\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> <= x <= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong>你能不将整数转为字符串来解决这个问题吗？</p>\n","translatedTitle":"回文数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool isPalindrome(int x) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean isPalindrome(int x) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def isPalindrome(self, x: int) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool isPalindrome(int x){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool IsPalindrome(int x) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func isPalindrome(x int) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def isPalindrome(x: Int): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun isPalindrome(x: Int): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function isPalindrome(x: number): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n\n  end\nend"}]}