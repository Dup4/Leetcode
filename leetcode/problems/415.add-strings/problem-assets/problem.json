{"slug":"add-strings","id":415,"frontendId":415,"title":"Add Strings","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":530,"dislikes":0,"status":2,"tag":[{"name":"Math","slug":"math","translatedName":"数学"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Simulation","slug":"simulation","translatedName":"模拟"}],"totalAccepted":188180,"totalSubmission":344811,"hints":[],"sampleTestCase":"\"11\"\n\"123\"","exampleTestcases":"\"11\"\n\"123\"\n\"456\"\n\"77\"\n\"0\"\n\"0\"","content":"<p>Given two non-negative integers, <code>num1</code> and <code>num2</code> represented as string, return <em>the sum of</em> <code>num1</code> <em>and</em> <code>num2</code> <em>as a string</em>.</p>\n\n<p>You must solve the problem without using any built-in library for handling large integers (such as <code>BigInteger</code>). You must also not convert the inputs to integers directly.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;11&quot;, num2 = &quot;123&quot;\n<strong>Output:</strong> &quot;134&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;456&quot;, num2 = &quot;77&quot;\n<strong>Output:</strong> &quot;533&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;0&quot;, num2 = &quot;0&quot;\n<strong>Output:</strong> &quot;0&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of only digits.</li>\n\t<li><code>num1</code> and <code>num2</code> don&#39;t have any leading zeros except for the zero itself.</li>\n</ul>\n","translatedContent":"<p>给定两个字符串形式的非负整数&nbsp;<code>num1</code> 和<code>num2</code>&nbsp;，计算它们的和并同样以字符串形式返回。</p>\n\n<p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>），&nbsp;也不能直接将输入的字符串转换为整数形式。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"11\", num2 = \"123\"\n<strong>输出：</strong>\"134\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"456\", num2 = \"77\"\n<strong>输出：</strong>\"533\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"0\", num2 = \"0\"\n<strong>输出：</strong>\"0\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> 和<code>num2</code> 都只包含数字&nbsp;<code>0-9</code></li>\n\t<li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li>\n</ul>\n","translatedTitle":"字符串相加","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String addStrings(String num1, String num2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * addStrings(char * num1, char * num2){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string AddStrings(string num1, string num2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function(num1, num2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef add_strings(num1, num2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func addStrings(_ num1: String, _ num2: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func addStrings(num1 string, num2 string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def addStrings(num1: String, num2: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun addStrings(num1: String, num2: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn add_strings(num1: String, num2: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function addStrings($num1, $num2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function addStrings(num1: string, num2: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (add-strings num1 num2)\n  (-> string? string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec add_strings(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_strings(Num1, Num2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec add_strings(num1 :: String.t, num2 :: String.t) :: String.t\n  def add_strings(num1, num2) do\n\n  end\nend"}]}