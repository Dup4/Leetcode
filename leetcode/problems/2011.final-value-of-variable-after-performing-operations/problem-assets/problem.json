{"slug":"final-value-of-variable-after-performing-operations","id":2137,"frontendId":2011,"title":"Final Value of Variable After Performing Operations","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":13,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Simulation","slug":"simulation","translatedName":"模拟"}],"totalAccepted":12761,"totalSubmission":14709,"hints":["There are only two operations to keep track of.","Use a variable to store the value after each operation."],"sampleTestCase":"[\"--X\",\"X++\",\"X++\"]","exampleTestcases":"[\"--X\",\"X++\",\"X++\"]\n[\"++X\",\"++X\",\"X++\"]\n[\"X++\",\"++X\",\"--X\",\"X--\"]","content":"<p>There is a programming language with only <strong>four</strong> operations and <strong>one</strong> variable <code>X</code>:</p>\n\n<ul>\n\t<li><code>++X</code> and <code>X++</code> <strong>increments</strong> the value of the variable <code>X</code> by <code>1</code>.</li>\n\t<li><code>--X</code> and <code>X--</code> <strong>decrements</strong> the value of the variable <code>X</code> by <code>1</code>.</li>\n</ul>\n\n<p>Initially, the value of <code>X</code> is <code>0</code>.</p>\n\n<p>Given an array of strings <code>operations</code> containing a list of operations, return <em>the <strong>final </strong>value of </em><code>X</code> <em>after performing all the operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> operations = [&quot;--X&quot;,&quot;X++&quot;,&quot;X++&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> operations = [&quot;++X&quot;,&quot;++X&quot;,&quot;X++&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> operations = [&quot;X++&quot;,&quot;++X&quot;,&quot;--X&quot;,&quot;X--&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= operations.length &lt;= 100</code></li>\n\t<li><code>operations[i]</code> will be either <code>&quot;++X&quot;</code>, <code>&quot;X++&quot;</code>, <code>&quot;--X&quot;</code>, or <code>&quot;X--&quot;</code>.</li>\n</ul>\n","translatedContent":"<p>存在一种仅支持 4 种操作和 1 个变量 <code>X</code> 的编程语言：</p>\n\n<ul>\n\t<li><code>++X</code> 和 <code>X++</code> 使变量 <code>X</code> 的值 <strong>加</strong> <code>1</code></li>\n\t<li><code>--X</code> 和 <code>X--</code> 使变量 <code>X</code> 的值 <strong>减</strong> <code>1</code></li>\n</ul>\n\n<p>最初，<code>X</code> 的值是 <code>0</code></p>\n\n<p>给你一个字符串数组 <code>operations</code> ，这是由操作组成的一个列表，返回执行所有操作后，<em> </em><code>X</code> 的 <strong>最终值</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>operations = [\"--X\",\"X++\",\"X++\"]\n<strong>输出：</strong>1\n<strong>解释：</strong>操作按下述步骤执行：\n最初，X = 0\n--X：X 减 1 ，X =  0 - 1 = -1\nX++：X 加 1 ，X = -1 + 1 =  0\nX++：X 加 1 ，X =  0 + 1 =  1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>operations = [\"++X\",\"++X\",\"X++\"]\n<strong>输出：</strong>3\n<strong>解释：</strong>操作按下述步骤执行： \n最初，X = 0\n++X：X 加 1 ，X = 0 + 1 = 1\n++X：X 加 1 ，X = 1 + 1 = 2\nX++：X 加 1 ，X = 2 + 1 = 3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>操作按下述步骤执行：\n最初，X = 0\nX++：X 加 1 ，X = 0 + 1 = 1\n++X：X 加 1 ，X = 1 + 1 = 2\n--X：X 减 1 ，X = 2 - 1 = 1\nX--：X 减 1 ，X = 1 - 1 = 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= operations.length &lt;= 100</code></li>\n\t<li><code>operations[i]</code> 将会是 <code>\"++X\"</code>、<code>\"X++\"</code>、<code>\"--X\"</code> 或 <code>\"X--\"</code></li>\n</ul>\n","translatedTitle":"执行操作后的变量值","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int finalValueAfterOperations(String[] operations) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def finalValueAfterOperations(self, operations):\n        \"\"\"\n        :type operations: List[str]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint finalValueAfterOperations(char ** operations, int operationsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int FinalValueAfterOperations(string[] operations) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} operations\n * @return {number}\n */\nvar finalValueAfterOperations = function(operations) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} operations\n# @return {Integer}\ndef final_value_after_operations(operations)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func finalValueAfterOperations(_ operations: [String]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func finalValueAfterOperations(operations []string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def finalValueAfterOperations(operations: Array[String]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun finalValueAfterOperations(operations: Array<String>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn final_value_after_operations(operations: Vec<String>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $operations\n     * @return Integer\n     */\n    function finalValueAfterOperations($operations) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function finalValueAfterOperations(operations: string[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (final-value-after-operations operations)\n  (-> (listof string?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec final_value_after_operations(Operations :: [unicode:unicode_binary()]) -> integer().\nfinal_value_after_operations(Operations) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec final_value_after_operations(operations :: [String.t]) :: integer\n  def final_value_after_operations(operations) do\n\n  end\nend"}]}