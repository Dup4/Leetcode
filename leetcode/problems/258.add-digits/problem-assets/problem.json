{"slug":"add-digits","id":258,"frontendId":258,"title":"Add Digits","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":505,"dislikes":0,"status":2,"tag":[{"name":"Math","slug":"math","translatedName":"数学"},{"name":"Number Theory","slug":"number-theory","translatedName":"数论"},{"name":"Simulation","slug":"simulation","translatedName":"模拟"}],"totalAccepted":131865,"totalSubmission":185608,"hints":["A naive implementation of the above process is trivial. Could you come up with other methods?","What are all the possible results?","How do they occur, periodically or randomly?","You may find this <a href=\"https://en.wikipedia.org/wiki/Digital_root\" target=\"_blank\">Wikipedia article</a> useful."],"sampleTestCase":"38","exampleTestcases":"38\n0","content":"<p>Given an integer <code>num</code>, repeatedly add all its digits until the result has only one digit, and return it.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 38\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it without any loop/recursion in <code>O(1)</code> runtime?</p>\n","translatedContent":"<p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> num =<strong> </strong><code>38</code>\n<strong>输出:</strong> 2 \n<strong>解释: </strong>各位相加的过程为<strong>：\n</strong>38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2\n由于&nbsp;<code>2</code> 是一位数，所以返回 2。\n</pre>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> num =<strong> </strong>0\n<strong>输出:</strong> 0</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>你可以不使用循环或者递归，在 <code>O(1)</code> 时间复杂度内解决这个问题吗？</p>\n","translatedTitle":"各位相加","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int addDigits(int num) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int addDigits(int num) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def addDigits(self, num: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint addDigits(int num){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int AddDigits(int num) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} num\n# @return {Integer}\ndef add_digits(num)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func addDigits(_ num: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func addDigits(num int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def addDigits(num: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun addDigits(num: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn add_digits(num: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function addDigits($num) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function addDigits(num: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (add-digits num)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec add_digits(Num :: integer()) -> integer().\nadd_digits(Num) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec add_digits(num :: integer) :: integer\n  def add_digits(num) do\n\n  end\nend"}]}