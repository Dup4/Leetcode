{"slug":"powx-n","id":50,"frontendId":50,"title":"Pow(x, n)","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":925,"dislikes":0,"status":2,"tag":[{"name":"Recursion","slug":"recursion","translatedName":"递归"},{"name":"Math","slug":"math","translatedName":"数学"}],"totalAccepted":275283,"totalSubmission":727997,"hints":[],"sampleTestCase":"2.00000\n10","exampleTestcases":"2.00000\n10\n2.10000\n3\n2.00000\n-2","content":"<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedContent":"<p>实现&nbsp;<a href=\"https://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>&nbsp;，即计算 <code>x</code> 的 <code>n</code> 次幂函数（即，<code>x<sup>n</sup></code><sup><span style=\"font-size:10.8333px\"> </span></sup>）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 2.00000, n = 10\n<strong>输出：</strong>1024.00000\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 2.10000, n = 3\n<strong>输出：</strong>9.26100\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 2.00000, n = -2\n<strong>输出：</strong>0.25000\n<strong>解释：</strong>2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedTitle":"Pow(x, n)","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    double myPow(double x, int n) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public double myPow(double x, int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def myPow(self, x: float, n: int) -> float:"},{"lang":"C","langSlug":"c","code":"\n\ndouble myPow(double x, int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public double MyPow(double x, int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func myPow(x float64, n int) float64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def myPow(x: Double, n: Int): Double = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun myPow(x: Double, n: Int): Double {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function myPow(x: number, n: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n\n  end\nend"}]}