{"slug":"largest-number","id":179,"frontendId":179,"title":"Largest Number","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":909,"dislikes":0,"status":2,"tag":[{"name":"Greedy","slug":"greedy","translatedName":"贪心"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":146410,"totalSubmission":356301,"hints":[],"sampleTestCase":"[10,2]","exampleTestcases":"[10,2]\n[3,30,34,5,9]","content":"<p>Given a list of non-negative integers <code>nums</code>, arrange them such that they form the largest number and return it.</p>\n\n<p>Since the result may be very large, so you need to return a string instead of an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,2]\n<strong>Output:</strong> &quot;210&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,30,34,5,9]\n<strong>Output:</strong> &quot;9534330&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给定一组非负整数 <code>nums</code>，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p>\n\n<p><strong>注意：</strong>输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入<code>：</code></strong><code>nums = [10,2]</code>\n<strong>输出：</strong><code>\"210\"</code></pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入<code>：</code></strong><code>nums = [3,30,34,5,9]</code>\n<strong>输出：</strong><code>\"9534330\"</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"最大数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string largestNumber(vector<int>& nums) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String largestNumber(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def largestNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def largestNumber(self, nums: List[int]) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * largestNumber(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string LargestNumber(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {string}\n */\nvar largestNumber = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {String}\ndef largest_number(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func largestNumber(_ nums: [Int]) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func largestNumber(nums []int) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def largestNumber(nums: Array[Int]): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun largestNumber(nums: IntArray): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn largest_number(nums: Vec<i32>) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function largestNumber($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function largestNumber(nums: number[]): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (largest-number nums)\n  (-> (listof exact-integer?) string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec largest_number(Nums :: [integer()]) -> unicode:unicode_binary().\nlargest_number(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec largest_number(nums :: [integer]) :: String.t\n  def largest_number(nums) do\n\n  end\nend"}]}