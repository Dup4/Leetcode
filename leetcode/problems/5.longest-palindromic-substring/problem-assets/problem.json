{"slug":"longest-palindromic-substring","id":5,"frontendId":5,"title":"Longest Palindromic Substring","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":5027,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":974381,"totalSubmission":2673656,"hints":["How can we reuse a previously computed palindrome to compute a larger palindrome?","If “aba” is a palindrome, is “xabax” a palindrome? Similarly is “xabay” a palindrome?","Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."],"sampleTestCase":"\"babad\"","exampleTestcases":"\"babad\"\n\"cbbd\"","content":"<p>Given a string <code>s</code>, return <em>the longest palindromic substring</em> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"babad\"\n<strong>输出：</strong>\"bab\"\n<strong>解释：</strong>\"aba\" 同样是符合题意的答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"cbbd\"\n<strong>输出：</strong>\"bb\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> 仅由数字和英文字母组成</li>\n</ul>\n","translatedTitle":"最长回文子串","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string longestPalindrome(string s) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String longestPalindrome(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def longestPalindrome(self, s: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * longestPalindrome(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string LongestPalindrome(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func longestPalindrome(_ s: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func longestPalindrome(s string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def longestPalindrome(s: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun longestPalindrome(s: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function longestPalindrome(s: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (longest-palindrome s)\n  (-> string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n\n  end\nend"}]}