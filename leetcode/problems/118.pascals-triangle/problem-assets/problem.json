{"slug":"pascals-triangle","id":118,"frontendId":118,"title":"Pascal's Triangle","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":717,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":278416,"totalSubmission":374199,"hints":[],"sampleTestCase":"5","exampleTestcases":"5\n1","content":"<p>Given an integer <code>numRows</code>, return the first numRows of <strong>Pascal&#39;s triangle</strong>.</p>\n\n<p>In <strong>Pascal&#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n<img alt=\"\" src=\"problem-assets/https:--upload.wikimedia.org-wikipedia-commons-0-0d-PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" />\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> numRows = 5\n<strong>Output:</strong> [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> numRows = 1\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numRows &lt;= 30</code></li>\n</ul>\n","translatedContent":"<p>给定一个非负整数 <em><code>numRows</code>，</em>生成「杨辉三角」的前 <em><code>numRows</code> </em>行。</p>\n\n<p><small>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--pic.leetcode-cn.com-1626927345-DZmfxB-PascalTriangleAnimated2.gif\" /></p>\n\n<p> </p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> numRows = 5\n<strong>输出:</strong> [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> numRows = 1\n<strong>输出:</strong> [[1]]\n</pre>\n\n<p> </p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 <= numRows <= 30</code></li>\n</ul>\n","translatedTitle":"杨辉三角","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<List<Integer>> generate(int numRows) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** returnColumnSizes){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<IList<int>> Generate(int numRows) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} num_rows\n# @return {Integer[][]}\ndef generate(num_rows)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func generate(numRows int) [][]int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun generate(numRows: Int): List<List<Int>> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $numRows\n     * @return Integer[][]\n     */\n    function generate($numRows) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function generate(numRows: number): number[][] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (generate numRows)\n  (-> exact-integer? (listof (listof exact-integer?)))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec generate(NumRows :: integer()) -> [[integer()]].\ngenerate(NumRows) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec generate(num_rows :: integer) :: [[integer]]\n  def generate(num_rows) do\n\n  end\nend"}]}