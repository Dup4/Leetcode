{"slug":"implement-strstr","id":28,"frontendId":28,"title":"Implement strStr()","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":1307,"dislikes":0,"status":2,"tag":[{"name":"Two Pointers","slug":"two-pointers","translatedName":"双指针"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"String Matching","slug":"string-matching","translatedName":"字符串匹配"}],"totalAccepted":584200,"totalSubmission":1454380,"hints":[],"sampleTestCase":"\"hello\"\n\"ll\"","exampleTestcases":"\"hello\"\n\"ll\"\n\"aaaaa\"\n\"bba\"\n\"\"\n\"\"","content":"<p>Implement <a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strStr()</a>.</p>\n\n<p>Return the index of the first occurrence of needle in haystack, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p><strong>Clarification:</strong></p>\n\n<p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p>\n\n<p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string. This is consistent to C&#39;s&nbsp;<a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strstr()</a> and Java&#39;s&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> haystack = \"hello\", needle = \"ll\"\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> haystack = \"aaaaa\", needle = \"bba\"\n<strong>Output:</strong> -1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> haystack = \"\", needle = \"\"\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= haystack.length, needle.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and&nbsp;<code>needle</code> consist of only lower-case English characters.</li>\n</ul>\n","translatedContent":"<p>实现 <a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strStr()</a> 函数。</p>\n\n<p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  <code>-1</code><strong> </strong>。</p>\n\n<p> </p>\n\n<p><strong>说明：</strong></p>\n\n<p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>\n\n<p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与 C 语言的 <a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strstr()</a> 以及 Java 的 <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a> 定义相符。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>haystack = \"hello\", needle = \"ll\"\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>haystack = \"aaaaa\", needle = \"bba\"\n<strong>输出：</strong>-1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>haystack = \"\", needle = \"\"\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= haystack.length, needle.length <= 5 * 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li>\n</ul>\n","translatedTitle":"实现 strStr()","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int strStr(String haystack, String needle) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint strStr(char * haystack, char * needle){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int StrStr(string haystack, string needle) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func strStr(haystack string, needle string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function strStr(haystack: string, needle: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n\n  end\nend"}]}