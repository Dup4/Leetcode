{"slug":"valid-palindrome","id":125,"frontendId":125,"title":"Valid Palindrome","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":497,"dislikes":0,"status":2,"tag":[{"name":"Two Pointers","slug":"two-pointers","translatedName":"双指针"},{"name":"String","slug":"string","translatedName":"字符串"}],"totalAccepted":337944,"totalSubmission":718846,"hints":[],"sampleTestCase":"\"A man, a plan, a canal: Panama\"","exampleTestcases":"\"A man, a plan, a canal: Panama\"\n\"race a car\"\n\" \"","content":"<p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; &quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s is an empty string &quot;&quot; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n","translatedContent":"<p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n\n<p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p>\n\n<p> </p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \"A man, a plan, a canal: Panama\"\n<strong>输出:</strong> true\n<strong>解释：</strong>\"amanaplanacanalpanama\" 是回文串\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \"race a car\"\n<strong>输出:</strong> false\n<strong>解释：</strong>\"raceacar\" 不是回文串\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length <= 2 * 10<sup>5</sup></code></li>\n\t<li>字符串 <code>s</code> 由 ASCII 字符组成</li>\n</ul>\n","translatedTitle":"验证回文串","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool isPalindrome(string s) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean isPalindrome(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def isPalindrome(self, s: str) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool isPalindrome(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool IsPalindrome(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {Boolean}\ndef is_palindrome(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func isPalindrome(s string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def isPalindrome(s: String): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun isPalindrome(s: String): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isPalindrome($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function isPalindrome(s: string): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (is-palindrome s)\n  (-> string? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\nis_palindrome(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec is_palindrome(s :: String.t) :: boolean\n  def is_palindrome(s) do\n\n  end\nend"}]}