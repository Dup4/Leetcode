{"slug":"pascals-triangle-ii","id":119,"frontendId":119,"title":"Pascal's Triangle II","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":377,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":185165,"totalSubmission":272435,"hints":[],"sampleTestCase":"3","exampleTestcases":"3\n0\n1","content":"<p>Given an integer <code>rowIndex</code>, return the <code>rowIndex<sup>th</sup></code> (<strong>0-indexed</strong>) row of the <strong>Pascal&#39;s triangle</strong>.</p>\n\n<p>In <strong>Pascal&#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n<img alt=\"\" src=\"problem-assets/https:--upload.wikimedia.org-wikipedia-commons-0-0d-PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" />\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 3\n<strong>Output:</strong> [1,3,3,1]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 0\n<strong>Output:</strong> [1]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 1\n<strong>Output:</strong> [1,1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= rowIndex &lt;= 33</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p>\n","translatedContent":"<p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code><em> </em>行。</p>\n\n<p><small>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--pic.leetcode-cn.com-1626927345-DZmfxB-PascalTriangleAnimated2.gif\" /></p>\n\n<p> </p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> rowIndex = 3\n<strong>输出:</strong> [1,3,3,1]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> rowIndex = 0\n<strong>输出:</strong> [1]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> rowIndex = 1\n<strong>输出:</strong> [1,1]\n</pre>\n\n<p> </p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>0 <= rowIndex <= 33</code></li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你可以优化你的算法到 <code><em>O</em>(<i>rowIndex</i>)</code> 空间复杂度吗？</p>\n","translatedTitle":"杨辉三角 II","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<Integer> getRow(int rowIndex) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getRow(int rowIndex, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<int> GetRow(int rowIndex) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} row_index\n# @return {Integer[]}\ndef get_row(row_index)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func getRow(_ rowIndex: Int) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func getRow(rowIndex int) []int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def getRow(rowIndex: Int): List[Int] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun getRow(rowIndex: Int): List<Int> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn get_row(row_index: i32) -> Vec<i32> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $rowIndex\n     * @return Integer[]\n     */\n    function getRow($rowIndex) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function getRow(rowIndex: number): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (get-row rowIndex)\n  (-> exact-integer? (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec get_row(RowIndex :: integer()) -> [integer()].\nget_row(RowIndex) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec get_row(row_index :: integer) :: [integer]\n  def get_row(row_index) do\n\n  end\nend"}]}