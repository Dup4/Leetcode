{"slug":"palindrome-partitioning-ii","id":132,"frontendId":132,"title":"Palindrome Partitioning II","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":555,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":57243,"totalSubmission":115852,"hints":[],"sampleTestCase":"\"aab\"","exampleTestcases":"\"aab\"\n\"a\"\n\"ab\"","content":"<p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a palindrome.</p>\n\n<p>Return <em>the minimum cuts needed</em> for a palindrome partitioning of <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The palindrome partitioning [&quot;aa&quot;,&quot;b&quot;] could be produced using 1 cut.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是回文。</p>\n\n<p>返回符合要求的 <strong>最少分割次数</strong> 。</p>\n\n<div class=\"original__bRMd\">\n<div>\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"aab\"\n<strong>输出：</strong>1\n<strong>解释：</strong>只需一次分割就可将 <em>s </em>分割成 [\"aa\",\"b\"] 这样两个回文子串。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ab\"\n<strong>输出：</strong>1\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length <= 2000</code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n</div>\n</div>\n","translatedTitle":"分割回文串 II","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int minCut(string s) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int minCut(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def minCut(self, s: str) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint minCut(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MinCut(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar minCut = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {Integer}\ndef min_cut(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func minCut(_ s: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func minCut(s string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def minCut(s: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun minCut(s: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn min_cut(s: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minCut($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function minCut(s: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (min-cut s)\n  (-> string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec min_cut(S :: unicode:unicode_binary()) -> integer().\nmin_cut(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec min_cut(s :: String.t) :: integer\n  def min_cut(s) do\n\n  end\nend"}]}