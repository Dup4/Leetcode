{"slug":"divide-two-integers","id":29,"frontendId":29,"title":"Divide Two Integers","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":873,"dislikes":0,"status":2,"tag":[{"name":"Bit Manipulation","slug":"bit-manipulation","translatedName":"位运算"},{"name":"Math","slug":"math","translatedName":"数学"}],"totalAccepted":156437,"totalSubmission":707455,"hints":[],"sampleTestCase":"10\n3","exampleTestcases":"10\n3\n7\n-3","content":"<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers <strong>without</strong> using multiplication, division, and mod operator.</p>\n\n<p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>8.345</code> would be truncated to <code>8</code>, and <code>-2.7335</code> would be truncated to <code>-2</code>.</p>\n\n<p>Return <em>the <strong>quotient</strong> after dividing </em><code>dividend</code><em> by </em><code>divisor</code>.</p>\n\n<p><strong>Note: </strong>Assume we are dealing with an environment that could only store integers within the <strong>32-bit</strong> signed integer range: <code>[&minus;2<sup>31</sup>, 2<sup>31</sup> &minus; 1]</code>. For this problem, if the quotient is <strong>strictly greater than</strong> <code>2<sup>31</sup> - 1</code>, then return <code>2<sup>31</sup> - 1</code>, and if the quotient is <strong>strictly less than</strong> <code>-2<sup>31</sup></code>, then return <code>-2<sup>31</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 10, divisor = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 10/3 = 3.33333.. which is truncated to 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 7, divisor = -3\n<strong>Output:</strong> -2\n<strong>Explanation:</strong> 7/-3 = -2.33333.. which is truncated to -2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>divisor != 0</code></li>\n</ul>\n","translatedContent":"<p>给定两个整数，被除数&nbsp;<code>dividend</code>&nbsp;和除数&nbsp;<code>divisor</code>。将两数相除，要求不使用乘法、除法和 mod 运算符。</p>\n\n<p>返回被除数&nbsp;<code>dividend</code>&nbsp;除以除数&nbsp;<code>divisor</code>&nbsp;得到的商。</p>\n\n<p>整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8</code> 以及 <code>truncate(-2.7335) = -2</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 10, divisor = 3\n<strong>输出:</strong> 3\n<strong>解释: </strong>10/3 = truncate(3.33333..) = truncate(3) = 3</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 7, divisor = -3\n<strong>输出:</strong> -2\n<strong>解释:</strong> 7/-3 = truncate(-2.33333..) = -2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>被除数和除数均为 32 位有符号整数。</li>\n\t<li>除数不为&nbsp;0。</li>\n\t<li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]。本题中，如果除法结果溢出，则返回 2<sup>31&nbsp;</sup>&minus; 1。</li>\n</ul>\n","translatedTitle":"两数相除","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int divide(int dividend, int divisor) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint divide(int dividend, int divisor){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int Divide(int dividend, int divisor) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func divide(dividend int, divisor int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function divide(dividend: number, divisor: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (divide dividend divisor)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\ndivide(Dividend, Divisor) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\n  def divide(dividend, divisor) do\n\n  end\nend"}]}