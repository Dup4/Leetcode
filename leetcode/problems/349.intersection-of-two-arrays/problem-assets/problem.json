{"slug":"intersection-of-two-arrays","id":349,"frontendId":349,"title":"Intersection of Two Arrays","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":510,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Hash Table","slug":"hash-table","translatedName":"哈希表"},{"name":"Two Pointers","slug":"two-pointers","translatedName":"双指针"},{"name":"Binary Search","slug":"binary-search","translatedName":"二分查找"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":272665,"totalSubmission":368820,"hints":[],"sampleTestCase":"[1,2,2,1]\n[2,2]","exampleTestcases":"[1,2,2,1]\n[2,2]\n[4,9,5]\n[9,4,9,8,4]","content":"<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must be <strong>unique</strong> and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [9,4]\n<strong>Explanation:</strong> [4,9] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给定两个数组&nbsp;<code>nums1</code>&nbsp;和&nbsp;<code>nums2</code> ，返回 <em>它们的交集</em>&nbsp;。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>输出：</strong>[2]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>输出：</strong>[9,4]\n<strong>解释：</strong>[4,9] 也是可通过的\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"两个数组的交集","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int[] Intersection(int[] nums1, int[] nums2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersection(nums1, nums2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func intersection(nums1 []int, nums2 []int) []int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun intersection(nums1: IntArray, nums2: IntArray): IntArray {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn intersection(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersection($nums1, $nums2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function intersection(nums1: number[], nums2: number[]): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (intersection nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec intersection(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\nintersection(Nums1, Nums2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec intersection(nums1 :: [integer], nums2 :: [integer]) :: [integer]\n  def intersection(nums1, nums2) do\n\n  end\nend"}]}