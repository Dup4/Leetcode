{"slug":"generate-parentheses","id":22,"frontendId":22,"title":"Generate Parentheses","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2583,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"},{"name":"Backtracking","slug":"backtracking","translatedName":"回溯"}],"totalAccepted":488344,"totalSubmission":630691,"hints":[],"sampleTestCase":"3","exampleTestcases":"3\n1","content":"<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n","translatedContent":"<p>数字 <code>n</code>&nbsp;代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的 </strong>括号组合。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3\n<strong>输出：</strong>[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 1\n<strong>输出：</strong>[\"()\"]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n","translatedTitle":"括号生成","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<String> generateParenthesis(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** generateParenthesis(int n, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func generateParenthesis(n int) []string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function generateParenthesis(n: number): string[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n\n  end\nend"}]}