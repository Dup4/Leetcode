{"slug":"multiply-strings","id":43,"frontendId":43,"title":"Multiply Strings","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":862,"dislikes":0,"status":2,"tag":[{"name":"Math","slug":"math","translatedName":"数学"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Simulation","slug":"simulation","translatedName":"模拟"}],"totalAccepted":206434,"totalSubmission":460009,"hints":[],"sampleTestCase":"\"2\"\n\"3\"","exampleTestcases":"\"2\"\n\"3\"\n\"123\"\n\"456\"","content":"<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\n\n<p><strong>Note:</strong>&nbsp;You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num1 = \"2\", num2 = \"3\"\n<strong>Output:</strong> \"6\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num1 = \"123\", num2 = \"456\"\n<strong>Output:</strong> \"56088\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of digits only.</li>\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number <code>0</code> itself.</li>\n</ul>\n","translatedContent":"<p>给定两个以字符串形式表示的非负整数&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>，返回&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>&nbsp;的乘积，它们的乘积也表示为字符串形式。</p>\n\n<p><strong>注意：</strong>不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> num1 = \"2\", num2 = \"3\"\n<strong>输出:</strong> \"6\"</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> num1 = \"123\", num2 = \"456\"\n<strong>输出:</strong> \"56088\"</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li>\n\t<li><code>num1</code>&nbsp;和 <code>num2</code>&nbsp;只能由数字组成。</li>\n\t<li><code>num1</code>&nbsp;和 <code>num2</code>&nbsp;都不包含任何前导零，除了数字0本身。</li>\n</ul>\n","translatedTitle":"字符串相乘","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string multiply(string num1, string num2) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String multiply(String num1, String num2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def multiply(self, num1: str, num2: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * multiply(char * num1, char * num2){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string Multiply(string num1, string num2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef multiply(num1, num2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func multiply(_ num1: String, _ num2: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func multiply(num1 string, num2 string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def multiply(num1: String, num2: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun multiply(num1: String, num2: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn multiply(num1: String, num2: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function multiply($num1, $num2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function multiply(num1: string, num2: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (multiply num1 num2)\n  (-> string? string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmultiply(Num1, Num2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\n  def multiply(num1, num2) do\n\n  end\nend"}]}