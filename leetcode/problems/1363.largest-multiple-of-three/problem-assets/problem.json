{"slug":"largest-multiple-of-three","id":1277,"frontendId":1363,"title":"Largest Multiple of Three","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":65,"dislikes":0,"status":2,"tag":[{"name":"Greedy","slug":"greedy","translatedName":"贪心"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":5980,"totalSubmission":16312,"hints":["A number is a multiple of three if and only if its sum of digits is a multiple of three.","Use dynamic programming.","To find the maximum number, try to maximize the number of digits of the number.","Sort the digits in descending order to find the maximum number."],"sampleTestCase":"[8,1,9]","exampleTestcases":"[8,1,9]\n[8,6,7,1,0]\n[1]","content":"<p>Given an array of digits <code>digits</code>, return <em>the largest multiple of <strong>three</strong> that can be formed by concatenating some of the given digits in <strong>any order</strong></em>. If there is no answer return an empty string.</p>\n\n<p>Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [8,1,9]\n<strong>Output:</strong> &quot;981&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [8,6,7,1,0]\n<strong>Output:</strong> &quot;8760&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [1]\n<strong>Output:</strong> &quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组&nbsp;<code>digits</code>，你可以通过按任意顺序连接其中某些数字来形成 <strong>3</strong> 的倍数，请你返回所能得到的最大的 3 的倍数。</p>\n\n<p>由于答案可能不在整数数据类型范围内，请以字符串形式返回答案。</p>\n\n<p>如果无法得到答案，请返回一个空字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>digits = [8,1,9]\n<strong>输出：</strong>&quot;981&quot;\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>digits = [8,6,7,1,0]\n<strong>输出：</strong>&quot;8760&quot;\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>digits = [1]\n<strong>输出：</strong>&quot;&quot;\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>digits = [0,0,0,0,0,0]\n<strong>输出：</strong>&quot;0&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n\t<li>返回的结果不应包含不必要的前导零。</li>\n</ul>\n","translatedTitle":"形成三的最大倍数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string largestMultipleOfThree(vector<int>& digits) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String largestMultipleOfThree(int[] digits) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def largestMultipleOfThree(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * largestMultipleOfThree(int* digits, int digitsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string LargestMultipleOfThree(int[] digits) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} digits\n * @return {string}\n */\nvar largestMultipleOfThree = function(digits) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} digits\n# @return {String}\ndef largest_multiple_of_three(digits)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func largestMultipleOfThree(_ digits: [Int]) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func largestMultipleOfThree(digits []int) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def largestMultipleOfThree(digits: Array[Int]): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun largestMultipleOfThree(digits: IntArray): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn largest_multiple_of_three(digits: Vec<i32>) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return String\n     */\n    function largestMultipleOfThree($digits) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function largestMultipleOfThree(digits: number[]): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (largest-multiple-of-three digits)\n  (-> (listof exact-integer?) string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec largest_multiple_of_three(Digits :: [integer()]) -> unicode:unicode_binary().\nlargest_multiple_of_three(Digits) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec largest_multiple_of_three(digits :: [integer]) :: String.t\n  def largest_multiple_of_three(digits) do\n\n  end\nend"}]}