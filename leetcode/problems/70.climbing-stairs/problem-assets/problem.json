{"slug":"climbing-stairs","id":70,"frontendId":70,"title":"Climbing Stairs","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2258,"dislikes":0,"status":2,"tag":[{"name":"Memoization","slug":"memoization","translatedName":"记忆化搜索"},{"name":"Math","slug":"math","translatedName":"数学"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":740388,"totalSubmission":1383802,"hints":["To reach nth step, what could have been your previous steps? (Think about the step sizes)"],"sampleTestCase":"2","exampleTestcases":"2\n3","content":"<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n","translatedContent":"<p>假设你正在爬楼梯。需要 <code>n</code>&nbsp;阶你才能到达楼顶。</p>\n\n<p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>有两种方法可以爬到楼顶。\n1. 1 阶 + 1 阶\n2. 2 阶</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>有三种方法可以爬到楼顶。\n1. 1 阶 + 1 阶 + 1 阶\n2. 1 阶 + 2 阶\n3. 2 阶 + 1 阶\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n","translatedTitle":"爬楼梯","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int climbStairs(int n) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int climbStairs(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def climbStairs(self, n: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint climbStairs(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int ClimbStairs(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func climbStairs(_ n: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func climbStairs(n int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def climbStairs(n: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun climbStairs(n: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function climbStairs(n: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n\n  end\nend"}]}