{"slug":"divisor-game","id":1086,"frontendId":1025,"title":"Divisor Game","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":348,"dislikes":0,"status":2,"tag":[{"name":"Brainteaser","slug":"brainteaser","translatedName":"脑筋急转弯"},{"name":"Math","slug":"math","translatedName":"数学"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"},{"name":"Game Theory","slug":"game-theory","translatedName":"博弈"}],"totalAccepted":82745,"totalSubmission":116900,"hints":["If the current number is even, we can always subtract a 1 to make it odd.  If the current number is odd, we must subtract an odd number to make it even."],"sampleTestCase":"2","exampleTestcases":"2\n3","content":"<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\n\n<p>Initially, there is a number <code>n</code> on the chalkboard. On each player&#39;s turn, that player makes a move consisting of:</p>\n\n<ul>\n\t<li>Choosing any <code>x</code> with <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li>\n\t<li>Replacing the number <code>n</code> on the chalkboard with <code>n - x</code>.</li>\n</ul>\n\n<p>Also, if a player cannot make a move, they lose the game.</p>\n\n<p>Return <code>true</code> <em>if and only if Alice wins the game, assuming both players play optimally</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Alice chooses 1, and Bob has no more moves.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。</p>\n\n<p>最初，黑板上有一个数字&nbsp;<code>n</code>&nbsp;。在每个玩家的回合，玩家需要执行以下操作：</p>\n\n<ul>\n\t<li>选出任一&nbsp;<code>x</code>，满足&nbsp;<code>0 &lt; x &lt; n</code>&nbsp;且&nbsp;<code>n % x == 0</code>&nbsp;。</li>\n\t<li>用 <code>n - x</code>&nbsp;替换黑板上的数字&nbsp;<code>n</code> 。</li>\n</ul>\n\n<p>如果玩家无法执行这些操作，就会输掉游戏。</p>\n\n<p><em>只有在爱丽丝在游戏中取得胜利时才返回&nbsp;<code>true</code>&nbsp;。假设两个玩家都以最佳状态参与游戏。</em></p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>爱丽丝选择 1，鲍勃无法进行操作。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3\n<strong>输出：</strong>false\n<strong>解释：</strong>爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"除数博弈","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool divisorGame(int n) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean divisorGame(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def divisorGame(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def divisorGame(self, n: int) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool divisorGame(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool DivisorGame(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {boolean}\n */\nvar divisorGame = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {Boolean}\ndef divisor_game(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func divisorGame(_ n: Int) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func divisorGame(n int) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def divisorGame(n: Int): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun divisorGame(n: Int): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn divisor_game(n: i32) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function divisorGame($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function divisorGame(n: number): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (divisor-game n)\n  (-> exact-integer? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec divisor_game(N :: integer()) -> boolean().\ndivisor_game(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec divisor_game(n :: integer) :: boolean\n  def divisor_game(n) do\n\n  end\nend"}]}