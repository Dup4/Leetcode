{"slug":"strange-printer-ii","id":1696,"title":"Strange Printer II","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":25,"dislikes":0,"status":2,"tag":[{"name":"Graph","slug":"graph","translatedName":"图"},{"name":"Topological Sort","slug":"topological-sort","translatedName":"拓扑排序"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Matrix","slug":"matrix","translatedName":"矩阵"}],"totalAccepted":1313,"totalSubmission":2234,"hints":["Try thinking in reverse. Given the grid, how can you tell if a colour was painted last?"],"sampleTestCase":"[[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]","exampleTestcases":"[[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\n[[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\n[[1,2,1],[2,1,2],[1,2,1]]","content":"<p>There is a strange printer with the following two special requirements:</p>\n\n<ul>\n\t<li>On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.</li>\n\t<li>Once the printer has used a color for the above operation, <strong>the same color cannot be used again</strong>.</li>\n</ul>\n\n<p>You are given a <code>m x n</code> matrix <code>targetGrid</code>, where <code>targetGrid[row][col]</code> is the color in the position <code>(row, col)</code> of the grid.</p>\n\n<p>Return <code>true</code><em> if it is possible to print the matrix </em><code>targetGrid</code><em>,</em><em> otherwise, return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-23-print1.jpg\" style=\"width: 600px; height: 175px;\" />\n<pre>\n<strong>Input:</strong> targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-23-print2.jpg\" style=\"width: 600px; height: 367px;\" />\n<pre>\n<strong>Input:</strong> targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to form targetGrid because it is not allowed to print the same color in different turns.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == targetGrid.length</code></li>\n\t<li><code>n == targetGrid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 60</code></li>\n\t<li><code>1 &lt;= targetGrid[row][col] &lt;= 60</code></li>\n</ul>\n","translatedContent":"<p>给你一个奇怪的打印机，它有如下两个特殊的打印规则：</p>\n\n<ul>\n\t<li>每一次操作时，打印机会用同一种颜色打印一个矩形的形状，每次打印会覆盖矩形对应格子里原本的颜色。</li>\n\t<li>一旦矩形根据上面的规则使用了一种颜色，那么 <strong>相同的颜色不能再被使用&nbsp;</strong>。</li>\n</ul>\n\n<p>给你一个初始没有颜色的&nbsp;<code>m x n</code>&nbsp;的矩形&nbsp;<code>targetGrid</code>&nbsp;，其中&nbsp;<code>targetGrid[row][col]</code>&nbsp;是位置&nbsp;<code>(row, col)</code>&nbsp;的颜色。</p>\n\n<p>如果你能按照上述规则打印出矩形<em>&nbsp;</em><code>targetGrid</code>&nbsp;，请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-09-19-sample_1_1929.png\" style=\"height: 138px; width: 483px;\"></p>\n\n<pre><strong>输入：</strong>targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-09-19-sample_2_1929.png\" style=\"height: 290px; width: 483px;\"></p>\n\n<pre><strong>输入：</strong>targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\n<strong>输出：</strong>false\n<strong>解释：</strong>没有办法得到 targetGrid ，因为每一轮操作使用的颜色互不相同。</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>targetGrid = [[1,1,1],[3,1,3]]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == targetGrid.length</code></li>\n\t<li><code>n == targetGrid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 60</code></li>\n\t<li><code>1 &lt;= targetGrid[row][col] &lt;= 60</code></li>\n</ul>\n","translatedTitle":"奇怪的打印机 II","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool isPrintable(vector<vector<int>>& targetGrid) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean isPrintable(int[][] targetGrid) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def isPrintable(self, targetGrid):\n        \"\"\"\n        :type targetGrid: List[List[int]]\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def isPrintable(self, targetGrid: List[List[int]]) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool isPrintable(int** targetGrid, int targetGridSize, int* targetGridColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool IsPrintable(int[][] targetGrid) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} targetGrid\n * @return {boolean}\n */\nvar isPrintable = function(targetGrid) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} target_grid\n# @return {Boolean}\ndef is_printable(target_grid)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func isPrintable(_ targetGrid: [[Int]]) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func isPrintable(targetGrid [][]int) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def isPrintable(targetGrid: Array[Array[Int]]): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun isPrintable(targetGrid: Array<IntArray>): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn is_printable(target_grid: Vec<Vec<i32>>) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $targetGrid\n     * @return Boolean\n     */\n    function isPrintable($targetGrid) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function isPrintable(targetGrid: number[][]): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (is-printable targetGrid)\n  (-> (listof (listof exact-integer?)) boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec is_printable(TargetGrid :: [[integer()]]) -> boolean().\nis_printable(TargetGrid) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec is_printable(target_grid :: [[integer]]) :: boolean\n  def is_printable(target_grid) do\n\n  end\nend"}]}