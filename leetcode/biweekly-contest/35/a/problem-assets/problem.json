{"slug":"sum-of-all-odd-length-subarrays","id":1693,"title":"Sum of All Odd Length Subarrays","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":147,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Math","slug":"math","translatedName":"数学"},{"name":"Prefix Sum","slug":"prefix-sum","translatedName":"前缀和"}],"totalAccepted":46335,"totalSubmission":55226,"hints":["You can brute force – try every (i,j) pair, and if the length is odd, go through and add the sum to the answer."],"sampleTestCase":"[1,4,2,5,3]","exampleTestcases":"[1,4,2,5,3]\n[1,2]\n[10,11,12]","content":"<p>Given an array of positive integers&nbsp;<code>arr</code>, calculate the sum of all possible odd-length subarrays.</p>\n\n<p>A subarray is a contiguous&nbsp;subsequence of the array.</p>\n\n<p>Return&nbsp;<em>the sum of all odd-length subarrays of&nbsp;</em><code>arr</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,4,2,5,3]\n<strong>Output:</strong> 58\n<strong>Explanation: </strong>The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2]\n<strong>Output:</strong> 3\n<b>Explanation: </b>There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [10,11,12]\n<strong>Output:</strong> 66\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你一个正整数数组&nbsp;<code>arr</code>&nbsp;，请你计算所有可能的奇数长度子数组的和。</p>\n\n<p><strong>子数组</strong> 定义为原数组中的一个连续子序列。</p>\n\n<p>请你返回 <code>arr</code>&nbsp;中 <strong>所有奇数长度子数组的和</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>arr = [1,4,2,5,3]\n<strong>输出：</strong>58\n<strong>解释：</strong>所有奇数长度子数组和它们的和为：\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\n我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>arr = [1,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>总共只有 2 个长度为奇数的子数组，[1] 和 [2]。它们的和为 3 。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>arr = [10,11,12]\n<strong>输出：</strong>66\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"所有奇数长度子数组的和","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int sumOddLengthSubarrays(vector<int>& arr) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int sumOddLengthSubarrays(int[] arr) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def sumOddLengthSubarrays(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint sumOddLengthSubarrays(int* arr, int arrSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int SumOddLengthSubarrays(int[] arr) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} arr\n * @return {number}\n */\nvar sumOddLengthSubarrays = function(arr) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} arr\n# @return {Integer}\ndef sum_odd_length_subarrays(arr)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func sumOddLengthSubarrays(_ arr: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func sumOddLengthSubarrays(arr []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def sumOddLengthSubarrays(arr: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun sumOddLengthSubarrays(arr: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn sum_odd_length_subarrays(arr: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function sumOddLengthSubarrays($arr) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function sumOddLengthSubarrays(arr: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (sum-odd-length-subarrays arr)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec sum_odd_length_subarrays(Arr :: [integer()]) -> integer().\nsum_odd_length_subarrays(Arr) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec sum_odd_length_subarrays(arr :: [integer]) :: integer\n  def sum_odd_length_subarrays(arr) do\n\n  end\nend"}]}