{"slug":"find-three-consecutive-integers-that-sum-to-a-given-number","id":2278,"title":"Find Three Consecutive Integers That Sum to a Given Number","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":3807,"totalSubmission":5695,"hints":["Notice that if a solution exists, we can represent them as x-1, x, x+1. What does this tell us about the number?","Notice the sum of the numbers will be 3x. Can you solve for x?"],"sampleTestCase":"33","exampleTestcases":"33\n4","content":"<p>Given an integer <code>num</code>, return <em>three consecutive integers (as a sorted array)</em><em> that <strong>sum</strong> to </em><code>num</code>. If <code>num</code> cannot be expressed as the sum of three consecutive integers, return<em> an <strong>empty</strong> array.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 33\n<strong>Output:</strong> [10,11,12]\n<strong>Explanation:</strong> 33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 4\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There is no way to express 4 as the sum of 3 consecutive integers.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 10<sup>15</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数&nbsp;<code>num</code>&nbsp;，请你返回三个连续的整数，它们的&nbsp;<strong>和</strong>&nbsp;为<em>&nbsp;</em><code>num</code>&nbsp;。如果&nbsp;<code>num</code>&nbsp;无法被表示成三个连续整数的和，请你返回一个 <strong>空</strong>&nbsp;数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>num = 33\n<b>输出：</b>[10,11,12]\n<b>解释：</b>33 可以表示为 10 + 11 + 12 = 33 。\n10, 11, 12 是 3 个连续整数，所以返回 [10, 11, 12] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>num = 4\n<b>输出：</b>[]\n<b>解释：</b>没有办法将 4 表示成 3 个连续整数的和。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 10<sup>15</sup></code></li>\n</ul>\n","translatedTitle":"找到和为给定整数的三个连续整数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<long long> sumOfThree(long long num) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long[] sumOfThree(long num) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def sumOfThree(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def sumOfThree(self, num: int) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* sumOfThree(long long num, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long[] SumOfThree(long num) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} num\n * @return {number[]}\n */\nvar sumOfThree = function(num) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} num\n# @return {Integer[]}\ndef sum_of_three(num)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func sumOfThree(_ num: Int) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func sumOfThree(num int64) []int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def sumOfThree(num: Long): Array[Long] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun sumOfThree(num: Long): LongArray {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn sum_of_three(num: i64) -> Vec<i64> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer[]\n     */\n    function sumOfThree($num) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function sumOfThree(num: number): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (sum-of-three num)\n  (-> exact-integer? (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec sum_of_three(Num :: integer()) -> [integer()].\nsum_of_three(Num) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec sum_of_three(num :: integer) :: [integer]\n  def sum_of_three(num) do\n\n  end\nend"}]}