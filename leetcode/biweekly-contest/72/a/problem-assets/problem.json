{"slug":"count-equal-and-divisible-pairs-in-an-array","id":2277,"title":"Count Equal and Divisible Pairs in an Array","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":3846,"totalSubmission":4708,"hints":["For every possible pair of indices (i, j) where i < j, check if it satisfies the given conditions."],"sampleTestCase":"[3,1,2,2,2,1,3]\n2","exampleTestcases":"[3,1,2,2,2,1,3]\n2\n[1,2,3,4]\n1","content":"Given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code> and an integer <code>k</code>, return <em>the <strong>number of pairs</strong></em> <code>(i, j)</code> <em>where</em> <code>0 &lt;= i &lt; j &lt; n</code>, <em>such that</em> <code>nums[i] == nums[j]</code> <em>and</em> <code>(i * j)</code> <em>is divisible by</em> <code>k</code>.\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,2,2,2,1,3], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nThere are 4 pairs that meet all the requirements:\n- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.\n- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.\n- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.\n- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 100</code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，请你返回满足&nbsp;<code>0 &lt;= i &lt; j &lt; n</code>&nbsp;，<code>nums[i] == nums[j]</code> 且&nbsp;<code>(i * j)</code>&nbsp;能被&nbsp;<code>k</code>&nbsp;整除的数对&nbsp;<code>(i, j)</code>&nbsp;的&nbsp;<strong>数目</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [3,1,2,2,2,1,3], k = 2\n<b>输出：</b>4\n<strong>解释：</strong>\n总共有 4 对数符合所有要求：\n- nums[0] == nums[6] 且 0 * 6 == 0 ，能被 2 整除。\n- nums[2] == nums[3] 且 2 * 3 == 6 ，能被 2 整除。\n- nums[2] == nums[4] 且 2 * 4 == 8 ，能被 2 整除。\n- nums[3] == nums[4] 且 3 * 4 == 12 ，能被 2 整除。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,2,3,4], k = 1\n<b>输出：</b>0\n<b>解释：</b>由于数组中没有重复数值，所以没有数对 (i,j) 符合所有要求。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 100</code></li>\n</ul>\n","translatedTitle":"统计数组中相等且可以被整除的数对","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int countPairs(vector<int>& nums, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int countPairs(int[] nums, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint countPairs(int* nums, int numsSize, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int CountPairs(int[] nums, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countPairs = function(nums, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_pairs(nums, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countPairs(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countPairs(nums []int, k int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countPairs(nums: Array[Int], k: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countPairs(nums: IntArray, k: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_pairs(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countPairs($nums, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countPairs(nums: number[], k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-pairs nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_pairs(Nums :: [integer()], K :: integer()) -> integer().\ncount_pairs(Nums, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_pairs(nums :: [integer], k :: integer) :: integer\n  def count_pairs(nums, k) do\n\n  end\nend"}]}