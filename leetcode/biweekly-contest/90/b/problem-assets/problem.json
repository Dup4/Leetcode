{"slug":"words-within-two-edits-of-dictionary","id":2550,"frontendId":6228,"title":"Words Within Two Edits of Dictionary","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2487,"totalSubmission":3868,"hints":["Try brute-forcing the problem.","For each word in queries, try comparing to each word in dictionary.","If there is a maximum of two edit differences, the word should be present in answer."],"sampleTestCase":"[\"word\",\"note\",\"ants\",\"wood\"]\n[\"wood\",\"joke\",\"moat\"]","exampleTestcases":"[\"word\",\"note\",\"ants\",\"wood\"]\n[\"wood\",\"joke\",\"moat\"]\n[\"yes\"]\n[\"not\"]","content":"<p>You are given two string arrays, <code>queries</code> and <code>dictionary</code>. All words in each array comprise of lowercase English letters and have the same length.</p>\n\n<p>In one <strong>edit</strong> you can take a word from <code>queries</code>, and change any letter in it to any other letter. Find all words from <code>queries</code> that, after a <strong>maximum</strong> of two edits, equal some word from <code>dictionary</code>.</p>\n\n<p>Return<em> a list of all words from </em><code>queries</code><em>, </em><em>that match with some word from </em><code>dictionary</code><em> after a maximum of <strong>two edits</strong></em>. Return the words in the <strong>same order</strong> they appear in <code>queries</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [&quot;word&quot;,&quot;note&quot;,&quot;ants&quot;,&quot;wood&quot;], dictionary = [&quot;wood&quot;,&quot;joke&quot;,&quot;moat&quot;]\n<strong>Output:</strong> [&quot;word&quot;,&quot;note&quot;,&quot;wood&quot;]\n<strong>Explanation:</strong>\n- Changing the &#39;r&#39; in &quot;word&quot; to &#39;o&#39; allows it to equal the dictionary word &quot;wood&quot;.\n- Changing the &#39;n&#39; to &#39;j&#39; and the &#39;t&#39; to &#39;k&#39; in &quot;note&quot; changes it to &quot;joke&quot;.\n- It would take more than 2 edits for &quot;ants&quot; to equal a dictionary word.\n- &quot;wood&quot; can remain unchanged (0 edits) and match the corresponding dictionary word.\nThus, we return [&quot;word&quot;,&quot;note&quot;,&quot;wood&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [&quot;yes&quot;], dictionary = [&quot;not&quot;]\n<strong>Output:</strong> []\n<strong>Explanation:</strong>\nApplying any two edits to &quot;yes&quot; cannot make it equal to &quot;not&quot;. Thus, we return an empty array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length, dictionary.length &lt;= 100</code></li>\n\t<li><code>n == queries[i].length == dictionary[j].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li>All <code>queries[i]</code> and <code>dictionary[j]</code> are composed of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你两个字符串数组&nbsp;<code>queries</code> 和&nbsp;<code>dictionary</code>&nbsp;。数组中所有单词都只包含小写英文字母，且长度都相同。</p>\n\n<p>一次 <strong>编辑</strong>&nbsp;中，你可以从 <code>queries</code>&nbsp;中选择一个单词，将任意一个字母修改成任何其他字母。从&nbsp;<code>queries</code>&nbsp;中找到所有满足以下条件的字符串：<strong>不超过</strong>&nbsp;两次编辑内，字符串与&nbsp;<code>dictionary</code>&nbsp;中某个字符串相同。</p>\n\n<p>请你返回<em>&nbsp;</em><code>queries</code>&nbsp;中的单词列表，这些单词距离&nbsp;<code>dictionary</code>&nbsp;中的单词&nbsp;<strong>编辑次数</strong>&nbsp;不超过&nbsp;<strong>两次</strong>&nbsp;。单词返回的顺序需要与&nbsp;<code>queries</code>&nbsp;中原本顺序相同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"]\n<b>输出：</b>[\"word\",\"note\",\"wood\"]\n<strong>解释：</strong>\n- 将 \"word\" 中的 'r' 换成 'o' ，得到 dictionary 中的单词 \"wood\" 。\n- 将 \"note\" 中的 'n' 换成 'j' 且将 't' 换成 'k' ，得到 \"joke\" 。\n- \"ants\" 需要超过 2 次编辑才能得到 dictionary 中的单词。\n- \"wood\" 不需要修改（0 次编辑），就得到 dictionary 中相同的单词。\n所以我们返回 [\"word\",\"note\",\"wood\"] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>queries = [\"yes\"], dictionary = [\"not\"]\n<b>输出：</b>[]\n<strong>解释：</strong>\n\"yes\" 需要超过 2 次编辑才能得到 \"not\" 。\n所以我们返回空数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length, dictionary.length &lt;= 100</code></li>\n\t<li><code>n == queries[i].length == dictionary[j].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li>所有&nbsp;<code>queries[i]</code> 和&nbsp;<code>dictionary[j]</code>&nbsp;都只包含小写英文字母。</li>\n</ul>\n","translatedTitle":"距离字典两次编辑以内的单词","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<string> twoEditWords(vector<string>& queries, vector<string>& dictionary) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<String> twoEditWords(String[] queries, String[] dictionary) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def twoEditWords(self, queries, dictionary):\n        \"\"\"\n        :type queries: List[str]\n        :type dictionary: List[str]\n        :rtype: List[str]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def twoEditWords(self, queries: List[str], dictionary: List[str]) -> List[str]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** twoEditWords(char ** queries, int queriesSize, char ** dictionary, int dictionarySize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<string> TwoEditWords(string[] queries, string[] dictionary) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} queries\n * @param {string[]} dictionary\n * @return {string[]}\n */\nvar twoEditWords = function(queries, dictionary) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} queries\n# @param {String[]} dictionary\n# @return {String[]}\ndef two_edit_words(queries, dictionary)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func twoEditWords(_ queries: [String], _ dictionary: [String]) -> [String] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func twoEditWords(queries []string, dictionary []string) []string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def twoEditWords(queries: Array[String], dictionary: Array[String]): List[String] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun twoEditWords(queries: Array<String>, dictionary: Array<String>): List<String> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn two_edit_words(queries: Vec<String>, dictionary: Vec<String>) -> Vec<String> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $queries\n     * @param String[] $dictionary\n     * @return String[]\n     */\n    function twoEditWords($queries, $dictionary) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function twoEditWords(queries: string[], dictionary: string[]): string[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (two-edit-words queries dictionary)\n  (-> (listof string?) (listof string?) (listof string?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec two_edit_words(Queries :: [unicode:unicode_binary()], Dictionary :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\ntwo_edit_words(Queries, Dictionary) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec two_edit_words(queries :: [String.t], dictionary :: [String.t]) :: [String.t]\n  def two_edit_words(queries, dictionary) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  List<String> twoEditWords(List<String> queries, List<String> dictionary) {\n\n  }\n}"}]}