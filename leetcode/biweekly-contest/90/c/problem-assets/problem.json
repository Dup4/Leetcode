{"slug":"destroy-sequential-targets","id":2548,"frontendId":6226,"title":"Destroy Sequential Targets","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":1891,"totalSubmission":6987,"hints":["Keep track of nums[i] modulo k.","Iterate over nums in sorted order."],"sampleTestCase":"[3,7,8,1,1,5]\n2","exampleTestcases":"[3,7,8,1,1,5]\n2\n[1,3,5,2,4,6]\n2\n[6,2,5]\n100","content":"<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of positive integers, representing targets on a number line. You are also given an integer <code>space</code>.</p>\n\n<p>You have a machine which can destroy targets. <strong>Seeding</strong> the machine with some <code>nums[i]</code> allows it to destroy all targets with values that can be represented as <code>nums[i] + c * space</code>, where <code>c</code> is any non-negative integer. You want to destroy the <strong>maximum</strong> number of targets in <code>nums</code>.</p>\n\n<p>Return<em> the <strong>minimum value</strong> of </em><code>nums[i]</code><em> you can seed the machine with to destroy the maximum number of targets.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,7,8,1,1,5], space = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> If we seed the machine with nums[3], then we destroy all targets equal to 1,3,5,7,9,... \nIn this case, we would destroy 5 total targets (all except for nums[2]). \nIt is impossible to destroy more than 5 targets, so we return nums[3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,2,4,6], space = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Seeding the machine with nums[0], or nums[3] destroys 3 targets. \nIt is not possible to destroy more than 3 targets.\nSince nums[0] is the minimal integer that can destroy 3 targets, we return 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,2,5], space = 100\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums[1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= space &lt;=&nbsp;10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的数组&nbsp;<code>nums</code>&nbsp;，它包含若干正整数，表示数轴上你需要摧毁的目标所在的位置。同时给你一个整数&nbsp;<code>space</code>&nbsp;。</p>\n\n<p>你有一台机器可以摧毁目标。给机器 <strong>输入</strong>&nbsp;<code>nums[i]</code>&nbsp;，这台机器会摧毁所有位置在&nbsp;<code>nums[i] + c * space</code>&nbsp;的目标，其中&nbsp;<code>c</code>&nbsp;是任意非负整数。你想摧毁&nbsp;<code>nums</code>&nbsp;中 <strong>尽可能多</strong>&nbsp;的目标。</p>\n\n<p>请你返回在摧毁数目最多的前提下，<code>nums[i]</code>&nbsp;的 <strong>最小值</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [3,7,8,1,1,5], space = 2\n<b>输出：</b>1\n<b>解释：</b>如果我们输入 nums[3] ，我们可以摧毁位于 1,3,5,7,9,... 这些位置的目标。\n这种情况下， 我们总共可以摧毁 5 个目标（除了 nums[2]）。\n没有办法摧毁多于 5 个目标，所以我们返回 nums[3] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,3,5,2,4,6], space = 2\n<b>输出：</b>1\n<b>解释：</b>输入 nums[0] 或者 nums[3] 都会摧毁 3 个目标。\n没有办法摧毁多于 3 个目标。\n由于 nums[0] 是最小的可以摧毁 3 个目标的整数，所以我们返回 1 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [6,2,5], space = 100\n<b>输出：</b>2\n<b>解释：</b>无论我们输入哪个数字，都只能摧毁 1 个目标。输入的最小整数是 nums[1] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= space &lt;=&nbsp;10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"摧毁一系列目标","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int destroyTargets(vector<int>& nums, int space) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int destroyTargets(int[] nums, int space) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def destroyTargets(self, nums, space):\n        \"\"\"\n        :type nums: List[int]\n        :type space: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def destroyTargets(self, nums: List[int], space: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint destroyTargets(int* nums, int numsSize, int space){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int DestroyTargets(int[] nums, int space) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} space\n * @return {number}\n */\nvar destroyTargets = function(nums, space) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} space\n# @return {Integer}\ndef destroy_targets(nums, space)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func destroyTargets(_ nums: [Int], _ space: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func destroyTargets(nums []int, space int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def destroyTargets(nums: Array[Int], space: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun destroyTargets(nums: IntArray, space: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn destroy_targets(nums: Vec<i32>, space: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $space\n     * @return Integer\n     */\n    function destroyTargets($nums, $space) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function destroyTargets(nums: number[], space: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (destroy-targets nums space)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec destroy_targets(Nums :: [integer()], Space :: integer()) -> integer().\ndestroy_targets(Nums, Space) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec destroy_targets(nums :: [integer], space :: integer) :: integer\n  def destroy_targets(nums, space) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int destroyTargets(List<int> nums, int space) {\n\n  }\n}"}]}