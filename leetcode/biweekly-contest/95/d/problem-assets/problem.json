{"slug":"maximize-the-minimum-powered-city","id":2618,"frontendId":2528,"title":"Maximize the Minimum Powered City","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":5,"dislikes":0,"status":2,"tag":[],"totalAccepted":1217,"totalSubmission":3475,"hints":["Pre calculate the number of stations on each city using Line Sweep.","Use binary search to maximize the minimum."],"sampleTestCase":"[1,2,4,5,0]\n1\n2","exampleTestcases":"[1,2,4,5,0]\n1\n2\n[4,4,4,4]\n0\n3","content":"<p>You are given a <strong>0-indexed</strong> integer array <code>stations</code> of length <code>n</code>, where <code>stations[i]</code> represents the number of power stations in the <code>i<sup>th</sup></code> city.</p>\n\n<p>Each power station can provide power to every city in a fixed <strong>range</strong>. In other words, if the range is denoted by <code>r</code>, then a power station at city <code>i</code> can provide power to all cities <code>j</code> such that <code>|i - j| &lt;= r</code> and <code>0 &lt;= i, j &lt;= n - 1</code>.</p>\n\n<ul>\n\t<li>Note that <code>|x|</code> denotes <strong>absolute</strong> value. For example, <code>|7 - 5| = 2</code> and <code>|3 - 10| = 7</code>.</li>\n</ul>\n\n<p>The <strong>power</strong> of a city is the total number of power stations it is being provided power from.</p>\n\n<p>The government has sanctioned building <code>k</code> more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.</p>\n\n<p>Given the two integers <code>r</code> and <code>k</code>, return <em>the <strong>maximum possible minimum power</strong> of a city, if the additional power stations are built optimally.</em></p>\n\n<p><strong>Note</strong> that you can build the <code>k</code> power stations in multiple cities.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stations = [1,2,4,5,0], r = 1, k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nOne of the optimal ways is to install both the power stations at city 1. \nSo stations will become [1,4,4,5,0].\n- City 0 is provided by 1 + 4 = 5 power stations.\n- City 1 is provided by 1 + 4 + 4 = 9 power stations.\n- City 2 is provided by 4 + 4 + 5 = 13 power stations.\n- City 3 is provided by 5 + 4 = 9 power stations.\n- City 4 is provided by 5 + 0 = 5 power stations.\nSo the minimum power of a city is 5.\nSince it is not possible to obtain a larger power, we return 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stations = [4,4,4,4], r = 0, k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nIt can be proved that we cannot make the minimum power of a city greater than 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == stations.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= stations[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= r&nbsp;&lt;= n - 1</code></li>\n\t<li><code>0 &lt;= k&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>stations</code>&nbsp;，其中&nbsp;<code>stations[i]</code>&nbsp;表示第 <code>i</code>&nbsp;座城市的供电站数目。</p>\n\n<p>每个供电站可以在一定 <strong>范围</strong>&nbsp;内给所有城市提供电力。换句话说，如果给定的范围是&nbsp;<code>r</code>&nbsp;，在城市&nbsp;<code>i</code>&nbsp;处的供电站可以给所有满足&nbsp;<code>|i - j| &lt;= r</code> 且&nbsp;<code>0 &lt;= i, j &lt;= n - 1</code>&nbsp;的城市&nbsp;<code>j</code>&nbsp;供电。</p>\n\n<ul>\n\t<li><code>|x|</code>&nbsp;表示 <code>x</code>&nbsp;的 <strong>绝对值</strong>&nbsp;。比方说，<code>|7 - 5| = 2</code>&nbsp;，<code>|3 - 10| = 7</code>&nbsp;。</li>\n</ul>\n\n<p>一座城市的 <strong>电量</strong>&nbsp;是所有能给它供电的供电站数目。</p>\n\n<p>政府批准了可以额外建造 <code>k</code>&nbsp;座供电站，你需要决定这些供电站分别应该建在哪里，这些供电站与已经存在的供电站有相同的供电范围。</p>\n\n<p>给你两个整数&nbsp;<code>r</code> 和&nbsp;<code>k</code>&nbsp;，如果以最优策略建造额外的发电站，返回所有城市中，最小供电站数目的最大值是多少。</p>\n\n<p>这 <code>k</code>&nbsp;座供电站可以建在多个城市。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>stations = [1,2,4,5,0], r = 1, k = 2\n<b>输出：</b>5\n<b>解释：</b>\n最优方案之一是把 2 座供电站都建在城市 1 。\n每座城市的供电站数目分别为 [1,4,4,5,0] 。\n- 城市 0 的供电站数目为 1 + 4 = 5 。\n- 城市 1 的供电站数目为 1 + 4 + 4 = 9 。\n- 城市 2 的供电站数目为 4 + 4 + 5 = 13 。\n- 城市 3 的供电站数目为 5 + 4 = 9 。\n- 城市 4 的供电站数目为 5 + 0 = 5 。\n供电站数目最少是 5 。\n无法得到更优解，所以我们返回 5 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>stations = [4,4,4,4], r = 0, k = 3\n<b>输出：</b>4\n<b>解释：</b>\n无论如何安排，总有一座城市的供电站数目是 4 ，所以最优解是 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == stations.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= stations[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= r&nbsp;&lt;= n - 1</code></li>\n\t<li><code>0 &lt;= k&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"最大化城市的最小供电站数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long maxPower(vector<int>& stations, int r, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long maxPower(int[] stations, int r, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maxPower(self, stations, r, k):\n        \"\"\"\n        :type stations: List[int]\n        :type r: int\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maxPower(self, stations: List[int], r: int, k: int) -> int:"},{"lang":"C","langSlug":"c","code":"long long maxPower(int* stations, int stationsSize, int r, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long MaxPower(int[] stations, int r, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} stations\n * @param {number} r\n * @param {number} k\n * @return {number}\n */\nvar maxPower = function(stations, r, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} stations\n# @param {Integer} r\n# @param {Integer} k\n# @return {Integer}\ndef max_power(stations, r, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maxPower(_ stations: [Int], _ r: Int, _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maxPower(stations []int, r int, k int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maxPower(stations: Array[Int], r: Int, k: Int): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maxPower(stations: IntArray, r: Int, k: Int): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn max_power(stations: Vec<i32>, r: i32, k: i32) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $stations\n     * @param Integer $r\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPower($stations, $r, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maxPower(stations: number[], r: number, k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (max-power stations r k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec max_power(Stations :: [integer()], R :: integer(), K :: integer()) -> integer().\nmax_power(Stations, R, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec max_power(stations :: [integer], r :: integer, k :: integer) :: integer\n  def max_power(stations, r, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int maxPower(List<int> stations, int r, int k) {\n\n  }\n}"}]}