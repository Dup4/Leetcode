{"slug":"most-profitable-path-in-a-tree","id":2564,"frontendId":6240,"title":"Most Profitable Path in a Tree","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":807,"totalSubmission":2036,"hints":["Bob travels along a fixed path (from node “bob” to node 0).","Calculate Alice’s distance to each node via DFS.","We can calculate Alice’s score along a path ending at some node easily using Hints 1 and 2."],"sampleTestCase":"[[0,1],[1,2],[1,3],[3,4]]\n3\n[-2,4,2,-4,6]","exampleTestcases":"[[0,1],[1,2],[1,3],[3,4]]\n3\n[-2,4,2,-4,6]\n[[0,1]]\n1\n[-7280,2350]","content":"<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, rooted at node <code>0</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>At every node <code>i</code>, there is a gate. You are also given an array of even integers <code>amount</code>, where <code>amount[i]</code> represents:</p>\n\n<ul>\n\t<li>the price needed to open the gate at node <code>i</code>, if <code>amount[i]</code> is negative, or,</li>\n\t<li>the cash reward obtained on opening the gate at node <code>i</code>, otherwise.</li>\n</ul>\n\n<p>The game goes on as follows:</p>\n\n<ul>\n\t<li>Initially, Alice is at node <code>0</code> and Bob is at node <code>bob</code>.</li>\n\t<li>At every second, Alice and Bob <b>each</b> move to an adjacent node. Alice moves towards some <strong>leaf node</strong>, while Bob moves towards node <code>0</code>.</li>\n\t<li>For <strong>every</strong> node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:\n\t<ul>\n\t\t<li>If the gate is <strong>already open</strong>, no price will be required, nor will there be any cash reward.</li>\n\t\t<li>If Alice and Bob reach the node <strong>simultaneously</strong>, they share the price/reward for opening the gate there. In other words, if the price to open the gate is <code>c</code>, then both Alice and Bob pay&nbsp;<code>c / 2</code> each. Similarly, if the reward at the gate is <code>c</code>, both of them receive <code>c / 2</code> each.</li>\n\t</ul>\n\t</li>\n\t<li>If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node <code>0</code>, he stops moving. Note that these events are <strong>independent</strong> of each other.</li>\n</ul>\n\n<p>Return<em> the <strong>maximum</strong> net income Alice can have if she travels towards the optimal leaf node.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-29-eg1.png\" style=\"width: 275px; height: 275px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nThe above diagram represents the given tree. The game goes as follows:\n- Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.\n  Alice&#39;s net income is now -2.\n- Both Alice and Bob move to node 1. \n&nbsp; Since they reach here simultaneously, they open the gate together and share the reward.\n&nbsp; Alice&#39;s net income becomes -2 + (4 / 2) = 0.\n- Alice moves on to node 3. Since Bob already opened its gate, Alice&#39;s income remains unchanged.\n&nbsp; Bob moves on to node 0, and stops moving.\n- Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.\nNow, neither Alice nor Bob can make any further moves, and the game ends.\nIt is not possible for Alice to get a higher net income.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-29-eg2.png\" style=\"width: 250px; height: 78px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1]], bob = 1, amount = [-7280,2350]\n<strong>Output:</strong> -7280\n<strong>Explanation:</strong> \nAlice follows the path 0-&gt;1 whereas Bob follows the path 1-&gt;0.\nThus, Alice opens the gate at node 0 only. Hence, her net income is -7280. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>1 &lt;= bob &lt; n</code></li>\n\t<li><code>amount.length == n</code></li>\n\t<li><code>amount[i]</code> is an <strong>even</strong> integer in the range <code>[-10<sup>4</sup>, 10<sup>4</sup>]</code>.</li>\n</ul>\n","translatedContent":"<p>一个 <code>n</code>&nbsp;个节点的无向树，节点编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，树的根结点是&nbsp;<code>0</code>&nbsp;号节点。给你一个长度为 <code>n - 1</code>&nbsp;的二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;，表示节点&nbsp;<code>a<sub>i</sub></code> 和&nbsp;<code>b<sub>i</sub></code>&nbsp;在树中有一条边。</p>\n\n<p>在每一个节点&nbsp;<code>i</code>&nbsp;处有一扇门。同时给你一个都是偶数的数组&nbsp;<code>amount</code>&nbsp;，其中&nbsp;<code>amount[i]</code>&nbsp;表示：</p>\n\n<ul>\n\t<li>如果 <code>amount[i]</code>&nbsp;的值是负数，那么它表示打开节点&nbsp;<code>i</code>&nbsp;处门扣除的分数。</li>\n\t<li>如果 <code>amount[i]</code>&nbsp;的值是正数，那么它表示打开节点 <code>i</code>&nbsp;处门加上的分数。</li>\n</ul>\n\n<p>游戏按照如下规则进行：</p>\n\n<ul>\n\t<li>一开始，Alice 在节点&nbsp;<code>0</code>&nbsp;处，Bob 在节点&nbsp;<code>bob</code>&nbsp;处。</li>\n\t<li>每一秒钟，Alice 和 Bob <strong>分别</strong>&nbsp;移动到相邻的节点。Alice 朝着某个&nbsp;<strong>叶子结点</strong>&nbsp;移动，Bob 朝着节点&nbsp;<code>0</code>&nbsp;移动。</li>\n\t<li>对于他们之间路径上的 <strong>每一个</strong>&nbsp;节点，Alice 和 Bob 要么打开门并扣分，要么打开门并加分。注意：\n\t<ul>\n\t\t<li>如果门 <strong>已经打开</strong>&nbsp;（被另一个人打开），不会有额外加分也不会扣分。</li>\n\t\t<li>如果&nbsp;Alice 和 Bob <strong>同时</strong>&nbsp;到达一个节点，他们会共享这个节点的加分或者扣分。换言之，如果打开这扇门扣&nbsp;<code>c</code>&nbsp;分，那么&nbsp;Alice 和 Bob 分别扣&nbsp;<code>c / 2</code>&nbsp;分。如果这扇门的加分为&nbsp;<code>c</code>&nbsp;，那么他们分别加&nbsp;<code>c / 2</code>&nbsp;分。</li>\n\t</ul>\n\t</li>\n\t<li>如果 Alice 到达了一个叶子结点，她会停止移动。类似的，如果&nbsp;Bob 到达了节点&nbsp;<code>0</code>&nbsp;，他也会停止移动。注意这些事件互相 <strong>独立</strong>&nbsp;，不会影响另一方移动。</li>\n</ul>\n\n<p>请你返回&nbsp;Alice 朝最优叶子结点移动的 <strong>最大</strong>&nbsp;净得分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-29-eg1.png\" style=\"width: 275px; height: 275px;\"></p>\n\n<pre><b>输入：</b>edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]\n<b>输出：</b>6\n<b>解释：</b>\n上图展示了输入给出的一棵树。游戏进行如下：\n- Alice 一开始在节点 0 处，Bob 在节点 3 处。他们分别打开所在节点的门。\n  Alice 得分为 -2 。\n- Alice 和 Bob 都移动到节点 1 。\n&nbsp; 因为他们同时到达这个节点，他们一起打开门并平分得分。\n&nbsp; Alice 的得分变为 -2 + (4 / 2) = 0 。\n- Alice 移动到节点 3 。因为 Bob 已经打开了这扇门，Alice 得分不变。\n&nbsp; Bob 移动到节点 0 ，并停止移动。\n- Alice 移动到节点 4 并打开这个节点的门，她得分变为 0 + 6 = 6 。\n现在，Alice 和 Bob 都不能进行任何移动了，所以游戏结束。\nAlice 无法得到更高分数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-29-eg2.png\" style=\"width: 250px; height: 78px;\"></p>\n\n<pre><b>输入：</b>edges = [[0,1]], bob = 1, amount = [-7280,2350]\n<b>输出：</b>-7280\n<b>解释：</b>\nAlice 按照路径 0-&gt;1 移动，同时 Bob 按照路径 1-&gt;0 移动。\n所以 Alice 只打开节点 0 处的门，她的得分为 -7280 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code>&nbsp;表示一棵有效的树。</li>\n\t<li><code>1 &lt;= bob &lt; n</code></li>\n\t<li><code>amount.length == n</code></li>\n\t<li><code>amount[i]</code>&nbsp;是范围&nbsp;<code>[-10<sup>4</sup>, 10<sup>4</sup>]</code>&nbsp;之间的一个&nbsp;<strong>偶数</strong>&nbsp;。</li>\n</ul>\n","translatedTitle":"树上最大得分和路径","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def mostProfitablePath(self, edges, bob, amount):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type bob: int\n        :type amount: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"int mostProfitablePath(int** edges, int edgesSize, int* edgesColSize, int bob, int* amount, int amountSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MostProfitablePath(int[][] edges, int bob, int[] amount) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} edges\n * @param {number} bob\n * @param {number[]} amount\n * @return {number}\n */\nvar mostProfitablePath = function(edges, bob, amount) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} edges\n# @param {Integer} bob\n# @param {Integer[]} amount\n# @return {Integer}\ndef most_profitable_path(edges, bob, amount)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func mostProfitablePath(_ edges: [[Int]], _ bob: Int, _ amount: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func mostProfitablePath(edges [][]int, bob int, amount []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def mostProfitablePath(edges: Array[Array[Int]], bob: Int, amount: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun mostProfitablePath(edges: Array<IntArray>, bob: Int, amount: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn most_profitable_path(edges: Vec<Vec<i32>>, bob: i32, amount: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer $bob\n     * @param Integer[] $amount\n     * @return Integer\n     */\n    function mostProfitablePath($edges, $bob, $amount) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function mostProfitablePath(edges: number[][], bob: number, amount: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (most-profitable-path edges bob amount)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec most_profitable_path(Edges :: [[integer()]], Bob :: integer(), Amount :: [integer()]) -> integer().\nmost_profitable_path(Edges, Bob, Amount) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec most_profitable_path(edges :: [[integer]], bob :: integer, amount :: [integer]) :: integer\n  def most_profitable_path(edges, bob, amount) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int mostProfitablePath(List<List<int>> edges, int bob, List<int> amount) {\n\n  }\n}"}]}