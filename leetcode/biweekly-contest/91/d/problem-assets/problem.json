{"slug":"split-message-based-on-limit","id":2563,"frontendId":6239,"title":"Split Message Based on Limit","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":707,"totalSubmission":1890,"hints":["Could you solve the problem if you knew how many digits the total number of parts has?","Try all possible lengths of the total number of parts, and see if the string can be split such that the total number of parts has that length.","Binary search can be used for each part length to find the precise number of parts needed."],"sampleTestCase":"\"this is really a very awesome message\"\n9","exampleTestcases":"\"this is really a very awesome message\"\n9\n\"short message\"\n15","content":"<p>You are given a string, <code>message</code>, and a positive integer, <code>limit</code>.</p>\n\n<p>You must <strong>split</strong> <code>message</code> into one or more <strong>parts</strong> based on <code>limit</code>. Each resulting part should have the suffix <code>&quot;&lt;a/b&gt;&quot;</code>, where <code>&quot;b&quot;</code> is to be <strong>replaced</strong> with the total number of parts and <code>&quot;a&quot;</code> is to be <strong>replaced</strong> with the index of the part, starting from <code>1</code> and going up to <code>b</code>. Additionally, the length of each resulting part (including its suffix) should be <strong>equal</strong> to <code>limit</code>, except for the last part whose length can be <strong>at most</strong> <code>limit</code>.</p>\n\n<p>The resulting parts should be formed such that when their suffixes are removed and they are all concatenated <strong>in order</strong>, they should be equal to <code>message</code>. Also, the result should contain as few parts as possible.</p>\n\n<p>Return<em> the parts </em><code>message</code><em> would be split into as an array of strings</em>. If it is impossible to split <code>message</code> as required, return<em> an empty array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> message = &quot;this is really a very awesome message&quot;, limit = 9\n<strong>Output:</strong> [&quot;thi&lt;1/14&gt;&quot;,&quot;s i&lt;2/14&gt;&quot;,&quot;s r&lt;3/14&gt;&quot;,&quot;eal&lt;4/14&gt;&quot;,&quot;ly &lt;5/14&gt;&quot;,&quot;a v&lt;6/14&gt;&quot;,&quot;ery&lt;7/14&gt;&quot;,&quot; aw&lt;8/14&gt;&quot;,&quot;eso&lt;9/14&gt;&quot;,&quot;me&lt;10/14&gt;&quot;,&quot; m&lt;11/14&gt;&quot;,&quot;es&lt;12/14&gt;&quot;,&quot;sa&lt;13/14&gt;&quot;,&quot;ge&lt;14/14&gt;&quot;]\n<strong>Explanation:</strong>\nThe first 9 parts take 3 characters each from the beginning of message.\nThe next 5 parts take 2 characters each to finish splitting message. \nIn this example, each part, including the last, has length 9. \nIt can be shown it is not possible to split message into less than 14 parts.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> message = &quot;short message&quot;, limit = 15\n<strong>Output:</strong> [&quot;short mess&lt;1/2&gt;&quot;,&quot;age&lt;2/2&gt;&quot;]\n<strong>Explanation:</strong>\nUnder the given constraints, the string can be split into two parts: \n- The first part comprises of the first 10 characters, and has a length 15.\n- The next part comprises of the last 3 characters, and has a length 8.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= message.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>message</code> consists only of lowercase English letters and <code>&#39; &#39;</code>.</li>\n\t<li><code>1 &lt;= limit &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个字符串&nbsp;<code>message</code>&nbsp;和一个正整数&nbsp;<code>limit</code>&nbsp;。</p>\n\n<p>你需要根据 <code>limit</code>&nbsp;将&nbsp;<code>message</code> <strong>分割</strong>&nbsp;成一个或多个 <strong>部分</strong>&nbsp;。每个部分的结尾都是&nbsp;<code>\"&lt;a/b&gt;\"</code>&nbsp;，其中&nbsp;<code>\"b\"</code>&nbsp;用分割出来的总数 <b>替换</b>，&nbsp;<code>\"a\"</code>&nbsp;用当前部分所在的编号 <strong>替换</strong>&nbsp;，编号从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>b</code>&nbsp;依次编号。除此以外，除了最后一部分长度 <strong>小于等于</strong>&nbsp;<code>limit</code>&nbsp;以外，其他每一部分（包括结尾部分）的长度都应该&nbsp;<strong>等于</strong>&nbsp;<code>limit</code>&nbsp;。</p>\n\n<p>你需要确保分割后的结果数组，删掉每部分的结尾并<strong>&nbsp;按顺序&nbsp;</strong>连起来后，能够得到&nbsp;<code>message</code>&nbsp;。同时，结果数组越短越好。</p>\n\n<p>请你返回<em>&nbsp;</em><code>message</code>&nbsp; 分割后得到的结果数组。如果无法按要求分割&nbsp;<code>message</code>&nbsp;，返回一个空数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>message = \"this is really a very awesome message\", limit = 9\n<b>输出：</b>[\"thi&lt;1/14&gt;\",\"s i&lt;2/14&gt;\",\"s r&lt;3/14&gt;\",\"eal&lt;4/14&gt;\",\"ly &lt;5/14&gt;\",\"a v&lt;6/14&gt;\",\"ery&lt;7/14&gt;\",\" aw&lt;8/14&gt;\",\"eso&lt;9/14&gt;\",\"me&lt;10/14&gt;\",\" m&lt;11/14&gt;\",\"es&lt;12/14&gt;\",\"sa&lt;13/14&gt;\",\"ge&lt;14/14&gt;\"]\n<strong>解释：</strong>\n前面 9 个部分分别从 message 中得到 3 个字符。\n接下来的 5 个部分分别从 message 中得到 2 个字符。\n这个例子中，包含最后一个部分在内，每个部分的长度都为 9 。\n可以证明没有办法分割成少于 14 个部分。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>message = \"short message\", limit = 15\n<b>输出：</b>[\"short mess&lt;1/2&gt;\",\"age&lt;2/2&gt;\"]\n<strong>解释：</strong>\n在给定限制下，字符串可以分成两个部分：\n- 第一个部分包含 10 个字符，长度为 15 。\n- 第二个部分包含 3 个字符，长度为 8 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= message.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>message</code>&nbsp;只包含小写英文字母和&nbsp;<code>' '</code>&nbsp;。</li>\n\t<li><code>1 &lt;= limit &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedTitle":"根据限制分割消息","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<string> splitMessage(string message, int limit) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String[] splitMessage(String message, int limit) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def splitMessage(self, message, limit):\n        \"\"\"\n        :type message: str\n        :type limit: int\n        :rtype: List[str]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def splitMessage(self, message: str, limit: int) -> List[str]:"},{"lang":"C","langSlug":"c","code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** splitMessage(char * message, int limit, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string[] SplitMessage(string message, int limit) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} message\n * @param {number} limit\n * @return {string[]}\n */\nvar splitMessage = function(message, limit) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} message\n# @param {Integer} limit\n# @return {String[]}\ndef split_message(message, limit)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func splitMessage(_ message: String, _ limit: Int) -> [String] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func splitMessage(message string, limit int) []string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def splitMessage(message: String, limit: Int): Array[String] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun splitMessage(message: String, limit: Int): Array<String> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn split_message(message: String, limit: i32) -> Vec<String> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $message\n     * @param Integer $limit\n     * @return String[]\n     */\n    function splitMessage($message, $limit) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function splitMessage(message: string, limit: number): string[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (split-message message limit)\n  (-> string? exact-integer? (listof string?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec split_message(Message :: unicode:unicode_binary(), Limit :: integer()) -> [unicode:unicode_binary()].\nsplit_message(Message, Limit) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec split_message(message :: String.t, limit :: integer) :: [String.t]\n  def split_message(message, limit) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  List<String> splitMessage(String message, int limit) {\n\n  }\n}"}]}