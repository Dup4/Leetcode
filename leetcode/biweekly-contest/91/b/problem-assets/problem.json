{"slug":"count-ways-to-build-good-strings","id":2562,"frontendId":6238,"title":"Count Ways To Build Good Strings","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":1786,"totalSubmission":4906,"hints":["Calculate the number of good strings with length less or equal to some constant x.","Apply dynamic programming using the group size of consecutive zeros and ones."],"sampleTestCase":"3\n3\n1\n1","exampleTestcases":"3\n3\n1\n1\n2\n3\n1\n2","content":"<p>Given the integers <code>zero</code>, <code>one</code>, <code>low</code>, and <code>high</code>, we can construct a string by starting with an empty string, and then at each step perform either of the following:</p>\n\n<ul>\n\t<li>Append the character <code>&#39;0&#39;</code> <code>zero</code> times.</li>\n\t<li>Append the character <code>&#39;1&#39;</code> <code>one</code> times.</li>\n</ul>\n\n<p>This can be performed any number of times.</p>\n\n<p>A <strong>good</strong> string is a string constructed by the above process having a <strong>length</strong> between <code>low</code> and <code>high</code> (<strong>inclusive</strong>).</p>\n\n<p>Return <em>the number of <strong>different</strong> good strings that can be constructed satisfying these properties.</em> Since the answer can be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 3, high = 3, zero = 1, one = 1\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nOne possible valid good string is &quot;011&quot;. \nIt can be constructed as follows: &quot;&quot; -&gt; &quot;0&quot; -&gt; &quot;01&quot; -&gt; &quot;011&quot;. \nAll binary strings from &quot;000&quot; to &quot;111&quot; are good strings in this example.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 2, high = 3, zero = 1, one = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The good strings are &quot;00&quot;, &quot;11&quot;, &quot;000&quot;, &quot;110&quot;, and &quot;011&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= low&nbsp;&lt;= high&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= zero, one &lt;= low</code></li>\n</ul>\n","translatedContent":"<p>给你整数&nbsp;<code>zero</code>&nbsp;，<code>one</code>&nbsp;，<code>low</code>&nbsp;和&nbsp;<code>high</code>&nbsp;，我们从空字符串开始构造一个字符串，每一步执行下面操作中的一种：</p>\n\n<ul>\n\t<li>将&nbsp;<code>'0'</code>&nbsp;在字符串末尾添加&nbsp;<code>zero</code>&nbsp; 次。</li>\n\t<li>将&nbsp;<code>'1'</code>&nbsp;在字符串末尾添加&nbsp;<code>one</code>&nbsp;次。</li>\n</ul>\n\n<p>以上操作可以执行任意次。</p>\n\n<p>如果通过以上过程得到一个 <strong>长度</strong>&nbsp;在&nbsp;<code>low</code> 和&nbsp;<code>high</code>&nbsp;之间（包含上下边界）的字符串，那么这个字符串我们称为&nbsp;<strong>好</strong>&nbsp;字符串。</p>\n\n<p>请你返回满足以上要求的 <strong>不同</strong>&nbsp;好字符串数目。由于答案可能很大，请将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>low = 3, high = 3, zero = 1, one = 1\n<b>输出：</b>8\n<b>解释：</b>\n一个可能的好字符串是 \"011\" 。\n可以这样构造得到：\"\" -&gt; \"0\" -&gt; \"01\" -&gt; \"011\" 。\n从 \"000\" 到 \"111\" 之间所有的二进制字符串都是好字符串。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>low = 2, high = 3, zero = 1, one = 2\n<b>输出：</b>5\n<b>解释：</b>好字符串为 \"00\" ，\"11\" ，\"000\" ，\"110\" 和 \"011\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= low&nbsp;&lt;= high&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= zero, one &lt;= low</code></li>\n</ul>\n","translatedTitle":"统计构造好字符串的方案数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int countGoodStrings(int low, int high, int zero, int one) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int countGoodStrings(int low, int high, int zero, int one) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countGoodStrings(self, low, high, zero, one):\n        \"\"\"\n        :type low: int\n        :type high: int\n        :type zero: int\n        :type one: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:"},{"lang":"C","langSlug":"c","code":"int countGoodStrings(int low, int high, int zero, int one){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int CountGoodStrings(int low, int high, int zero, int one) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} low\n * @param {number} high\n * @param {number} zero\n * @param {number} one\n * @return {number}\n */\nvar countGoodStrings = function(low, high, zero, one) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} low\n# @param {Integer} high\n# @param {Integer} zero\n# @param {Integer} one\n# @return {Integer}\ndef count_good_strings(low, high, zero, one)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countGoodStrings(_ low: Int, _ high: Int, _ zero: Int, _ one: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countGoodStrings(low int, high int, zero int, one int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countGoodStrings(low: Int, high: Int, zero: Int, one: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countGoodStrings(low: Int, high: Int, zero: Int, one: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_good_strings(low: i32, high: i32, zero: i32, one: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $low\n     * @param Integer $high\n     * @param Integer $zero\n     * @param Integer $one\n     * @return Integer\n     */\n    function countGoodStrings($low, $high, $zero, $one) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countGoodStrings(low: number, high: number, zero: number, one: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-good-strings low high zero one)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_good_strings(Low :: integer(), High :: integer(), Zero :: integer(), One :: integer()) -> integer().\ncount_good_strings(Low, High, Zero, One) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_good_strings(low :: integer, high :: integer, zero :: integer, one :: integer) :: integer\n  def count_good_strings(low, high, zero, one) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int countGoodStrings(int low, int high, int zero, int one) {\n\n  }\n}"}]}