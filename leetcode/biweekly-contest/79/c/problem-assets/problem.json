{"slug":"maximum-total-importance-of-roads","id":2379,"frontendId":6085,"title":"Maximum Total Importance of Roads","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2851,"totalSubmission":5210,"hints":["Consider what each city contributes to the total importance of all roads.","Based on that, how can you sort the cities such that assigning them values in that order will yield the maximum total importance?"],"sampleTestCase":"5\n[[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]","exampleTestcases":"5\n[[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\n5\n[[0,3],[2,4],[1,3]]","content":"<p>You are given an integer <code>n</code> denoting the number of cities in a country. The cities are numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are also given a 2D integer array <code>roads</code> where <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists a <strong>bidirectional</strong> road connecting cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>You need to assign each city with an integer value from <code>1</code> to <code>n</code>, where each value can only be used <strong>once</strong>. The <strong>importance</strong> of a road is then defined as the <strong>sum</strong> of the values of the two cities it connects.</p>\n\n<p>Return <em>the <strong>maximum total importance</strong> of all roads possible after assigning the values optimally.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-07-ex1drawio.png\" style=\"width: 290px; height: 215px;\" />\n<pre>\n<strong>Input:</strong> n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\n<strong>Output:</strong> 43\n<strong>Explanation:</strong> The figure above shows the country and the assigned values of [2,4,5,3,1].\n- The road (0,1) has an importance of 2 + 4 = 6.\n- The road (1,2) has an importance of 4 + 5 = 9.\n- The road (2,3) has an importance of 5 + 3 = 8.\n- The road (0,2) has an importance of 2 + 5 = 7.\n- The road (1,3) has an importance of 4 + 3 = 7.\n- The road (2,4) has an importance of 5 + 1 = 6.\nThe total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.\nIt can be shown that we cannot obtain a greater total importance than 43.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-07-ex2drawio.png\" style=\"width: 281px; height: 151px;\" />\n<pre>\n<strong>Input:</strong> n = 5, roads = [[0,3],[2,4],[1,3]]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> The figure above shows the country and the assigned values of [4,3,2,5,1].\n- The road (0,3) has an importance of 4 + 5 = 9.\n- The road (2,4) has an importance of 2 + 1 = 3.\n- The road (1,3) has an importance of 3 + 5 = 8.\nThe total importance of all roads is 9 + 3 + 8 = 20.\nIt can be shown that we cannot obtain a greater total importance than 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= roads.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>roads[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no duplicate roads.</li>\n</ul>\n","translatedContent":"<p>给你一个整数&nbsp;<code>n</code>&nbsp;，表示一个国家里的城市数目。城市编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。</p>\n\n<p>给你一个二维整数数组&nbsp;<code>roads</code>&nbsp;，其中&nbsp;<code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示城市&nbsp;<code>a<sub>i</sub></code>&nbsp;和&nbsp;<code>b<sub>i</sub></code>&nbsp;之间有一条&nbsp;<strong>双向</strong>&nbsp;道路。</p>\n\n<p>你需要给每个城市安排一个从 <code>1</code>&nbsp;到 <code>n</code>&nbsp;之间的整数值，且每个值只能被使用 <strong>一次</strong>&nbsp;。道路的 <strong>重要性</strong>&nbsp;定义为这条道路连接的两座城市数值 <strong>之和</strong>&nbsp;。</p>\n\n<p>请你返回在最优安排下，<strong>所有道路重要性</strong> 之和 <strong>最大</strong>&nbsp;为多少。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-07-ex1drawio.png\" style=\"width: 290px; height: 215px;\"></p>\n\n<pre><b>输入：</b>n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\n<b>输出：</b>43\n<b>解释：</b>上图展示了国家图和每个城市被安排的值 [2,4,5,3,1] 。\n- 道路 (0,1) 重要性为 2 + 4 = 6 。\n- 道路 (1,2) 重要性为 4 + 5 = 9 。\n- 道路 (2,3) 重要性为 5 + 3 = 8 。\n- 道路 (0,2) 重要性为 2 + 5 = 7 。\n- 道路 (1,3) 重要性为 4 + 3 = 7 。\n- 道路 (2,4) 重要性为 5 + 1 = 6 。\n所有道路重要性之和为 6 + 9 + 8 + 7 + 7 + 6 = 43 。\n可以证明，重要性之和不可能超过 43 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-07-ex2drawio.png\" style=\"width: 281px; height: 151px;\"></p>\n\n<pre><b>输入：</b>n = 5, roads = [[0,3],[2,4],[1,3]]\n<b>输出：</b>20\n<b>解释：</b>上图展示了国家图和每个城市被安排的值 [4,3,2,5,1] 。\n- 道路 (0,3) 重要性为 4 + 5 = 9 。\n- 道路 (2,4) 重要性为 2 + 1 = 3 。\n- 道路 (1,3) 重要性为 3 + 5 = 8 。\n所有道路重要性之和为 9 + 3 + 8 = 20 。\n可以证明，重要性之和不可能超过 20 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= roads.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>roads[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>没有重复道路。</li>\n</ul>\n","translatedTitle":"道路的最大总重要性","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long maximumImportance(int n, vector<vector<int>>& roads) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long maximumImportance(int n, int[][] roads) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumImportance(self, n, roads):\n        \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long maximumImportance(int n, int** roads, int roadsSize, int* roadsColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long MaximumImportance(int n, int[][] roads) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @param {number[][]} roads\n * @return {number}\n */\nvar maximumImportance = function(n, roads) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @param {Integer[][]} roads\n# @return {Integer}\ndef maximum_importance(n, roads)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumImportance(_ n: Int, _ roads: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumImportance(n int, roads [][]int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumImportance(n: Int, roads: Array[Array[Int]]): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumImportance(n: Int, roads: Array<IntArray>): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_importance(n: i32, roads: Vec<Vec<i32>>) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $roads\n     * @return Integer\n     */\n    function maximumImportance($n, $roads) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumImportance(n: number, roads: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-importance n roads)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_importance(N :: integer(), Roads :: [[integer()]]) -> integer().\nmaximum_importance(N, Roads) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_importance(n :: integer, roads :: [[integer]]) :: integer\n  def maximum_importance(n, roads) do\n\n  end\nend"}]}