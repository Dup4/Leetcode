{"slug":"sender-with-largest-word-count","id":2378,"frontendId":6084,"title":"Sender With Largest Word Count","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3190,"totalSubmission":5690,"hints":["The number of words in a message is equal to the number of spaces + 1.","Use a hash map to count the total number of words from each sender."],"sampleTestCase":"[\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"]\n[\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]","exampleTestcases":"[\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"]\n[\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]\n[\"How is leetcode for everyone\",\"Leetcode is useful for practice\"]\n[\"Bob\",\"Charlie\"]","content":"<p>You have a chat log of <code>n</code> messages. You are given two string arrays <code>messages</code> and <code>senders</code> where <code>messages[i]</code> is a <strong>message</strong> sent by <code>senders[i]</code>.</p>\n\n<p>A <strong>message</strong> is list of <strong>words</strong> that are separated by a single space with no leading or trailing spaces. The <strong>word count</strong> of a sender is the total number of <strong>words</strong> sent by the sender. Note that a sender may send more than one message.</p>\n\n<p>Return <em>the sender with the <strong>largest</strong> word count</em>. If there is more than one sender with the largest word count, return <em>the one with the <strong>lexicographically largest</strong> name</em>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Uppercase letters come before lowercase letters in lexicographical order.</li>\n\t<li><code>&quot;Alice&quot;</code> and <code>&quot;alice&quot;</code> are distinct.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> messages = [&quot;Hello userTwooo&quot;,&quot;Hi userThree&quot;,&quot;Wonderful day Alice&quot;,&quot;Nice day userThree&quot;], senders = [&quot;Alice&quot;,&quot;userTwo&quot;,&quot;userThree&quot;,&quot;Alice&quot;]\n<strong>Output:</strong> &quot;Alice&quot;\n<strong>Explanation:</strong> Alice sends a total of 2 + 3 = 5 words.\nuserTwo sends a total of 2 words.\nuserThree sends a total of 3 words.\nSince Alice has the largest word count, we return &quot;Alice&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> messages = [&quot;How is leetcode for everyone&quot;,&quot;Leetcode is useful for practice&quot;], senders = [&quot;Bob&quot;,&quot;Charlie&quot;]\n<strong>Output:</strong> &quot;Charlie&quot;\n<strong>Explanation:</strong> Bob sends a total of 5 words.\nCharlie sends a total of 5 words.\nSince there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == messages.length == senders.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= messages[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= senders[i].length &lt;= 10</code></li>\n\t<li><code>messages[i]</code> consists of uppercase and lowercase English letters and <code>&#39; &#39;</code>.</li>\n\t<li>All the words in <code>messages[i]</code> are separated by <strong>a single space</strong>.</li>\n\t<li><code>messages[i]</code> does not have leading or trailing spaces.</li>\n\t<li><code>senders[i]</code> consists of uppercase and lowercase English letters only.</li>\n</ul>\n","translatedContent":"<p>给你一个聊天记录，共包含 <code>n</code>&nbsp;条信息。给你两个字符串数组&nbsp;<code>messages</code> 和&nbsp;<code>senders</code>&nbsp;，其中&nbsp;<code>messages[i]</code>&nbsp;是&nbsp;<code>senders[i]</code>&nbsp;发出的一条&nbsp;<strong>信息</strong>&nbsp;。</p>\n\n<p>一条 <strong>信息</strong>&nbsp;是若干用单个空格连接的 <strong>单词</strong>&nbsp;，信息开头和结尾不会有多余空格。发件人的 <strong>单词计数</strong>&nbsp;是这个发件人总共发出的 <strong>单词数</strong>&nbsp;。注意，一个发件人可能会发出多于一条信息。</p>\n\n<p>请你返回发出单词数 <strong>最多</strong>&nbsp;的发件人名字。如果有多个发件人发出最多单词数，请你返回 <strong>字典序</strong>&nbsp;最大的名字。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>字典序里，大写字母小于小写字母。</li>\n\t<li><code>\"Alice\"</code> 和&nbsp;<code>\"alice\"</code>&nbsp;是不同的名字。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>messages = [\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"], senders = [\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]\n<b>输出：</b>\"Alice\"\n<b>解释：</b>Alice 总共发出了 2 + 3 = 5 个单词。\nuserTwo 发出了 2 个单词。\nuserThree 发出了 3 个单词。\n由于 Alice 发出单词数最多，所以我们返回 \"Alice\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>messages = [\"How is leetcode for everyone\",\"Leetcode is useful for practice\"], senders = [\"Bob\",\"Charlie\"]\n<b>输出：</b>\"Charlie\"\n<b>解释：</b>Bob 总共发出了 5 个单词。\nCharlie 总共发出了 5 个单词。\n由于最多单词数打平，返回字典序最大的名字，也就是 Charlie 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == messages.length == senders.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= messages[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= senders[i].length &lt;= 10</code></li>\n\t<li><code>messages[i]</code>&nbsp;包含大写字母、小写字母和&nbsp;<code>' '</code>&nbsp;。</li>\n\t<li><code>messages[i]</code>&nbsp;中所有单词都由 <strong>单个空格</strong>&nbsp;隔开。</li>\n\t<li><code>messages[i]</code>&nbsp;不包含前导和后缀空格。</li>\n\t<li><code>senders[i]</code>&nbsp;只包含大写英文字母和小写英文字母。</li>\n</ul>\n","translatedTitle":"最多单词数的发件人","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string largestWordCount(vector<string>& messages, vector<string>& senders) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String largestWordCount(String[] messages, String[] senders) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def largestWordCount(self, messages, senders):\n        \"\"\"\n        :type messages: List[str]\n        :type senders: List[str]\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def largestWordCount(self, messages: List[str], senders: List[str]) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * largestWordCount(char ** messages, int messagesSize, char ** senders, int sendersSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string LargestWordCount(string[] messages, string[] senders) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} messages\n * @param {string[]} senders\n * @return {string}\n */\nvar largestWordCount = function(messages, senders) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} messages\n# @param {String[]} senders\n# @return {String}\ndef largest_word_count(messages, senders)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func largestWordCount(_ messages: [String], _ senders: [String]) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func largestWordCount(messages []string, senders []string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def largestWordCount(messages: Array[String], senders: Array[String]): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun largestWordCount(messages: Array<String>, senders: Array<String>): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn largest_word_count(messages: Vec<String>, senders: Vec<String>) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $messages\n     * @param String[] $senders\n     * @return String\n     */\n    function largestWordCount($messages, $senders) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function largestWordCount(messages: string[], senders: string[]): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (largest-word-count messages senders)\n  (-> (listof string?) (listof string?) string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec largest_word_count(Messages :: [unicode:unicode_binary()], Senders :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlargest_word_count(Messages, Senders) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec largest_word_count(messages :: [String.t], senders :: [String.t]) :: String.t\n  def largest_word_count(messages, senders) do\n\n  end\nend"}]}