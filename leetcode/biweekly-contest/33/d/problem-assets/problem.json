{"slug":"detect-cycles-in-2d-grid","id":1663,"title":"Detect Cycles in 2D Grid","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":37,"dislikes":0,"status":2,"tag":[{"name":"Depth-First Search","slug":"depth-first-search","translatedName":"深度优先搜索"},{"name":"Breadth-First Search","slug":"breadth-first-search","translatedName":"广度优先搜索"},{"name":"Union Find","slug":"union-find","translatedName":"并查集"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Matrix","slug":"matrix","translatedName":"矩阵"}],"totalAccepted":4353,"totalSubmission":11548,"hints":["Keep track of the parent (previous position) to avoid considering an invalid path.","Use DFS or BFS and keep track of visited cells to see if there is a cycle."],"sampleTestCase":"[[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]","exampleTestcases":"[[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\n[[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\n[[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]","content":"<p>Given a 2D array of characters <code>grid</code> of size <code>m x n</code>, you need to find if there exists any cycle consisting of the <strong>same value</strong> in <code>grid</code>.</p>\n\n<p>A cycle is a path of <strong>length 4 or more</strong> in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the <strong>same value</strong> of the current cell.</p>\n\n<p>Also, you cannot move to the cell that you visited in your last move. For example, the cycle <code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code> is invalid because from <code>(1, 2)</code> we visited <code>(1, 1)</code> which was the last visited cell.</p>\n\n<p>Return <code>true</code> if any cycle of the same value exists in <code>grid</code>, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2020-07-15-1.png\" style=\"width: 231px; height: 152px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>There are two valid cycles shown in different colors in the image below:\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2020-07-15-11.png\" style=\"width: 225px; height: 163px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2020-07-15-22.png\" style=\"width: 236px; height: 154px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;c&quot;,&quot;c&quot;,&quot;c&quot;,&quot;a&quot;],[&quot;c&quot;,&quot;d&quot;,&quot;c&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;c&quot;,&quot;e&quot;,&quot;c&quot;],[&quot;f&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>There is only one valid cycle highlighted in the image below:\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2020-07-15-2.png\" style=\"width: 229px; height: 157px;\" />\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2020-07-15-3.png\" style=\"width: 183px; height: 120px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;z&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;b&quot;,&quot;a&quot;]]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>grid</code> consists only of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你一个二维字符网格数组&nbsp;<code>grid</code>&nbsp;，大小为&nbsp;<code>m x n</code>&nbsp;，你需要检查&nbsp;<code>grid</code>&nbsp;中是否存在 <strong>相同值</strong> 形成的环。</p>\n\n<p>一个环是一条开始和结束于同一个格子的长度 <strong>大于等于 4</strong>&nbsp;的路径。对于一个给定的格子，你可以移动到它上、下、左、右四个方向相邻的格子之一，可以移动的前提是这两个格子有 <strong>相同的值&nbsp;</strong>。</p>\n\n<p>同时，你也不能回到上一次移动时所在的格子。比方说，环&nbsp;&nbsp;<code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code>&nbsp;是不合法的，因为从 <code>(1, 2)</code>&nbsp;移动到 <code>(1, 1)</code> 回到了上一次移动时的格子。</p>\n\n<p>如果 <code>grid</code>&nbsp;中有相同值形成的环，请你返回 <code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-08-22-5482e1.png\" style=\"height: 152px; width: 231px;\"></strong></p>\n\n<pre><strong>输入：</strong>grid = [[&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]]\n<strong>输出：</strong>true\n<strong>解释：</strong>如下图所示，有 2 个用不同颜色标出来的环：\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-08-22-5482e11.png\" style=\"height: 163px; width: 225px;\">\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-08-22-5482e2.png\" style=\"height: 154px; width: 236px;\"></strong></p>\n\n<pre><strong>输入：</strong>grid = [[&quot;c&quot;,&quot;c&quot;,&quot;c&quot;,&quot;a&quot;],[&quot;c&quot;,&quot;d&quot;,&quot;c&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;c&quot;,&quot;e&quot;,&quot;c&quot;],[&quot;f&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]]\n<strong>输出：</strong>true\n<strong>解释：</strong>如下图所示，只有高亮所示的一个合法环：\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-08-22-5482e22.png\" style=\"height: 157px; width: 229px;\">\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-08-22-5482e3.png\" style=\"height: 120px; width: 183px;\"></strong></p>\n\n<pre><strong>输入：</strong>grid = [[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;z&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;b&quot;,&quot;a&quot;]]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m &lt;= 500</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>grid</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n","translatedTitle":"二维网格图中探测环","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool containsCycle(vector<vector<char>>& grid) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean containsCycle(char[][] grid) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def containsCycle(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool containsCycle(char** grid, int gridSize, int* gridColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool ContainsCycle(char[][] grid) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {character[][]} grid\n * @return {boolean}\n */\nvar containsCycle = function(grid) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Character[][]} grid\n# @return {Boolean}\ndef contains_cycle(grid)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func containsCycle(_ grid: [[Character]]) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func containsCycle(grid [][]byte) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def containsCycle(grid: Array[Array[Char]]): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun containsCycle(grid: Array<CharArray>): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn contains_cycle(grid: Vec<Vec<char>>) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Boolean\n     */\n    function containsCycle($grid) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function containsCycle(grid: string[][]): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (contains-cycle grid)\n  (-> (listof (listof char?)) boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec contains_cycle(Grid :: [[char()]]) -> boolean().\ncontains_cycle(Grid) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec contains_cycle(grid :: [[char]]) :: boolean\n  def contains_cycle(grid) do\n\n  end\nend"}]}