{"slug":"thousand-separator","id":1660,"title":"Thousand Separator","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":17,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"}],"totalAccepted":12471,"totalSubmission":21802,"hints":["Scan from the back of the integer and use dots to connect blocks with length 3 except the last block."],"sampleTestCase":"987","exampleTestcases":"987\n1234","content":"<p>Given an integer <code>n</code>, add a dot (&quot;.&quot;) as the thousands separator and return it in string format.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 987\n<strong>Output:</strong> &quot;987&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1234\n<strong>Output:</strong> &quot;1.234&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数&nbsp;<code>n</code>，请你每隔三位添加点（即 &quot;.&quot; 符号）作为千位分隔符，并将结果以字符串格式返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 987\n<strong>输出：</strong>&quot;987&quot;\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 1234\n<strong>输出：</strong>&quot;1.234&quot;\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>n = 123456789\n<strong>输出：</strong>&quot;123.456.789&quot;\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>n = 0\n<strong>输出：</strong>&quot;0&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt; 2^31</code></li>\n</ul>\n","translatedTitle":"千位分隔数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string thousandSeparator(int n) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String thousandSeparator(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def thousandSeparator(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def thousandSeparator(self, n: int) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * thousandSeparator(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string ThousandSeparator(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {string}\n */\nvar thousandSeparator = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {String}\ndef thousand_separator(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func thousandSeparator(_ n: Int) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func thousandSeparator(n int) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def thousandSeparator(n: Int): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun thousandSeparator(n: Int): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn thousand_separator(n: i32) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function thousandSeparator($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function thousandSeparator(n: number): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (thousand-separator n)\n  (-> exact-integer? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec thousand_separator(N :: integer()) -> unicode:unicode_binary().\nthousand_separator(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec thousand_separator(n :: integer) :: String.t\n  def thousand_separator(n) do\n\n  end\nend"}]}