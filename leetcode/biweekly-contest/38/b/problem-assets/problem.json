{"slug":"widest-vertical-area-between-two-points-containing-no-points","id":1742,"title":"Widest Vertical Area Between Two Points Containing No Points","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":13,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":6167,"totalSubmission":7634,"hints":["Try sorting the points","Think is the y-axis of a point relevant"],"sampleTestCase":"[[8,7],[9,9],[7,4],[9,7]]","exampleTestcases":"[[8,7],[9,9],[7,4],[9,7]]\n[[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]","content":"<p>Given <code>n</code> <code>points</code> on a 2D plane where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, Return<em>&nbsp;the <strong>widest vertical area</strong> between two points such that no points are inside the area.</em></p>\n\n<p>A <strong>vertical area</strong> is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The <strong>widest vertical area</strong> is the one with the maximum width.</p>\n\n<p>Note that points <strong>on the edge</strong> of a vertical area <strong>are not</strong> considered included in the area.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2020-09-19-points3.png\" style=\"width: 276px; height: 371px;\" />​\n<pre>\n<strong>Input:</strong> points = [[8,7],[9,9],[7,4],[9,7]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Both the red and the blue area are optimal.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == points.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你 <code>n</code> 个二维平面上的点 <code>points</code> ，其中 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> ，请你返回两点之间内部不包含任何点的 <strong>最宽垂直面积</strong> 的宽度。</p>\n\n<p><strong>垂直面积</strong> 的定义是固定宽度，而 y 轴上无限延伸的一块区域（也就是高度为无穷大）。 <strong>最宽垂直面积</strong> 为宽度最大的一个垂直面积。</p>\n\n<p>请注意，垂直区域 <strong>边上</strong> 的点 <strong>不在</strong> 区域内。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-10-31-points3.png\" style=\"width: 276px; height: 371px;\" />​\n<pre>\n<b>输入：</b>points = [[8,7],[9,9],[7,4],[9,7]]\n<b>输出：</b>1\n<b>解释：</b>红色区域和蓝色区域都是最优区域。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\n<b>输出：</b>3\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == points.length</code></li>\n\t<li><code>2 <= n <= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"两点之间不包含任何点的最宽垂直面积","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maxWidthOfVerticalArea(int[][] points) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maxWidthOfVerticalArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint maxWidthOfVerticalArea(int** points, int pointsSize, int* pointsColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaxWidthOfVerticalArea(int[][] points) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxWidthOfVerticalArea = function(points) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} points\n# @return {Integer}\ndef max_width_of_vertical_area(points)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maxWidthOfVerticalArea(_ points: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maxWidthOfVerticalArea(points [][]int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maxWidthOfVerticalArea(points: Array[Array[Int]]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maxWidthOfVerticalArea(points: Array<IntArray>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn max_width_of_vertical_area(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function maxWidthOfVerticalArea($points) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maxWidthOfVerticalArea(points: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (max-width-of-vertical-area points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec max_width_of_vertical_area(Points :: [[integer()]]) -> integer().\nmax_width_of_vertical_area(Points) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec max_width_of_vertical_area(points :: [[integer]]) :: integer\n  def max_width_of_vertical_area(points) do\n\n  end\nend"}]}