{"slug":"count-substrings-that-differ-by-one-character","id":1743,"title":"Count Substrings That Differ by One Character","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":33,"dislikes":0,"status":2,"tag":[{"name":"Hash Table","slug":"hash-table","translatedName":"哈希表"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":3190,"totalSubmission":4451,"hints":["Take every substring of s, change a character, and see how many substrings of t match that substring.","Use a Trie to store all substrings of t as a dictionary."],"sampleTestCase":"\"aba\"\n\"baba\"","exampleTestcases":"\"aba\"\n\"baba\"\n\"ab\"\n\"bb\"","content":"<p>Given two strings <code>s</code> and <code>t</code>, find the number of ways you can choose a non-empty substring of <code>s</code> and replace a <strong>single character</strong> by a different character such that the resulting substring is a substring of <code>t</code>. In other words, find the number of substrings in <code>s</code> that differ from some substring in <code>t</code> by <strong>exactly</strong> one character.</p>\n\n<p>For example, the underlined substrings in <code>&quot;<u>compute</u>r&quot;</code> and <code>&quot;<u>computa</u>tion&quot;</code> only differ by the <code>&#39;e&#39;</code>/<code>&#39;a&#39;</code>, so this is a valid way.</p>\n\n<p>Return <em>the number of substrings that satisfy the condition above.</em></p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;, t = &quot;baba&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(&quot;<u>a</u>ba&quot;, &quot;<u>b</u>aba&quot;)\n(&quot;<u>a</u>ba&quot;, &quot;ba<u>b</u>a&quot;)\n(&quot;ab<u>a</u>&quot;, &quot;<u>b</u>aba&quot;)\n(&quot;ab<u>a</u>&quot;, &quot;ba<u>b</u>a&quot;)\n(&quot;a<u>b</u>a&quot;, &quot;b<u>a</u>ba&quot;)\n(&quot;a<u>b</u>a&quot;, &quot;bab<u>a</u>&quot;)\nThe underlined portions are the substrings that are chosen from s and t.\n</pre>\n​​<strong>Example 2:</strong>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, t = &quot;bb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The following are the pairs of substrings from s and t that differ by 1 character:\n(&quot;<u>a</u>b&quot;, &quot;<u>b</u>b&quot;)\n(&quot;<u>a</u>b&quot;, &quot;b<u>b</u>&quot;)\n(&quot;<u>ab</u>&quot;, &quot;<u>bb</u>&quot;)\n​​​​The underlined portions are the substrings that are chosen from s and t.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 100</code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters only.</li>\n</ul>\n","translatedContent":"<p>给你两个字符串 <code>s</code> 和 <code>t</code> ，请你找出 <code>s</code> 中的非空子串的数目，这些子串满足替换 <strong>一个不同字符</strong> 以后，是 <code>t</code> 串的子串。换言之，请你找到 <code>s</code> 和 <code>t</code> 串中 <strong>恰好</strong> 只有一个字符不同的子字符串对的数目。</p>\n\n<p>比方说， <code>\"<strong>compute</strong>r\"</code> 和 <code>\"<strong>computa</strong>tion\"</code> 加粗部分只有一个字符不同： <code>'e'</code>/<code>'a'</code> ，所以这一对子字符串会给答案加 1 。</p>\n\n<p>请你返回满足上述条件的不同子字符串对数目。</p>\n\n<p>一个 <strong>子字符串</strong> 是一个字符串中连续的字符。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"aba\", t = \"baba\"\n<b>输出：</b>6\n<strong>解释：</strong>以下为只相差 1 个字符的 s 和 t 串的子字符串对：\n(\"<strong>a</strong>ba\", \"<strong>b</strong>aba\")\n(\"<strong>a</strong>ba\", \"ba<strong>b</strong>a\")\n(\"ab<strong>a</strong>\", \"<strong>b</strong>aba\")\n(\"ab<strong>a</strong>\", \"ba<strong>b</strong>a\")\n(\"a<strong>b</strong>a\", \"b<strong>a</strong>ba\")\n(\"a<strong>b</strong>a\", \"bab<strong>a</strong>\")\n加粗部分分别表示 s 和 t 串选出来的子字符串。\n</pre>\n<strong>示例 2：</strong>\n\n<pre>\n<b>输入：</b>s = \"ab\", t = \"bb\"\n<b>输出：</b>3\n<strong>解释：</strong>以下为只相差 1 个字符的 s 和 t 串的子字符串对：\n(\"<strong>a</strong>b\", \"<strong>b</strong>b\")\n(\"<strong>a</strong>b\", \"b<strong>b</strong>\")\n(\"<strong>ab</strong>\", \"<strong>bb</strong>\")\n加粗部分分别表示 s 和 t 串选出来的子字符串。\n</pre>\n<strong>示例 3：</strong>\n\n<pre>\n<b>输入：</b>s = \"a\", t = \"a\"\n<b>输出：</b>0\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"abe\", t = \"bbc\"\n<b>输出：</b>10\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length, t.length <= 100</code></li>\n\t<li><code>s</code> 和 <code>t</code> 都只包含小写英文字母。</li>\n</ul>\n","translatedTitle":"统计只差一个字符的子串数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int countSubstrings(string s, string t) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int countSubstrings(String s, String t) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countSubstrings(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countSubstrings(self, s: str, t: str) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint countSubstrings(char * s, char * t){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int CountSubstrings(string s, string t) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar countSubstrings = function(s, t) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef count_substrings(s, t)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countSubstrings(_ s: String, _ t: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countSubstrings(s string, t string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countSubstrings(s: String, t: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countSubstrings(s: String, t: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_substrings(s: String, t: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function countSubstrings($s, $t) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countSubstrings(s: string, t: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-substrings s t)\n  (-> string? string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_substrings(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\ncount_substrings(S, T) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_substrings(s :: String.t, t :: String.t) :: integer\n  def count_substrings(s, t) do\n\n  end\nend"}]}