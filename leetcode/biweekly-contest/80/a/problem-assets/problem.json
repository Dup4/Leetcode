{"slug":"strong-password-checker-ii","id":2391,"frontendId":6095,"title":"Strong Password Checker II","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3189,"totalSubmission":5159,"hints":["You can use a boolean flag to define certain types of characters seen in the string.","In the end, check if all boolean flags have ended up True, and do not forget to check the \"adjacent\" and \"length\" criteria."],"sampleTestCase":"\"IloveLe3tcode!\"","exampleTestcases":"\"IloveLe3tcode!\"\n\"Me+You--IsMyDream\"\n\"1aB!\"","content":"<p>A password is said to be <strong>strong</strong> if it satisfies all the following criteria:</p>\n\n<ul>\n\t<li>It has at least <code>8</code> characters.</li>\n\t<li>It contains at least <strong>one lowercase</strong> letter.</li>\n\t<li>It contains at least <strong>one uppercase</strong> letter.</li>\n\t<li>It contains at least <strong>one digit</strong>.</li>\n\t<li>It contains at least <strong>one special character</strong>. The special characters are the characters in the following string: <code>&quot;!@#$%^&amp;*()-+&quot;</code>.</li>\n\t<li>It does <strong>not</strong> contain <code>2</code> of the same character in adjacent positions (i.e., <code>&quot;aab&quot;</code> violates this condition, but <code>&quot;aba&quot;</code> does not).</li>\n</ul>\n\n<p>Given a string <code>password</code>, return <code>true</code><em> if it is a <strong>strong</strong> password</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> password = &quot;IloveLe3tcode!&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The password meets all the requirements. Therefore, we return true.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> password = &quot;Me+You--IsMyDream&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> password = &quot;1aB!&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The password does not meet the length requirement. Therefore, we return false.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= password.length &lt;= 100</code></li>\n\t<li><code>password</code> consists of letters, digits, and special characters: <code>&quot;!@#$%^&amp;*()-+&quot;</code>.</li>\n</ul>\n","translatedContent":"<p>如果一个密码满足以下所有条件，我们称它是一个 <strong>强</strong>&nbsp;密码：</p>\n\n<ul>\n\t<li>它有至少 <code>8</code>&nbsp;个字符。</li>\n\t<li>至少包含 <strong>一个小写英文</strong>&nbsp;字母。</li>\n\t<li>至少包含 <strong>一个大写英文</strong>&nbsp;字母。</li>\n\t<li>至少包含 <strong>一个数字</strong>&nbsp;。</li>\n\t<li>至少包含 <strong>一个特殊字符</strong>&nbsp;。特殊字符为：<code>\"!@#$%^&amp;*()-+\"</code>&nbsp;中的一个。</li>\n\t<li>它 <strong>不</strong>&nbsp;包含&nbsp;<code>2</code>&nbsp;个连续相同的字符（比方说&nbsp;<code>\"aab\"</code>&nbsp;不符合该条件，但是&nbsp;<code>\"aba\"</code>&nbsp;符合该条件）。</li>\n</ul>\n\n<p>给你一个字符串&nbsp;<code>password</code>&nbsp;，如果它是一个&nbsp;<strong>强</strong>&nbsp;密码，返回&nbsp;<code>true</code>，否则返回&nbsp;<code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>password = \"IloveLe3tcode!\"\n<b>输出：</b>true\n<b>解释：</b>密码满足所有的要求，所以我们返回 true 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>password = \"Me+You--IsMyDream\"\n<b>输出：</b>false\n<b>解释：</b>密码不包含数字，且包含 2 个连续相同的字符。所以我们返回 false 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>password = \"1aB!\"\n<b>输出：</b>false\n<b>解释：</b>密码不符合长度要求。所以我们返回 false 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= password.length &lt;= 100</code></li>\n\t<li><code>password</code>&nbsp;包含字母，数字和&nbsp;<code>\"!@#$%^&amp;*()-+\"</code>&nbsp;这些特殊字符。</li>\n</ul>\n","translatedTitle":"强密码检验器 II","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool strongPasswordCheckerII(string password) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean strongPasswordCheckerII(String password) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def strongPasswordCheckerII(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def strongPasswordCheckerII(self, password: str) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool strongPasswordCheckerII(char * password){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool StrongPasswordCheckerII(string password) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} password\n * @return {boolean}\n */\nvar strongPasswordCheckerII = function(password) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} password\n# @return {Boolean}\ndef strong_password_checker_ii(password)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func strongPasswordCheckerII(_ password: String) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func strongPasswordCheckerII(password string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def strongPasswordCheckerII(password: String): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun strongPasswordCheckerII(password: String): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn strong_password_checker_ii(password: String) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $password\n     * @return Boolean\n     */\n    function strongPasswordCheckerII($password) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function strongPasswordCheckerII(password: string): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (strong-password-checker-ii password)\n  (-> string? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec strong_password_checker_ii(Password :: unicode:unicode_binary()) -> boolean().\nstrong_password_checker_ii(Password) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec strong_password_checker_ii(password :: String.t) :: boolean\n  def strong_password_checker_ii(password) do\n\n  end\nend"}]}