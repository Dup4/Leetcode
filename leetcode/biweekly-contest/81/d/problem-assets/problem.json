{"slug":"number-of-distinct-roll-sequences","id":2404,"frontendId":6107,"title":"Number of Distinct Roll Sequences","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":3,"dislikes":0,"status":2,"tag":[],"totalAccepted":1055,"totalSubmission":2153,"hints":["Can you think of a DP solution?","Consider a state that remembers the last 1 or 2 rolls.","Do you need to consider the last 3 rolls?"],"sampleTestCase":"4","exampleTestcases":"4\n2","content":"<p>You are given an integer <code>n</code>. You roll a fair 6-sided dice <code>n</code> times. Determine the total number of <strong>distinct</strong> sequences of rolls possible such that the following conditions are satisfied:</p>\n\n<ol>\n\t<li>The <strong>greatest common divisor</strong> of any <strong>adjacent</strong> values in the sequence is equal to <code>1</code>.</li>\n\t<li>There is <strong>at least</strong> a gap of <code>2</code> rolls between <strong>equal</strong> valued rolls. More formally, if the value of the <code>i<sup>th</sup></code> roll is <strong>equal</strong> to the value of the <code>j<sup>th</sup></code> roll, then <code>abs(i - j) &gt; 2</code>.</li>\n</ol>\n\n<p>Return <em>the<strong> total number</strong> of distinct sequences possible</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two sequences are considered distinct if at least one element is different.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 184\n<strong>Explanation:</strong> Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.\nSome invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).\n(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).\n(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.\nThere are a total of 184 distinct sequences possible, so we return 184.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> Some of the possible sequences are (1, 2), (2, 1), (3, 2).\nSome invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.\nThere are a total of 22 distinct sequences possible, so we return 22.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数&nbsp;<code>n</code>&nbsp;。你需要掷一个 6 面的骰子&nbsp;<code>n</code>&nbsp;次。请你在满足以下要求的前提下，求出 <strong>不同</strong>&nbsp;骰子序列的数目：</p>\n\n<ol>\n\t<li>序列中任意 <strong>相邻</strong>&nbsp;数字的 <strong>最大公约数</strong>&nbsp;为 <code>1</code>&nbsp;。</li>\n\t<li>序列中 <strong>相等</strong>&nbsp;的值之间，至少有 <code>2</code>&nbsp;个其他值的数字。正式地，如果第&nbsp;<code>i</code>&nbsp;次掷骰子的值 <strong>等于</strong>&nbsp;第&nbsp;<code>j</code>&nbsp;次的值，那么&nbsp;<code>abs(i - j) &gt; 2</code>&nbsp;。</li>\n</ol>\n\n<p>请你返回不同序列的 <strong>总数目</strong>&nbsp;。由于答案可能很大，请你将答案对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\n\n<p>如果两个序列中至少有一个元素不同，那么它们被视为不同的序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>n = 4\n<b>输出：</b>184\n<b>解释：</b>一些可行的序列为 (1, 2, 3, 4) ，(6, 1, 2, 3) ，(1, 2, 3, 1) 等等。\n一些不可行的序列为 (1, 2, 1, 3) ，(1, 2, 3, 6) 。\n(1, 2, 1, 3) 是不可行的，因为第一个和第三个骰子值相等且 abs(1 - 3) = 2 （下标从 1 开始表示）。\n(1, 2, 3, 6) i是不可行的，因为 3 和 6 的最大公约数是 3 。\n总共有 184 个不同的可行序列，所以我们返回 184 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>n = 2\n<b>输出：</b>22\n<b>解释：</b>一些可行的序列为 (1, 2) ，(2, 1) ，(3, 2) 。\n一些不可行的序列为 (3, 6) ，(2, 4) ，因为最大公约数不为 1 。\n总共有 22 个不同的可行序列，所以我们返回 22 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedTitle":"不同骰子序列的数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int distinctSequences(int n) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int distinctSequences(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def distinctSequences(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def distinctSequences(self, n: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint distinctSequences(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int DistinctSequences(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar distinctSequences = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {Integer}\ndef distinct_sequences(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func distinctSequences(_ n: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func distinctSequences(n int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def distinctSequences(n: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun distinctSequences(n: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn distinct_sequences(n: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function distinctSequences($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function distinctSequences(n: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (distinct-sequences n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec distinct_sequences(N :: integer()) -> integer().\ndistinct_sequences(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec distinct_sequences(n :: integer) :: integer\n  def distinct_sequences(n) do\n\n  end\nend"}]}