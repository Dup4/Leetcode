{"slug":"count-unreachable-pairs-of-nodes-in-an-undirected-graph","id":2403,"frontendId":6106,"title":"Count Unreachable Pairs of Nodes in an Undirected Graph","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2015,"totalSubmission":6992,"hints":["Find the connected components of the graph. To find connected components, you can use Union Find (Disjoint Sets), BFS, or DFS.","For a node u, the number of nodes that are unreachable from u is the number of nodes that are not in the same connected component as u.","The number of unreachable nodes from node u will be the same for the number of nodes that are unreachable from node v if nodes u and v belong to the same connected component."],"sampleTestCase":"3\n[[0,1],[0,2],[1,2]]","exampleTestcases":"3\n[[0,1],[0,2],[1,2]]\n7\n[[0,2],[0,5],[2,4],[1,6],[5,4]]","content":"<p>You are given an integer <code>n</code>. There is an <strong>undirected</strong> graph with <code>n</code> nodes, numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>Return <em>the <strong>number of pairs</strong> of different nodes that are <strong>unreachable</strong> from each other</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-05-05-tc-3.png\" style=\"width: 267px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[0,2],[1,2]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-05-05-tc-2.png\" style=\"width: 295px; height: 269px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> There are 14 pairs of nodes that are unreachable from each other:\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].\nTherefore, we return 14.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n","translatedContent":"<p>给你一个整数&nbsp;<code>n</code>&nbsp;，表示一张<strong>&nbsp;无向图</strong>&nbsp;中有 <code>n</code>&nbsp;个节点，编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。同时给你一个二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示节点&nbsp;<code>a<sub>i</sub></code> 和&nbsp;<code>b<sub>i</sub></code>&nbsp;之间有一条&nbsp;<strong>无向</strong>&nbsp;边。</p>\n\n<p>请你返回 <strong>无法互相到达</strong>&nbsp;的不同 <strong>点对数目</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-05-05-tc-3.png\" style=\"width: 267px; height: 169px;\"></p>\n\n<pre><b>输入：</b>n = 3, edges = [[0,1],[0,2],[1,2]]\n<b>输出：</b>0\n<b>解释：</b>所有点都能互相到达，意味着没有点对无法互相到达，所以我们返回 0 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-05-05-tc-2.png\" style=\"width: 295px; height: 269px;\"></p>\n\n<pre><b>输入：</b>n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\n<b>输出：</b>14\n<b>解释：</b>总共有 14 个点对互相无法到达：\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]]\n所以我们返回 14 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>不会有重复边。</li>\n</ul>\n","translatedTitle":"统计无向图中无法互相到达点对数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long countPairs(int n, vector<vector<int>>& edges) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long countPairs(int n, int[][] edges) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countPairs(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countPairs(self, n: int, edges: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long countPairs(int n, int** edges, int edgesSize, int* edgesColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long CountPairs(int n, int[][] edges) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar countPairs = function(n, edges) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef count_pairs(n, edges)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countPairs(_ n: Int, _ edges: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countPairs(n int, edges [][]int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countPairs(n: Int, edges: Array[Array[Int]]): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countPairs(n: Int, edges: Array<IntArray>): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_pairs(n: i32, edges: Vec<Vec<i32>>) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function countPairs($n, $edges) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countPairs(n: number, edges: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-pairs n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_pairs(N :: integer(), Edges :: [[integer()]]) -> integer().\ncount_pairs(N, Edges) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_pairs(n :: integer, edges :: [[integer]]) :: integer\n  def count_pairs(n, edges) do\n\n  end\nend"}]}