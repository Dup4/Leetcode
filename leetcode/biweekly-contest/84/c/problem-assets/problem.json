{"slug":"task-scheduler-ii","id":2483,"frontendId":6174,"title":"Task Scheduler II","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":2655,"totalSubmission":6425,"hints":["Try taking breaks as late as possible, such that tasks are still spaced appropriately.","Whenever considering whether to complete the next task, if it is not the first task of its type, check how many days ago the previous task was completed and add an appropriate number of breaks."],"sampleTestCase":"[1,2,1,2,3,1]\n3","exampleTestcases":"[1,2,1,2,3,1]\n3\n[5,8,8,5]\n2","content":"<p>You are given a <strong>0-indexed</strong> array of positive integers <code>tasks</code>, representing tasks that need to be completed <strong>in order</strong>, where <code>tasks[i]</code> represents the <strong>type</strong> of the <code>i<sup>th</sup></code> task.</p>\n\n<p>You are also given a positive integer <code>space</code>, which represents the <strong>minimum</strong> number of days that must pass <strong>after</strong> the completion of a task before another task of the <strong>same</strong> type can be performed.</p>\n\n<p>Each day, until all tasks have been completed, you must either:</p>\n\n<ul>\n\t<li>Complete the next task from <code>tasks</code>, or</li>\n\t<li>Take a break.</li>\n</ul>\n\n<p>Return<em> the <strong>minimum</strong> number of days needed to complete all tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [1,2,1,2,3,1], space = 3\n<strong>Output:</strong> 9\n<strong>Explanation:</strong>\nOne way to complete all tasks in 9 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nDay 7: Take a break.\nDay 8: Complete the 4th task.\nDay 9: Complete the 5th task.\nIt can be shown that the tasks cannot be completed in less than 9 days.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [5,8,8,5], space = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nOne way to complete all tasks in 6 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nIt can be shown that the tasks cannot be completed in less than 6 days.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= space &lt;= tasks.length</code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的正整数数组&nbsp;<code>tasks</code>&nbsp;，表示需要 <strong>按顺序</strong>&nbsp;完成的任务，其中&nbsp;<code>tasks[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;件任务的 <strong>类型</strong>&nbsp;。</p>\n\n<p>同时给你一个正整数&nbsp;<code>space</code>&nbsp;，表示一个任务完成&nbsp;<strong>后</strong>&nbsp;，另一个&nbsp;<strong>相同</strong>&nbsp;类型任务完成前需要间隔的&nbsp;<strong>最少</strong>&nbsp;天数。</p>\n\n<p>在所有任务完成前的每一天，你都必须进行以下两种操作中的一种：</p>\n\n<ul>\n\t<li>完成&nbsp;<code>tasks</code>&nbsp;中的下一个任务</li>\n\t<li>休息一天</li>\n</ul>\n\n<p>请你返回完成所有任务所需的 <strong>最少</strong>&nbsp;天数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>tasks = [1,2,1,2,3,1], space = 3\n<b>输出：</b>9\n<strong>解释：</strong>\n9 天完成所有任务的一种方法是：\n第 1 天：完成任务 0 。\n第 2 天：完成任务 1 。\n第 3 天：休息。\n第 4 天：休息。\n第 5 天：完成任务 2 。\n第 6 天：完成任务 3 。\n第 7 天：休息。\n第 8 天：完成任务 4 。\n第 9 天：完成任务 5 。\n可以证明无法少于 9 天完成所有任务。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>tasks = [5,8,8,5], space = 2\n<b>输出：</b>6\n<strong>解释：</strong>\n6 天完成所有任务的一种方法是：\n第 1 天：完成任务 0 。\n第 2 天：完成任务 1 。\n第 3 天：休息。\n第 4 天：休息。\n第 5 天：完成任务 2 。\n第 6 天：完成任务 3 。\n可以证明无法少于 6 天完成所有任务。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= space &lt;= tasks.length</code></li>\n</ul>\n","translatedTitle":"任务调度器 II","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long taskSchedulerII(vector<int>& tasks, int space) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long taskSchedulerII(int[] tasks, int space) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def taskSchedulerII(self, tasks, space):\n        \"\"\"\n        :type tasks: List[int]\n        :type space: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def taskSchedulerII(self, tasks: List[int], space: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long taskSchedulerII(int* tasks, int tasksSize, int space){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long TaskSchedulerII(int[] tasks, int space) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} tasks\n * @param {number} space\n * @return {number}\n */\nvar taskSchedulerII = function(tasks, space) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} tasks\n# @param {Integer} space\n# @return {Integer}\ndef task_scheduler_ii(tasks, space)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func taskSchedulerII(_ tasks: [Int], _ space: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func taskSchedulerII(tasks []int, space int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def taskSchedulerII(tasks: Array[Int], space: Int): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun taskSchedulerII(tasks: IntArray, space: Int): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn task_scheduler_ii(tasks: Vec<i32>, space: i32) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $tasks\n     * @param Integer $space\n     * @return Integer\n     */\n    function taskSchedulerII($tasks, $space) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function taskSchedulerII(tasks: number[], space: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (task-scheduler-ii tasks space)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec task_scheduler_ii(Tasks :: [integer()], Space :: integer()) -> integer().\ntask_scheduler_ii(Tasks, Space) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec task_scheduler_ii(tasks :: [integer], space :: integer) :: integer\n  def task_scheduler_ii(tasks, space) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int taskSchedulerII(List<int> tasks, int space) {\n\n  }\n}"}]}