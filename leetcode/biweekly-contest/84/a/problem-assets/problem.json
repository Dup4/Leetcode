{"slug":"merge-similar-items","id":2447,"frontendId":6141,"title":"Merge Similar Items","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":3798,"totalSubmission":5091,"hints":["Map the weights using the corresponding values as keys.","Make sure your output is sorted in ascending order by value."],"sampleTestCase":"[[1,1],[4,5],[3,8]]\n[[3,1],[1,5]]","exampleTestcases":"[[1,1],[4,5],[3,8]]\n[[3,1],[1,5]]\n[[1,1],[3,2],[2,3]]\n[[2,1],[3,2],[1,3]]\n[[1,3],[2,2]]\n[[7,1],[2,2],[1,4]]","content":"<p>You are given two 2D integer arrays, <code>items1</code> and <code>items2</code>, representing two sets of items. Each array <code>items</code> has the following properties:</p>\n\n<ul>\n\t<li><code>items[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code> where <code>value<sub>i</sub></code> represents the <strong>value</strong> and <code>weight<sub>i</sub></code> represents the <strong>weight </strong>of the <code>i<sup>th</sup></code> item.</li>\n\t<li>The value of each item in <code>items</code> is <strong>unique</strong>.</li>\n</ul>\n\n<p>Return <em>a 2D integer array</em> <code>ret</code> <em>where</em> <code>ret[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code><em>,</em> <em>with</em> <code>weight<sub>i</sub></code> <em>being the <strong>sum of weights</strong> of all items with value</em> <code>value<sub>i</sub></code>.</p>\n\n<p><strong>Note:</strong> <code>ret</code> should be returned in <strong>ascending</strong> order by value.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]\n<strong>Output:</strong> [[1,6],[3,9],[4,5]]\n<strong>Explanation:</strong> \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.\nThe item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.\nThe item with value = 4 occurs in items1 with weight = 5, total weight = 5.  \nTherefore, we return [[1,6],[3,9],[4,5]].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]\n<strong>Output:</strong> [[1,4],[2,4],[3,4]]\n<strong>Explanation:</strong> \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.\nThe item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.\nThe item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.\nTherefore, we return [[1,4],[2,4],[3,4]].</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]\n<strong>Output:</strong> [[1,7],[2,4],[7,1]]\n<strong>Explanation:\n</strong>The item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. \nThe item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. \nThe item with value = 7 occurs in items2 with weight = 1, total weight = 1.\nTherefore, we return [[1,7],[2,4],[7,1]].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items1.length, items2.length &lt;= 1000</code></li>\n\t<li><code>items1[i].length == items2[i].length == 2</code></li>\n\t<li><code>1 &lt;= value<sub>i</sub>, weight<sub>i</sub> &lt;= 1000</code></li>\n\t<li>Each <code>value<sub>i</sub></code> in <code>items1</code> is <strong>unique</strong>.</li>\n\t<li>Each <code>value<sub>i</sub></code> in <code>items2</code> is <strong>unique</strong>.</li>\n</ul>\n","translatedContent":"<p>给你两个二维整数数组&nbsp;<code>items1</code> 和&nbsp;<code>items2</code>&nbsp;，表示两个物品集合。每个数组&nbsp;<code>items</code>&nbsp;有以下特质：</p>\n\n<ul>\n\t<li><code>items[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code> 其中&nbsp;<code>value<sub>i</sub></code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;件物品的&nbsp;<strong>价值</strong>&nbsp;，<code>weight<sub>i</sub></code>&nbsp;表示第 <code>i</code>&nbsp;件物品的 <strong>重量</strong>&nbsp;。</li>\n\t<li><code>items</code>&nbsp;中每件物品的价值都是 <strong>唯一的</strong>&nbsp;。</li>\n</ul>\n\n<p>请你返回一个二维数组&nbsp;<code>ret</code>，其中&nbsp;<code>ret[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code>，&nbsp;<code>weight<sub>i</sub></code>&nbsp;是所有价值为&nbsp;<code>value<sub>i</sub></code><sub>&nbsp;</sub>物品的&nbsp;<strong>重量之和</strong>&nbsp;。</p>\n\n<p><strong>注意：</strong><code>ret</code>&nbsp;应该按价值 <strong>升序</strong>&nbsp;排序后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]\n<b>输出：</b>[[1,6],[3,9],[4,5]]\n<b>解释：</b>\nvalue = 1 的物品在 items1 中 weight = 1 ，在 items2 中 weight = 5 ，总重量为 1 + 5 = 6 。\nvalue = 3 的物品再 items1 中 weight = 8 ，在 items2 中 weight = 1 ，总重量为 8 + 1 = 9 。\nvalue = 4 的物品在 items1 中 weight = 5 ，总重量为 5 。\n所以，我们返回 [[1,6],[3,9],[4,5]] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]\n<b>输出：</b>[[1,4],[2,4],[3,4]]\n<b>解释：</b>\nvalue = 1 的物品在 items1 中 weight = 1 ，在 items2 中 weight = 3 ，总重量为 1 + 3 = 4 。\nvalue = 2 的物品在 items1 中 weight = 3 ，在 items2 中 weight = 1 ，总重量为 3 + 1 = 4 。\nvalue = 3 的物品在 items1 中 weight = 2 ，在 items2 中 weight = 2 ，总重量为 2 + 2 = 4 。\n所以，我们返回 [[1,4],[2,4],[3,4]] 。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]\n<b>输出：</b>[[1,7],[2,4],[7,1]]\n<strong>解释：\n</strong>value = 1 的物品在 items1 中 weight = 3 ，在 items2 中 weight = 4 ，总重量为 3 + 4 = 7 。\nvalue = 2 的物品在 items1 中 weight = 2 ，在 items2 中 weight = 2 ，总重量为 2 + 2 = 4 。\nvalue = 7 的物品在 items2 中 weight = 1 ，总重量为 1 。\n所以，我们返回 [[1,7],[2,4],[7,1]] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items1.length, items2.length &lt;= 1000</code></li>\n\t<li><code>items1[i].length == items2[i].length == 2</code></li>\n\t<li><code>1 &lt;= value<sub>i</sub>, weight<sub>i</sub> &lt;= 1000</code></li>\n\t<li><code>items1</code>&nbsp;中每个 <code>value<sub>i</sub></code>&nbsp;都是 <b>唯一的</b>&nbsp;。</li>\n\t<li><code>items2</code>&nbsp;中每个 <code>value<sub>i</sub></code>&nbsp;都是 <b>唯一的</b>&nbsp;。</li>\n</ul>\n","translatedTitle":"合并相似的物品","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<vector<int>> mergeSimilarItems(vector<vector<int>>& items1, vector<vector<int>>& items2) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<List<Integer>> mergeSimilarItems(int[][] items1, int[][] items2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def mergeSimilarItems(self, items1, items2):\n        \"\"\"\n        :type items1: List[List[int]]\n        :type items2: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def mergeSimilarItems(self, items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** mergeSimilarItems(int** items1, int items1Size, int* items1ColSize, int** items2, int items2Size, int* items2ColSize, int* returnSize, int** returnColumnSizes){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<IList<int>> MergeSimilarItems(int[][] items1, int[][] items2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} items1\n * @param {number[][]} items2\n * @return {number[][]}\n */\nvar mergeSimilarItems = function(items1, items2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} items1\n# @param {Integer[][]} items2\n# @return {Integer[][]}\ndef merge_similar_items(items1, items2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func mergeSimilarItems(_ items1: [[Int]], _ items2: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func mergeSimilarItems(items1 [][]int, items2 [][]int) [][]int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def mergeSimilarItems(items1: Array[Array[Int]], items2: Array[Array[Int]]): List[List[Int]] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun mergeSimilarItems(items1: Array<IntArray>, items2: Array<IntArray>): List<List<Int>> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn merge_similar_items(items1: Vec<Vec<i32>>, items2: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $items1\n     * @param Integer[][] $items2\n     * @return Integer[][]\n     */\n    function mergeSimilarItems($items1, $items2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function mergeSimilarItems(items1: number[][], items2: number[][]): number[][] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (merge-similar-items items1 items2)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec merge_similar_items(Items1 :: [[integer()]], Items2 :: [[integer()]]) -> [[integer()]].\nmerge_similar_items(Items1, Items2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec merge_similar_items(items1 :: [[integer]], items2 :: [[integer]]) :: [[integer]]\n  def merge_similar_items(items1, items2) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  List<List<int>> mergeSimilarItems(List<List<int>> items1, List<List<int>> items2) {\n\n  }\n}"}]}