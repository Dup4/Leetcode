{"slug":"minimum-cuts-to-divide-a-circle","id":2575,"frontendId":6249,"title":"Minimum Cuts to Divide a Circle","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":2682,"totalSubmission":5439,"hints":["Think about odd and even values separately.","When will we not have to cut the circle at all?"],"sampleTestCase":"4","exampleTestcases":"4\n3","content":"<p>A <strong>valid cut</strong> in a circle can be:</p>\n\n<ul>\n\t<li>A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or</li>\n\t<li>A cut that is represented by a straight line that touches one point on the edge of the circle and its center.</li>\n</ul>\n\n<p>Some valid and invalid cuts are shown in the figures below.</p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-29-alldrawio.png\" style=\"width: 450px; height: 174px;\" />\n<p>Given the integer <code>n</code>, return <em>the <strong>minimum</strong> number of cuts needed to divide a circle into </em><code>n</code><em> equal slices</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-24-11drawio.png\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe above figure shows how cutting the circle twice through the middle divides it into 4 equal slices.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-24-22drawio.png\" style=\"width: 200px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nAt least 3 cuts are needed to divide the circle into 3 equal slices. \nIt can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape.\nAlso note that the first cut will not divide the circle into distinct parts.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n</ul>\n","translatedContent":"<p>圆内一个 <strong>有效切割</strong>&nbsp;，符合以下二者之一：</p>\n\n<ul>\n\t<li>该切割是两个端点在圆上的线段，且该线段经过圆心。</li>\n\t<li>该切割是一端在圆心另一端在圆上的线段。</li>\n</ul>\n\n<p>一些有效和无效的切割如下图所示。</p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-29-alldrawio.png\" style=\"width: 450px; height: 174px;\" /></p>\n\n<p>给你一个整数&nbsp;<code>n</code>&nbsp;，请你返回将圆切割成相等的&nbsp;<code>n</code>&nbsp;等分的&nbsp;<strong>最少</strong>&nbsp;切割次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-24-11drawio.png\" style=\"width: 200px; height: 200px;\" /></p>\n\n<pre>\n<b>输入：</b>n = 4\n<b>输出：</b>2\n<b>解释：</b>\n上图展示了切割圆 2 次，得到四等分。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-10-24-22drawio.png\" style=\"width: 200px; height: 201px;\" /></p>\n\n<pre>\n<b>输入：</b>n = 3\n<b>输出：</b>3\n<strong>解释：</strong>\n最少需要切割 3 次，将圆切成三等分。\n少于 3 次切割无法将圆切成大小相等面积相同的 3 等分。\n同时可以观察到，第一次切割无法将圆切割开。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n</ul>\n","translatedTitle":"分割圆的最少切割次数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int numberOfCuts(int n) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int numberOfCuts(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def numberOfCuts(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def numberOfCuts(self, n: int) -> int:"},{"lang":"C","langSlug":"c","code":"int numberOfCuts(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int NumberOfCuts(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar numberOfCuts = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {Integer}\ndef number_of_cuts(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func numberOfCuts(_ n: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func numberOfCuts(n int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def numberOfCuts(n: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun numberOfCuts(n: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn number_of_cuts(n: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numberOfCuts($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function numberOfCuts(n: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (number-of-cuts n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec number_of_cuts(N :: integer()) -> integer().\nnumber_of_cuts(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec number_of_cuts(n :: integer) :: integer\n  def number_of_cuts(n) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int numberOfCuts(int n) {\n\n  }\n}"}]}