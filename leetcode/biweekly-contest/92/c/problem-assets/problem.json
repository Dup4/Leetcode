{"slug":"minimum-penalty-for-a-shop","id":2576,"frontendId":6250,"title":"Minimum Penalty for a Shop","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2276,"totalSubmission":3753,"hints":["At any index, the penalty is the sum of prefix count of ‘N’ and suffix count of ‘Y’.","Enumerate all indices and find the minimum such value."],"sampleTestCase":"\"YYNY\"","exampleTestcases":"\"YYNY\"\n\"NNNNN\"\n\"YYYY\"","content":"<p>You are given the customer visit log of a shop represented by a <strong>0-indexed</strong> string <code>customers</code> consisting only of characters <code>&#39;N&#39;</code> and <code>&#39;Y&#39;</code>:</p>\n\n<ul>\n\t<li>if the <code>i<sup>th</sup></code> character is <code>&#39;Y&#39;</code>, it means that customers come at the <code>i<sup>th</sup></code> hour</li>\n\t<li>whereas <code>&#39;N&#39;</code> indicates that no customers come at the <code>i<sup>th</sup></code> hour.</li>\n</ul>\n\n<p>If the shop closes at the <code>j<sup>th</sup></code> hour (<code>0 &lt;= j &lt;= n</code>), the <strong>penalty</strong> is calculated as follows:</p>\n\n<ul>\n\t<li>For every hour when the shop is open and no customers come, the penalty increases by <code>1</code>.</li>\n\t<li>For every hour when the shop is closed and customers come, the penalty increases by <code>1</code>.</li>\n</ul>\n\n<p>Return<em> the <strong>earliest</strong> hour at which the shop must be closed to incur a <strong>minimum</strong> penalty.</em></p>\n\n<p><strong>Note</strong> that if a shop closes at the <code>j<sup>th</sup></code> hour, it means the shop is closed at the hour <code>j</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = &quot;YYNY&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- Closing the shop at the 0<sup>th</sup> hour incurs in 1+1+0+1 = 3 penalty.\n- Closing the shop at the 1<sup>st</sup> hour incurs in 0+1+0+1 = 2 penalty.\n- Closing the shop at the 2<sup>nd</sup> hour incurs in 0+0+0+1 = 1 penalty.\n- Closing the shop at the 3<sup>rd</sup> hour incurs in 0+0+1+1 = 2 penalty.\n- Closing the shop at the 4<sup>th</sup> hour incurs in 0+0+1+0 = 1 penalty.\nClosing the shop at 2<sup>nd</sup> or 4<sup>th</sup> hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = &quot;NNNNN&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> It is best to close the shop at the 0<sup>th</sup> hour as no customers arrive.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = &quot;YYYY&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> It is best to close the shop at the 4<sup>th</sup> hour as customers arrive at each hour.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= customers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>customers</code> consists only of characters <code>&#39;Y&#39;</code> and <code>&#39;N&#39;</code>.</li>\n</ul>\n","translatedContent":"<p>给你一个顾客访问商店的日志，用一个下标从 <strong>0</strong>&nbsp;开始且只包含字符&nbsp;<code>'N'</code> 和&nbsp;<code>'Y'</code>&nbsp;的字符串&nbsp;<code>customers</code>&nbsp;表示：</p>\n\n<ul>\n\t<li>如果第&nbsp;<code>i</code>&nbsp;个字符是&nbsp;<code>'Y'</code>&nbsp;，它表示第&nbsp;<code>i</code>&nbsp;小时有顾客到达。</li>\n\t<li>如果第&nbsp;<code>i</code>&nbsp;个字符是&nbsp;<code>'N'</code>&nbsp;，它表示第 <code>i</code>&nbsp;小时没有顾客到达。</li>\n</ul>\n\n<p>如果商店在第&nbsp;<code>j</code>&nbsp;小时关门（<code>0 &lt;= j &lt;= n</code>），代价按如下方式计算：</p>\n\n<ul>\n\t<li>在开门期间，如果某一个小时没有顾客到达，代价增加 <code>1</code>&nbsp;。</li>\n\t<li>在关门期间，如果某一个小时有顾客到达，代价增加&nbsp;<code>1</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回在确保代价 <strong>最小</strong>&nbsp;的前提下，商店的&nbsp;<strong>最早</strong>&nbsp;关门时间。</p>\n\n<p>注意，商店在第 <code>j</code>&nbsp;小时关门表示在第 <code>j</code> 小时以及之后商店处于关门状态。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>customers = \"YYNY\"\n<b>输出：</b>2\n<b>解释：</b>\n- 第 0 小时关门，总共 1+1+0+1 = 3 代价。\n- 第 1 小时关门，总共 0+1+0+1 = 2 代价。\n- 第 2 小时关门，总共 0+0+0+1 = 1 代价。\n- 第 3 小时关门，总共 0+0+1+1 = 2 代价。\n- 第 4 小时关门，总共 0+0+1+0 = 1 代价。\n在第 2 或第 4 小时关门代价都最小。由于第 2 小时更早，所以最优关门时间是 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>customers = \"NNNNN\"\n<b>输出：</b>0\n<b>解释：</b>最优关门时间是 0 ，因为自始至终没有顾客到达。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>customers = \"YYYY\"\n<b>输出：</b>4\n<b>解释：</b>最优关门时间是 4 ，因为每一小时均有顾客到达。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= customers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>customers</code>&nbsp;只包含字符&nbsp;<code>'Y'</code>&nbsp;和&nbsp;<code>'N'</code>&nbsp;。</li>\n</ul>\n","translatedTitle":"商店的最少代价","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int bestClosingTime(string customers) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int bestClosingTime(String customers) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def bestClosingTime(self, customers):\n        \"\"\"\n        :type customers: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def bestClosingTime(self, customers: str) -> int:"},{"lang":"C","langSlug":"c","code":"int bestClosingTime(char * customers){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int BestClosingTime(string customers) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} customers\n * @return {number}\n */\nvar bestClosingTime = function(customers) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} customers\n# @return {Integer}\ndef best_closing_time(customers)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func bestClosingTime(_ customers: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func bestClosingTime(customers string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def bestClosingTime(customers: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun bestClosingTime(customers: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn best_closing_time(customers: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $customers\n     * @return Integer\n     */\n    function bestClosingTime($customers) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function bestClosingTime(customers: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (best-closing-time customers)\n  (-> string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec best_closing_time(Customers :: unicode:unicode_binary()) -> integer().\nbest_closing_time(Customers) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec best_closing_time(customers :: String.t) :: integer\n  def best_closing_time(customers) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int bestClosingTime(String customers) {\n\n  }\n}"}]}