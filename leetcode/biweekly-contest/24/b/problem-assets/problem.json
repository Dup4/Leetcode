{"slug":"find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k","id":1515,"title":"Find the Minimum Number of Fibonacci Numbers Whose Sum Is K","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":134,"dislikes":0,"status":2,"tag":[{"name":"Greedy","slug":"greedy","translatedName":"贪心"}],"totalAccepted":26725,"totalSubmission":37780,"hints":["Generate all Fibonacci numbers up to the limit (they are few).","Use greedy solution, taking at every time the greatest Fibonacci number which is smaller than or equal to the current number. Subtract this Fibonacci number from the current number and repeat again the process."],"sampleTestCase":"7","exampleTestcases":"7\n10\n19","content":"<p>Given an integer&nbsp;<code>k</code>, <em>return the minimum number of Fibonacci numbers whose sum is equal to </em><code>k</code>. The same Fibonacci number can be used multiple times.</p>\n\n<p>The Fibonacci numbers are defined as:</p>\n\n<ul>\n\t<li><code>F<sub>1</sub> = 1</code></li>\n\t<li><code>F<sub>2</sub> = 1</code></li>\n\t<li><code>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub></code> for <code>n &gt; 2.</code></li>\n</ul>\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to <code>k</code>.\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 7\n<strong>Output:</strong> 2 \n<strong>Explanation:</strong> The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 10\n<strong>Output:</strong> 2 \n<strong>Explanation:</strong> For k = 10 we can use 2 + 8 = 10.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 19\n<strong>Output:</strong> 3 \n<strong>Explanation:</strong> For k = 19 we can use 1 + 5 + 13 = 19.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你数字 <code>k</code>&nbsp;，请你返回和为&nbsp;<code>k</code>&nbsp;的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。</p>\n\n<p>斐波那契数字定义为：</p>\n\n<ul>\n\t<li>F<sub>1</sub> = 1</li>\n\t<li>F<sub>2</sub> = 1</li>\n\t<li>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub>&nbsp;， 其中 n &gt; 2 。</li>\n</ul>\n\n<p>数据保证对于给定的 <code>k</code>&nbsp;，一定能找到可行解。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>k = 7\n<strong>输出：</strong>2 \n<strong>解释：</strong>斐波那契数字为：1，1，2，3，5，8，13，&hellip;&hellip;\n对于 k = 7 ，我们可以得到 2 + 5 = 7 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>k = 10\n<strong>输出：</strong>2 \n<strong>解释：</strong>对于 k = 10 ，我们可以得到 2 + 8 = 10 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>k = 19\n<strong>输出：</strong>3 \n<strong>解释：</strong>对于 k = 19 ，我们可以得到 1 + 5 + 13 = 19 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10^9</code></li>\n</ul>\n","translatedTitle":"和为 K 的最少斐波那契数字数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int findMinFibonacciNumbers(int k) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int findMinFibonacciNumbers(int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def findMinFibonacciNumbers(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint findMinFibonacciNumbers(int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int FindMinFibonacciNumbers(int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} k\n * @return {number}\n */\nvar findMinFibonacciNumbers = function(k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} k\n# @return {Integer}\ndef find_min_fibonacci_numbers(k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func findMinFibonacciNumbers(_ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func findMinFibonacciNumbers(k int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def findMinFibonacciNumbers(k: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun findMinFibonacciNumbers(k: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn find_min_fibonacci_numbers(k: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function findMinFibonacciNumbers($k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function findMinFibonacciNumbers(k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (find-min-fibonacci-numbers k)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec find_min_fibonacci_numbers(K :: integer()) -> integer().\nfind_min_fibonacci_numbers(K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec find_min_fibonacci_numbers(k :: integer) :: integer\n  def find_min_fibonacci_numbers(k) do\n\n  end\nend"}]}