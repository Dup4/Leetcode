{"slug":"find-valid-matrix-given-row-and-column-sums","id":1711,"title":"Find Valid Matrix Given Row and Column Sums","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":38,"dislikes":0,"status":2,"tag":[{"name":"Greedy","slug":"greedy","translatedName":"贪心"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Matrix","slug":"matrix","translatedName":"矩阵"}],"totalAccepted":4049,"totalSubmission":5446,"hints":["Find the smallest rowSum or colSum, and let it be x. Place that number in the grid, and subtract x from rowSum and colSum. Continue until all the sums are satisfied."],"sampleTestCase":"[3,8]\n[4,7]","exampleTestcases":"[3,8]\n[4,7]\n[5,7,10]\n[8,6,8]","content":"<p>You are given two arrays <code>rowSum</code> and <code>colSum</code> of non-negative integers where <code>rowSum[i]</code> is the sum of the elements in the <code>i<sup>th</sup></code> row and <code>colSum[j]</code> is the sum of the elements of the <code>j<sup>th</sup></code> column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.</p>\n\n<p>Find any matrix of <strong>non-negative</strong> integers of size <code>rowSum.length x colSum.length</code> that satisfies the <code>rowSum</code> and <code>colSum</code> requirements.</p>\n\n<p>Return <em>a 2D array representing <strong>any</strong> matrix that fulfills the requirements</em>. It&#39;s guaranteed that <strong>at least one </strong>matrix that fulfills the requirements exists.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rowSum = [3,8], colSum = [4,7]\n<strong>Output:</strong> [[3,0],\n         [1,7]]\n<strong>Explanation:</strong> \n0<sup>th</sup> row: 3 + 0 = 3 == rowSum[0]\n1<sup>st</sup> row: 1 + 7 = 8 == rowSum[1]\n0<sup>th</sup> column: 3 + 1 = 4 == colSum[0]\n1<sup>st</sup> column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n                             [3,5]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rowSum = [5,7,10], colSum = [8,6,8]\n<strong>Output:</strong> [[0,5,0],\n         [6,1,0],\n         [2,0,8]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rowSum.length, colSum.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= rowSum[i], colSum[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>sum(rows) == sum(columns)</code></li>\n</ul>\n","translatedContent":"<p>给你两个非负整数数组 <code>rowSum</code> 和 <code>colSum</code> ，其中 <code>rowSum[i]</code> 是二维矩阵中第 <code>i</code> 行元素的和， <code>colSum[j]</code> 是第 <code>j</code> 列元素的和。换言之你不知道矩阵里的每个元素，但是你知道每一行和每一列的和。</p>\n\n<p>请找到大小为 <code>rowSum.length x colSum.length</code> 的任意 <strong>非负整数</strong> 矩阵，且该矩阵满足 <code>rowSum</code> 和 <code>colSum</code> 的要求。</p>\n\n<p>请你返回任意一个满足题目要求的二维矩阵，题目保证存在 <strong>至少一个</strong> 可行矩阵。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>rowSum = [3,8], colSum = [4,7]\n<strong>输出：</strong>[[3,0],\n      [1,7]]\n<strong>解释：</strong>\n第 0 行：3 + 0 = 3 == rowSum[0]\n第 1 行：1 + 7 = 8 == rowSum[1]\n第 0 列：3 + 1 = 4 == colSum[0]\n第 1 列：0 + 7 = 7 == colSum[1]\n行和列的和都满足题目要求，且所有矩阵元素都是非负的。\n另一个可行的矩阵为：[[1,2],\n                  [3,5]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>rowSum = [5,7,10], colSum = [8,6,8]\n<strong>输出：</strong>[[0,5,0],\n      [6,1,0],\n      [2,0,8]]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>rowSum = [14,9], colSum = [6,9,8]\n<strong>输出：</strong>[[0,9,5],\n      [6,0,3]]\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>rowSum = [1,0], colSum = [1]\n<strong>输出：</strong>[[1],\n      [0]]\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre>\n<strong>输入：</strong>rowSum = [0], colSum = [0]\n<strong>输出：</strong>[[0]]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= rowSum.length, colSum.length <= 500</code></li>\n\t<li><code>0 <= rowSum[i], colSum[i] <= 10<sup>8</sup></code></li>\n\t<li><code>sum(rows) == sum(columns)</code></li>\n</ul>\n","translatedTitle":"给定行和列的和求可行矩阵","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<vector<int>> restoreMatrix(vector<int>& rowSum, vector<int>& colSum) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int[][] restoreMatrix(int[] rowSum, int[] colSum) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def restoreMatrix(self, rowSum, colSum):\n        \"\"\"\n        :type rowSum: List[int]\n        :type colSum: List[int]\n        :rtype: List[List[int]]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** restoreMatrix(int* rowSum, int rowSumSize, int* colSum, int colSumSize, int* returnSize, int** returnColumnSizes){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int[][] RestoreMatrix(int[] rowSum, int[] colSum) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} rowSum\n * @param {number[]} colSum\n * @return {number[][]}\n */\nvar restoreMatrix = function(rowSum, colSum) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} row_sum\n# @param {Integer[]} col_sum\n# @return {Integer[][]}\ndef restore_matrix(row_sum, col_sum)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func restoreMatrix(_ rowSum: [Int], _ colSum: [Int]) -> [[Int]] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func restoreMatrix(rowSum []int, colSum []int) [][]int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def restoreMatrix(rowSum: Array[Int], colSum: Array[Int]): Array[Array[Int]] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun restoreMatrix(rowSum: IntArray, colSum: IntArray): Array<IntArray> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn restore_matrix(row_sum: Vec<i32>, col_sum: Vec<i32>) -> Vec<Vec<i32>> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $rowSum\n     * @param Integer[] $colSum\n     * @return Integer[][]\n     */\n    function restoreMatrix($rowSum, $colSum) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function restoreMatrix(rowSum: number[], colSum: number[]): number[][] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (restore-matrix rowSum colSum)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof (listof exact-integer?)))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec restore_matrix(RowSum :: [integer()], ColSum :: [integer()]) -> [[integer()]].\nrestore_matrix(RowSum, ColSum) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec restore_matrix(row_sum :: [integer], col_sum :: [integer]) :: [[integer]]\n  def restore_matrix(row_sum, col_sum) do\n\n  end\nend"}]}