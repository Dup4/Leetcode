{"slug":"subarray-with-elements-greater-than-varying-threshold","id":2419,"frontendId":6119,"title":"Subarray With Elements Greater Than Varying Threshold","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":3,"dislikes":0,"status":2,"tag":[],"totalAccepted":633,"totalSubmission":2088,"hints":["For all elements to be greater than the threshold/length, the minimum element in the subarray must be greater than the threshold/length.","For a given index, could you find the largest subarray such that the given index is the minimum element?","Could you use a monotonic stack to get the next and previous smallest element for every index?"],"sampleTestCase":"[1,3,4,3,1]\n6","exampleTestcases":"[1,3,4,3,1]\n6\n[6,5,6,5,8]\n7","content":"<p>You are given an integer array <code>nums</code> and an integer <code>threshold</code>.</p>\n\n<p>Find any subarray of <code>nums</code> of length <code>k</code> such that <strong>every</strong> element in the subarray is <strong>greater</strong> than <code>threshold / k</code>.</p>\n\n<p>Return<em> the <strong>size</strong> of <strong>any</strong> such subarray</em>. If there is no such subarray, return <code>-1</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,4,3,1], threshold = 6\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,5,6,5,8], threshold = 7\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The subarray [8] has a size of 1, and 8 &gt; 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], threshold &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>threshold</code>&nbsp;。</p>\n\n<p>找到长度为 <code>k</code>&nbsp;的&nbsp;<code>nums</code>&nbsp;子数组，满足数组中&nbsp;<strong>每个</strong>&nbsp;元素都 <strong>大于</strong>&nbsp;<code>threshold / k</code>&nbsp;。</p>\n\n<p>请你返回满足要求的 <strong>任意</strong>&nbsp;子数组的 <strong>大小</strong>&nbsp;。如果没有这样的子数组，返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p><strong>子数组</strong> 是数组中一段连续非空的元素序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [1,3,4,3,1], threshold = 6\n<b>输出：</b>3\n<b>解释：</b>子数组 [3,4,3] 大小为 3 ，每个元素都大于 6 / 3 = 2 。\n注意这是唯一合法的子数组。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [6,5,6,5,8], threshold = 7\n<b>输出：</b>1\n<b>解释：</b>子数组 [8] 大小为 1 ，且 8 &gt; 7 / 1 = 7 。所以返回 1 。\n注意子数组 [6,5] 大小为 2 ，每个元素都大于 7 / 2 = 3.5 。\n类似的，子数组 [6,5,6] ，[6,5,6,5] ，[6,5,6,5,8] 都是符合条件的子数组。\n所以返回 2, 3, 4 和 5 都可以。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], threshold &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"元素值大于变化阈值的子数组","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int validSubarraySize(vector<int>& nums, int threshold) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int validSubarraySize(int[] nums, int threshold) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def validSubarraySize(self, nums, threshold):\n        \"\"\"\n        :type nums: List[int]\n        :type threshold: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def validSubarraySize(self, nums: List[int], threshold: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint validSubarraySize(int* nums, int numsSize, int threshold){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int ValidSubarraySize(int[] nums, int threshold) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} threshold\n * @return {number}\n */\nvar validSubarraySize = function(nums, threshold) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} threshold\n# @return {Integer}\ndef valid_subarray_size(nums, threshold)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func validSubarraySize(_ nums: [Int], _ threshold: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func validSubarraySize(nums []int, threshold int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def validSubarraySize(nums: Array[Int], threshold: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun validSubarraySize(nums: IntArray, threshold: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn valid_subarray_size(nums: Vec<i32>, threshold: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function validSubarraySize($nums, $threshold) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function validSubarraySize(nums: number[], threshold: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (valid-subarray-size nums threshold)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec valid_subarray_size(Nums :: [integer()], Threshold :: integer()) -> integer().\nvalid_subarray_size(Nums, Threshold) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec valid_subarray_size(nums :: [integer], threshold :: integer) :: integer\n  def valid_subarray_size(nums, threshold) do\n\n  end\nend"}]}