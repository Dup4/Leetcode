{"slug":"best-poker-hand","id":2433,"frontendId":6128,"title":"Best Poker Hand","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3458,"totalSubmission":6927,"hints":["Sequentially check the conditions 1 through 4, and return the outcome corresponding to the first met condition."],"sampleTestCase":"[13,2,3,1,9]\n[\"a\",\"a\",\"a\",\"a\",\"a\"]","exampleTestcases":"[13,2,3,1,9]\n[\"a\",\"a\",\"a\",\"a\",\"a\"]\n[4,4,2,4,4]\n[\"d\",\"a\",\"a\",\"b\",\"c\"]\n[10,10,2,12,9]\n[\"a\",\"b\",\"c\",\"a\",\"d\"]","content":"<p>You are given an integer array <code>ranks</code> and a character array <code>suits</code>. You have <code>5</code> cards where the <code>i<sup>th</sup></code> card has a rank of <code>ranks[i]</code> and a suit of <code>suits[i]</code>.</p>\n\n<p>The following are the types of <strong>poker hands</strong> you can make from best to worst:</p>\n\n<ol>\n\t<li><code>&quot;Flush&quot;</code>: Five cards of the same suit.</li>\n\t<li><code>&quot;Three of a Kind&quot;</code>: Three cards of the same rank.</li>\n\t<li><code>&quot;Pair&quot;</code>: Two cards of the same rank.</li>\n\t<li><code>&quot;High Card&quot;</code>: Any single card.</li>\n</ol>\n\n<p>Return <em>a string representing the <strong>best</strong> type of <strong>poker hand</strong> you can make with the given cards.</em></p>\n\n<p><strong>Note</strong> that the return values are <strong>case-sensitive</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranks = [13,2,3,1,9], suits = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]\n<strong>Output:</strong> &quot;Flush&quot;\n<strong>Explanation:</strong> The hand with all the cards consists of 5 cards with the same suit, so we have a &quot;Flush&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranks = [4,4,2,4,4], suits = [&quot;d&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n<strong>Output:</strong> &quot;Three of a Kind&quot;\n<strong>Explanation:</strong> The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a &quot;Three of a Kind&quot;.\nNote that we could also make a &quot;Pair&quot; hand but &quot;Three of a Kind&quot; is a better hand.\nAlso note that other cards could be used to make the &quot;Three of a Kind&quot; hand.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranks = [10,10,2,12,9], suits = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;d&quot;]\n<strong>Output:</strong> &quot;Pair&quot;\n<strong>Explanation:</strong> The hand with the first and second card consists of 2 cards with the same rank, so we have a &quot;Pair&quot;.\nNote that we cannot make a &quot;Flush&quot; or a &quot;Three of a Kind&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>ranks.length == suits.length == 5</code></li>\n\t<li><code>1 &lt;= ranks[i] &lt;= 13</code></li>\n\t<li><code>&#39;a&#39; &lt;= suits[i] &lt;= &#39;d&#39;</code></li>\n\t<li>No two cards have the same rank and suit.</li>\n</ul>\n","translatedContent":"<p>给你一个整数数组&nbsp;<code>ranks</code>&nbsp;和一个字符数组&nbsp;<code>suit</code>&nbsp;。你有&nbsp;<code>5</code>&nbsp;张扑克牌，第&nbsp;<code>i</code>&nbsp;张牌大小为&nbsp;<code>ranks[i]</code>&nbsp;，花色为&nbsp;<code>suits[i]</code>&nbsp;。</p>\n\n<p>下述是从好到坏你可能持有的 <strong>手牌类型&nbsp;</strong>：</p>\n\n<ol>\n\t<li><code>\"Flush\"</code>：同花，五张相同花色的扑克牌。</li>\n\t<li><code>\"Three of a Kind\"</code>：三条，有 3 张大小相同的扑克牌。</li>\n\t<li><code>\"Pair\"</code>：对子，两张大小一样的扑克牌。</li>\n\t<li><code>\"High Card\"</code>：高牌，五张大小互不相同的扑克牌。</li>\n</ol>\n\n<p>请你返回一个字符串，表示给定的 5 张牌中，你能组成的 <strong>最好手牌类型</strong>&nbsp;。</p>\n\n<p><strong>注意：</strong>返回的字符串&nbsp;<strong>大小写</strong>&nbsp;需与题目描述相同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>ranks = [13,2,3,1,9], suits = [\"a\",\"a\",\"a\",\"a\",\"a\"]\n<b>输出：</b>\"Flush\"\n<b>解释：</b>5 张扑克牌的花色相同，所以返回 \"Flush\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>ranks = [4,4,2,4,4], suits = [\"d\",\"a\",\"a\",\"b\",\"c\"]\n<b>输出：</b>\"Three of a Kind\"\n<b>解释：</b>第一、二和四张牌组成三张相同大小的扑克牌，所以得到 \"Three of a Kind\" 。\n注意我们也可以得到 \"Pair\" ，但是 \"Three of a Kind\" 是更好的手牌类型。\n有其他的 3 张牌也可以组成 \"Three of a Kind\" 手牌类型。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>ranks = [10,10,2,12,9], suits = [\"a\",\"b\",\"c\",\"a\",\"d\"]\n<b>输出：</b>\"Pair\"\n<b>解释：</b>第一和第二张牌大小相同，所以得到 \"Pair\" 。\n我们无法得到 \"Flush\" 或者 \"Three of a Kind\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>ranks.length == suits.length == 5</code></li>\n\t<li><code>1 &lt;= ranks[i] &lt;= 13</code></li>\n\t<li><code>'a' &lt;= suits[i] &lt;= 'd'</code></li>\n\t<li>任意两张扑克牌不会同时有相同的大小和花色。</li>\n</ul>\n","translatedTitle":"最好的扑克手牌","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String bestHand(int[] ranks, char[] suits) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def bestHand(self, ranks, suits):\n        \"\"\"\n        :type ranks: List[int]\n        :type suits: List[str]\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def bestHand(self, ranks: List[int], suits: List[str]) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * bestHand(int* ranks, int ranksSize, char* suits, int suitsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string BestHand(int[] ranks, char[] suits) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} ranks\n * @param {character[]} suits\n * @return {string}\n */\nvar bestHand = function(ranks, suits) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} ranks\n# @param {Character[]} suits\n# @return {String}\ndef best_hand(ranks, suits)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func bestHand(_ ranks: [Int], _ suits: [Character]) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func bestHand(ranks []int, suits []byte) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def bestHand(ranks: Array[Int], suits: Array[Char]): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun bestHand(ranks: IntArray, suits: CharArray): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn best_hand(ranks: Vec<i32>, suits: Vec<char>) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $ranks\n     * @param String[] $suits\n     * @return String\n     */\n    function bestHand($ranks, $suits) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function bestHand(ranks: number[], suits: string[]): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (best-hand ranks suits)\n  (-> (listof exact-integer?) (listof char?) string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec best_hand(Ranks :: [integer()], Suits :: [char()]) -> unicode:unicode_binary().\nbest_hand(Ranks, Suits) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec best_hand(ranks :: [integer], suits :: [char]) :: String.t\n  def best_hand(ranks, suits) do\n\n  end\nend"}]}