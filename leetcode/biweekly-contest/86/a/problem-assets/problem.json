{"slug":"find-subarrays-with-equal-sum","id":2480,"frontendId":6171,"title":"Find Subarrays With Equal Sum","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3664,"totalSubmission":5217,"hints":["Use a counter to keep track of the subarray sums.","Use a hashset to check if any two sums are equal."],"sampleTestCase":"[4,2,4]","exampleTestcases":"[4,2,4]\n[1,2,3,4,5]\n[0,0,0]","content":"<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, determine whether there exist <strong>two</strong> subarrays of length <code>2</code> with <strong>equal</strong> sum. Note that the two subarrays must begin at <strong>different</strong> indices.</p>\n\n<p>Return <code>true</code><em> if these subarrays exist, and </em><code>false</code><em> otherwise.</em></p>\n\n<p>A <b>subarray</b> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The subarrays with elements [4,2] and [2,4] have the same sum of 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No two subarrays of size 2 have the same sum.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The subarrays [nums[0],nums[1]] and [nums[1],nums[2]] have the same sum of 0. \nNote that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，判断是否存在&nbsp;<strong>两个</strong>&nbsp;长度为&nbsp;<code>2</code>&nbsp;的子数组且它们的&nbsp;<strong>和</strong>&nbsp;相等。注意，这两个子数组起始位置的下标必须&nbsp;<strong>不相同</strong>&nbsp;。</p>\n\n<p>如果这样的子数组存在，请返回&nbsp;<code>true</code>，否则返回&nbsp;<code>false</code><em>&nbsp;</em>。</p>\n\n<p><strong>子数组</strong> 是一个数组中一段连续非空的元素组成的序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [4,2,4]\n<b>输出：</b>true\n<b>解释：</b>元素为 [4,2] 和 [2,4] 的子数组有相同的和 6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,2,3,4,5]\n<b>输出：</b>false\n<b>解释：</b>没有长度为 2 的两个子数组和相等。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [0,0,0]\n<b>输出：</b>true\n<b>解释：</b>子数组 [nums[0],nums[1]] 和 [nums[1],nums[2]] 的和相等，都为 0 。\n注意即使子数组的元素相同，这两个子数组也视为不相同的子数组，因为它们在原数组中的起始位置不同。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"和相等的子数组","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool findSubarrays(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean findSubarrays(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def findSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def findSubarrays(self, nums: List[int]) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool findSubarrays(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool FindSubarrays(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar findSubarrays = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef find_subarrays(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func findSubarrays(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func findSubarrays(nums []int) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def findSubarrays(nums: Array[Int]): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun findSubarrays(nums: IntArray): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn find_subarrays(nums: Vec<i32>) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function findSubarrays($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function findSubarrays(nums: number[]): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (find-subarrays nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec find_subarrays(Nums :: [integer()]) -> boolean().\nfind_subarrays(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec find_subarrays(nums :: [integer]) :: boolean\n  def find_subarrays(nums) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  bool findSubarrays(List<int> nums) {\n\n  }\n}"}]}