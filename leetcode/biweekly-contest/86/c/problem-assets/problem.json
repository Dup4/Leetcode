{"slug":"maximum-rows-covered-by-columns","id":2482,"frontendId":6173,"title":"Maximum Rows Covered by Columns","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":2147,"totalSubmission":5209,"hints":["Try a brute-force approach.","Iterate through all possible sets of exactly <code>cols</code> columns.","For each valid set, check how many rows are covered, and return the maximum."],"sampleTestCase":"[[0,0,0],[1,0,1],[0,1,1],[0,0,1]]\n2","exampleTestcases":"[[0,0,0],[1,0,1],[0,1,1],[0,0,1]]\n2\n[[1],[0]]\n1","content":"<p>You are given a <strong>0-indexed</strong> <code>m x n</code> binary matrix <code>mat</code> and an integer <code>cols</code>, which denotes the number of columns you must choose.</p>\n\n<p>A row is <strong>covered</strong> by a set of columns if each cell in the row that has a value of <code>1</code> also lies in one of the columns of the chosen set.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of rows that can be <strong>covered</strong> by a set of </em><code>cols</code><em> columns.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-07-14-rowscovered.png\" style=\"width: 250px; height: 417px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], cols = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nAs shown in the diagram above, one possible way of covering 3 rows is by selecting the 0th and 2nd columns.\nIt can be shown that no more than 3 rows can be covered, so we return 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-07-14-rowscovered2.png\" style=\"width: 83px; height: 247px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1],[0]], cols = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nSelecting the only column will result in both rows being covered, since the entire matrix is selected.\nTherefore, we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= cols &lt;= n</code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的&nbsp;<code>m x n</code>&nbsp;二进制矩阵&nbsp;<code>mat</code>&nbsp;和一个整数&nbsp;<code>cols</code>&nbsp;，表示你需要选出的列数。</p>\n\n<p>如果一行中，所有的 <code>1</code> 都被你选中的列所覆盖，那么我们称这一行 <strong>被覆盖</strong>&nbsp;了。</p>\n\n<p>请你返回在选择 <code>cols</code>&nbsp;列的情况下，<strong>被覆盖</strong>&nbsp;的行数 <strong>最大</strong>&nbsp;为多少。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-07-14-rowscovered.png\" style=\"width: 250px; height: 417px;\"></strong></p>\n\n<pre><b>输入：</b>mat = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], cols = 2\n<b>输出：</b>3\n<strong>解释：</strong>\n如上图所示，覆盖 3 行的一种可行办法是选择第 0 和第 2 列。\n可以看出，不存在大于 3 行被覆盖的方案，所以我们返回 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-07-14-rowscovered2.png\" style=\"width: 83px; height: 247px;\"></strong></p>\n\n<pre><b>输入：</b>mat = [[1],[0]], cols = 1\n<b>输出：</b>2\n<strong>解释：</strong>\n选择唯一的一列，两行都被覆盖了，原因是整个矩阵都被覆盖了。\n所以我们返回 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>mat[i][j]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;要么是&nbsp;<code>1</code>&nbsp;。</li>\n\t<li><code>1 &lt;= cols &lt;= n</code></li>\n</ul>\n","translatedTitle":"被列覆盖的最多行数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maximumRows(vector<vector<int>>& mat, int cols) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maximumRows(int[][] mat, int cols) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumRows(self, mat, cols):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type cols: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumRows(self, mat: List[List[int]], cols: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint maximumRows(int** mat, int matSize, int* matColSize, int cols){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaximumRows(int[][] mat, int cols) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} mat\n * @param {number} cols\n * @return {number}\n */\nvar maximumRows = function(mat, cols) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} mat\n# @param {Integer} cols\n# @return {Integer}\ndef maximum_rows(mat, cols)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumRows(_ mat: [[Int]], _ cols: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumRows(mat [][]int, cols int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumRows(mat: Array[Array[Int]], cols: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumRows(mat: Array<IntArray>, cols: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_rows(mat: Vec<Vec<i32>>, cols: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $cols\n     * @return Integer\n     */\n    function maximumRows($mat, $cols) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumRows(mat: number[][], cols: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-rows mat cols)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_rows(Mat :: [[integer()]], Cols :: integer()) -> integer().\nmaximum_rows(Mat, Cols) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_rows(mat :: [[integer]], cols :: integer) :: integer\n  def maximum_rows(mat, cols) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int maximumRows(List<List<int>> mat, int cols) {\n\n  }\n}"}]}