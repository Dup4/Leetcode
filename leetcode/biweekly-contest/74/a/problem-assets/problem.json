{"slug":"divide-array-into-equal-pairs","id":2308,"frontendId":6020,"title":"Divide Array Into Equal Pairs","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":0,"tag":[],"totalAccepted":4447,"totalSubmission":5845,"hints":["For any number x in the range [1, 500], count the number of elements in nums whose values are equal to x.","The elements with equal value can be divided completely into pairs if and only if their count is even."],"sampleTestCase":"[3,2,3,2,2,2]","exampleTestcases":"[3,2,3,2,2,2]\n[1,2,3,4]","content":"<p>You are given an integer array <code>nums</code> consisting of <code>2 * n</code> integers.</p>\n\n<p>You need to divide <code>nums</code> into <code>n</code> pairs such that:</p>\n\n<ul>\n\t<li>Each element belongs to <strong>exactly one</strong> pair.</li>\n\t<li>The elements present in a pair are <strong>equal</strong>.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if nums can be divided into</em> <code>n</code> <em>pairs, otherwise return</em> <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3,2,2,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nThere are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.\nIf nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \nThere is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 500</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;，它包含&nbsp;<code>2 * n</code>&nbsp;个整数。</p>\n\n<p>你需要将&nbsp;<code>nums</code> 划分成&nbsp;<code>n</code>&nbsp;个数对，满足：</p>\n\n<ul>\n\t<li>每个元素 <strong>只属于一个 </strong>数对。</li>\n\t<li>同一数对中的元素 <strong>相等</strong>&nbsp;。</li>\n</ul>\n\n<p>如果可以将 <code>nums</code>&nbsp;划分成 <code>n</code>&nbsp;个数对，请你返回 <code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [3,2,3,2,2,2]\n<b>输出：</b>true\n<b>解释：</b>\nnums<code>&nbsp;中总共有 6 个元素，所以它们应该被划分成</code> 6 / 2 = 3 个数对。\nnums 可以划分成 (2, 2) ，(3, 3) 和 (2, 2) ，满足所有要求。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [1,2,3,4]\n<b>输出：</b>false\n<b>解释：</b>\n无法将 nums 划分成 4 / 2 = 2 个数对且满足所有要求。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 500</code></li>\n</ul>\n","translatedTitle":"将数组划分成相等数对","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool divideArray(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean divideArray(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def divideArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def divideArray(self, nums: List[int]) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool divideArray(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool DivideArray(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar divideArray = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Boolean}\ndef divide_array(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func divideArray(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func divideArray(nums []int) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def divideArray(nums: Array[Int]): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun divideArray(nums: IntArray): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn divide_array(nums: Vec<i32>) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function divideArray($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function divideArray(nums: number[]): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (divide-array nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec divide_array(Nums :: [integer()]) -> boolean().\ndivide_array(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec divide_array(nums :: [integer]) :: boolean\n  def divide_array(nums) do\n\n  end\nend"}]}