{"slug":"maximize-number-of-subsequences-in-a-string","id":2309,"frontendId":6021,"title":"Maximize Number of Subsequences in a String","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":3389,"totalSubmission":13238,"hints":["Find the optimal position to add pattern[0] so that the number of subsequences is maximized. Similarly, find the optimal position to add pattern[1].","For each of the above cases, count the number of times the pattern occurs as a subsequence in text. The larger count is the required answer."],"sampleTestCase":"\"abdcdbc\"\n\"ac\"","exampleTestcases":"\"abdcdbc\"\n\"ac\"\n\"aabb\"\n\"ab\"","content":"<p>You are given a <strong>0-indexed</strong> string <code>text</code> and another <strong>0-indexed</strong> string <code>pattern</code> of length <code>2</code>, both of which consist of only lowercase English letters.</p>\n\n<p>You can add <strong>either</strong> <code>pattern[0]</code> <strong>or</strong> <code>pattern[1]</code> anywhere in <code>text</code> <strong>exactly once</strong>. Note that the character can be added even at the beginning or at the end of <code>text</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of times</em> <code>pattern</code> <em>can occur as a <strong>subsequence</strong> of the modified </em><code>text</code>.</p>\n\n<p>A <b>subsequence</b> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;abdcdbc&quot;, pattern = &quot;ac&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nIf we add pattern[0] = &#39;a&#39; in between text[1] and text[2], we get &quot;ab<u><strong>a</strong></u>dcdbc&quot;. Now, the number of times &quot;ac&quot; occurs as a subsequence is 4.\nSome other strings which have 4 subsequences &quot;ac&quot; after adding a character to text are &quot;<u><strong>a</strong></u>abdcdbc&quot; and &quot;abd<u><strong>a</strong></u>cdbc&quot;.\nHowever, strings such as &quot;abdc<u><strong>a</strong></u>dbc&quot;, &quot;abd<u><strong>c</strong></u>cdbc&quot;, and &quot;abdcdbc<u><strong>c</strong></u>&quot;, although obtainable, have only 3 subsequences &quot;ac&quot; and are thus suboptimal.\nIt can be shown that it is not possible to get more than 4 subsequences &quot;ac&quot; by adding only one character.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;aabb&quot;, pattern = &quot;ab&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nSome of the strings which can be obtained from text and have 6 subsequences &quot;ab&quot; are &quot;<u><strong>a</strong></u>aabb&quot;, &quot;aa<u><strong>a</strong></u>bb&quot;, and &quot;aab<u><strong>b</strong></u>b&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pattern.length == 2</code></li>\n\t<li><code>text</code> and <code>pattern</code> consist only of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的字符串&nbsp;<code>text</code>&nbsp;和另一个下标从 <strong>0</strong>&nbsp;开始且长度为 <code>2</code>&nbsp;的字符串&nbsp;<code>pattern</code>&nbsp;，两者都只包含小写英文字母。</p>\n\n<p>你可以在 <code>text</code>&nbsp;中任意位置插入 <strong>一个</strong> 字符，这个插入的字符必须是&nbsp;<code>pattern[0]</code>&nbsp;<b>或者</b>&nbsp;<code>pattern[1]</code>&nbsp;。注意，这个字符可以插入在 <code>text</code>&nbsp;开头或者结尾的位置。</p>\n\n<p>请你返回插入一个字符后，<code>text</code>&nbsp;中最多包含多少个等于 <code>pattern</code>&nbsp;的 <strong>子序列</strong>&nbsp;。</p>\n\n<p><strong>子序列</strong> 指的是将一个字符串删除若干个字符后（也可以不删除），剩余字符保持原本顺序得到的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>text = \"abdcdbc\", pattern = \"ac\"\n<b>输出：</b>4\n<strong>解释：</strong>\n如果我们在 text[1] 和 text[2] 之间添加 pattern[0] = 'a' ，那么我们得到 \"ab<em><strong>a</strong></em>dcdbc\" 。那么 \"ac\" 作为子序列出现 4 次。\n其他得到 4 个 \"ac\" 子序列的方案还有 \"<em><strong>a</strong></em>abdcdbc\" 和 \"abd<em><strong>a</strong></em>cdbc\" 。\n但是，\"abdc<em><strong>a</strong></em>dbc\" ，\"abd<em><strong>c</strong></em>cdbc\" 和 \"abdcdbc<em><strong>c</strong></em>\" 这些字符串虽然是可行的插入方案，但是只出现了 3 次 \"ac\" 子序列，所以不是最优解。\n可以证明插入一个字符后，无法得到超过 4 个 \"ac\" 子序列。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>text = \"aabb\", pattern = \"ab\"\n<b>输出：</b>6\n<strong>解释：</strong>\n可以得到 6 个 \"ab\" 子序列的部分方案为 \"<em><strong>a</strong></em>aabb\" ，\"aa<em><strong>a</strong></em>bb\" 和 \"aab<em><strong>b</strong></em>b\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pattern.length == 2</code></li>\n\t<li><code>text</code> 和&nbsp;<code>pattern</code>&nbsp;都只包含小写英文字母。</li>\n</ul>\n","translatedTitle":"字符串中最多数目的子字符串","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long maximumSubsequenceCount(string text, string pattern) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long maximumSubsequenceCount(String text, String pattern) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumSubsequenceCount(self, text, pattern):\n        \"\"\"\n        :type text: str\n        :type pattern: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long maximumSubsequenceCount(char * text, char * pattern){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long MaximumSubsequenceCount(string text, string pattern) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} text\n * @param {string} pattern\n * @return {number}\n */\nvar maximumSubsequenceCount = function(text, pattern) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} text\n# @param {String} pattern\n# @return {Integer}\ndef maximum_subsequence_count(text, pattern)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumSubsequenceCount(_ text: String, _ pattern: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumSubsequenceCount(text string, pattern string) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumSubsequenceCount(text: String, pattern: String): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumSubsequenceCount(text: String, pattern: String): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_subsequence_count(text: String, pattern: String) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $text\n     * @param String $pattern\n     * @return Integer\n     */\n    function maximumSubsequenceCount($text, $pattern) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumSubsequenceCount(text: string, pattern: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-subsequence-count text pattern)\n  (-> string? string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_subsequence_count(Text :: unicode:unicode_binary(), Pattern :: unicode:unicode_binary()) -> integer().\nmaximum_subsequence_count(Text, Pattern) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_subsequence_count(text :: String.t, pattern :: String.t) :: integer\n  def maximum_subsequence_count(text, pattern) do\n\n  end\nend"}]}