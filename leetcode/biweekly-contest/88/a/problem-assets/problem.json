{"slug":"remove-letter-to-equalize-frequency","id":2532,"frontendId":6212,"title":"Remove Letter To Equalize Frequency","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2312,"totalSubmission":13622,"hints":["Brute force all letters that could be removed.","Use a frequency array of size 26."],"sampleTestCase":"\"abcc\"","exampleTestcases":"\"abcc\"\n\"aazz\"","content":"<p>You are given a <strong>0-indexed</strong> string <code>word</code>, consisting of lowercase English letters. You need to select <strong>one</strong> index and <strong>remove</strong> the letter at that index from <code>word</code> so that the <strong>frequency</strong> of every letter present in <code>word</code> is equal.</p>\n\n<p>Return<em> </em><code>true</code><em> if it is possible to remove one letter so that the frequency of all letters in </em><code>word</code><em> are equal, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The <b>frequency</b> of a letter <code>x</code> is the number of times it occurs in the string.</li>\n\t<li>You <strong>must</strong> remove exactly one letter and cannot chose to do nothing.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Select index 3 and delete it: word becomes &quot;abc&quot; and each character has a frequency of 1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;aazz&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We must delete a character, so either the frequency of &quot;a&quot; is 1 and the frequency of &quot;z&quot; is 2, or vice versa. It is impossible to make all present letters have equal frequency.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code> consists of lowercase English letters only.</li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的字符串&nbsp;<code>word</code>&nbsp;，字符串只包含小写英文字母。你需要选择 <strong>一个</strong>&nbsp;下标并 <strong>删除</strong>&nbsp;下标处的字符，使得 <code>word</code>&nbsp;中剩余每个字母出现 <strong>频率</strong>&nbsp;相同。</p>\n\n<p>如果删除一个字母后，<code>word</code>&nbsp;中剩余所有字母的出现频率都相同，那么返回 <code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>字母&nbsp;<code>x</code>&nbsp;的 <strong>频率</strong><strong>&nbsp;</strong>是这个字母在字符串中出现的次数。</li>\n\t<li>你 <strong>必须</strong>&nbsp;恰好删除一个字母，不能一个字母都不删除。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>word = \"abcc\"\n<b>输出：</b>true\n<b>解释：</b>选择下标 3 并删除该字母，word 变成 \"abc\" 且每个字母出现频率都为 1 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>word = \"aazz\"\n<b>输出：</b>false\n<b>解释：</b>我们必须删除一个字母，所以要么 \"a\" 的频率变为 1 且 \"z\" 的频率为 2 ，要么两个字母频率反过来。所以不可能让剩余所有字母出现频率相同。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n","translatedTitle":"删除字符使频率相同","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool equalFrequency(string word) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean equalFrequency(String word) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def equalFrequency(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def equalFrequency(self, word: str) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool equalFrequency(char * word){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool EqualFrequency(string word) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} word\n * @return {boolean}\n */\nvar equalFrequency = function(word) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} word\n# @return {Boolean}\ndef equal_frequency(word)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func equalFrequency(_ word: String) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func equalFrequency(word string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def equalFrequency(word: String): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun equalFrequency(word: String): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn equal_frequency(word: String) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function equalFrequency($word) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function equalFrequency(word: string): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (equal-frequency word)\n  (-> string? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec equal_frequency(Word :: unicode:unicode_binary()) -> boolean().\nequal_frequency(Word) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec equal_frequency(word :: String.t) :: boolean\n  def equal_frequency(word) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  bool equalFrequency(String word) {\n\n  }\n}"}]}