{"slug":"bitwise-xor-of-all-pairings","id":2533,"frontendId":6213,"title":"Bitwise XOR of All Pairings","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2022,"totalSubmission":3487,"hints":["Think how the count of each individual integer affects the final answer.","If the length of nums1 is m and the length of nums2 is n, then each number in nums1 is repeated n times and each number in nums2 is repeated m times."],"sampleTestCase":"[2,1,3]\n[10,2,5,0]","exampleTestcases":"[2,1,3]\n[10,2,5,0]\n[1,2]\n[3,4]","content":"<p>You are given two <strong>0-indexed</strong> arrays, <code>nums1</code> and <code>nums2</code>, consisting of non-negative integers. There exists another array, <code>nums3</code>, which contains the bitwise XOR of <strong>all pairings</strong> of integers between <code>nums1</code> and <code>nums2</code> (every integer in <code>nums1</code> is paired with every integer in <code>nums2</code> <strong>exactly once</strong>).</p>\n\n<p>Return<em> the <strong>bitwise XOR</strong> of all integers in </em><code>nums3</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,1,3], nums2 = [10,2,5,0]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong>\nA possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].\nThe bitwise XOR of all these numbers is 13, so we return 13.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nAll possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],\nand nums1[1] ^ nums2[1].\nThus, one possible nums3 array is [2,5,1,6].\n2 ^ 5 ^ 1 ^ 6 = 0, so we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你两个下标从 <strong>0</strong>&nbsp;开始的数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，两个数组都只包含非负整数。请你求出另外一个数组&nbsp;<code>nums3</code>&nbsp;，包含 <code>nums1</code>&nbsp;和 <code>nums2</code>&nbsp;中 <strong>所有数对</strong>&nbsp;的异或和（<code>nums1</code>&nbsp;中每个整数都跟 <code>nums2</code>&nbsp;中每个整数 <strong>恰好</strong>&nbsp;匹配一次）。</p>\n\n<p>请你返回 <code>nums3</code>&nbsp;中所有整数的 <strong>异或和</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums1 = [2,1,3], nums2 = [10,2,5,0]\n<b>输出：</b>13\n<strong>解释：</strong>\n一个可能的 nums3 数组是 [8,0,7,2,11,3,4,1,9,1,6,3] 。\n所有这些数字的异或和是 13 ，所以我们返回 13 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums1 = [1,2], nums2 = [3,4]\n<b>输出：</b>0\n<strong>解释：</strong>\n所有数对异或和的结果分别为 nums1[0] ^ nums2[0] ，nums1[0] ^ nums2[1] ，nums1[1] ^ nums2[0] 和 nums1[1] ^ nums2[1] 。\n所以，一个可能的 nums3 数组是 [2,5,1,6] 。\n2 ^ 5 ^ 1 ^ 6 = 0 ，所以我们返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"所有数对的异或和","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int xorAllNums(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int xorAllNums(int[] nums1, int[] nums2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def xorAllNums(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint xorAllNums(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int XorAllNums(int[] nums1, int[] nums2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar xorAllNums = function(nums1, nums2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef xor_all_nums(nums1, nums2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func xorAllNums(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func xorAllNums(nums1 []int, nums2 []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def xorAllNums(nums1: Array[Int], nums2: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun xorAllNums(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn xor_all_nums(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function xorAllNums($nums1, $nums2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function xorAllNums(nums1: number[], nums2: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (xor-all-nums nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec xor_all_nums(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nxor_all_nums(Nums1, Nums2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec xor_all_nums(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def xor_all_nums(nums1, nums2) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int xorAllNums(List<int> nums1, List<int> nums2) {\n\n  }\n}"}]}