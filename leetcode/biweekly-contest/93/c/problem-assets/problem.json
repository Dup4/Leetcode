{"slug":"frog-jump-ii","id":2591,"frontendId":6263,"title":"Frog Jump II","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":3,"dislikes":0,"status":2,"tag":[],"totalAccepted":1458,"totalSubmission":2585,"hints":["One of the optimal strategies will be to jump to every stone.","Skipping just one stone in every forward jump and jumping to those skipped stones in backward jump can minimize the maximum jump."],"sampleTestCase":"[0,2,5,6,7]","exampleTestcases":"[0,2,5,6,7]\n[0,3,9]","content":"<p>You are given a <strong>0-indexed</strong> integer array <code>stones</code> sorted in <strong>strictly increasing order</strong> representing the positions of stones in a river.</p>\n\n<p>A frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone <strong>at most once</strong>.</p>\n\n<p>The <strong>length</strong> of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.</p>\n\n<ul>\n\t<li>More formally, if the frog is at <code>stones[i]</code> and is jumping to <code>stones[j]</code>, the length of the jump is <code>|stones[i] - stones[j]|</code>.</li>\n</ul>\n\n<p>The <strong>cost</strong> of a path is the <strong>maximum length of a jump</strong> among all jumps in the path.</p>\n\n<p>Return <em>the <strong>minimum</strong> cost of a path for the frog</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-11-14-example-1.png\" style=\"width: 600px; height: 219px;\" />\n<pre>\n<strong>Input:</strong> stones = [0,2,5,6,7]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The above figure represents one of the optimal paths the frog can take.\nThe cost of this path is 5, which is the maximum length of a jump.\nSince it is not possible to achieve a cost of less than 5, we return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-11-14-example-2.png\" style=\"width: 500px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> stones = [0,3,9]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> \nThe frog can jump directly to the last stone and come back to the first stone. \nIn this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9.\nIt can be shown that this is the minimum achievable cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= stones.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= stones[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>stones[0] == 0</code></li>\n\t<li><code>stones</code> is sorted in a strictly increasing order.</li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>stones</code>&nbsp;，数组中的元素&nbsp;<strong>严格递增</strong>&nbsp;，表示一条河中石头的位置。</p>\n\n<p>一只青蛙一开始在第一块石头上，它想到达最后一块石头，然后回到第一块石头。同时每块石头 <strong>至多</strong> 到达 <strong>一次。</strong></p>\n\n<p>一次跳跃的 <strong>长度</strong>&nbsp;是青蛙跳跃前和跳跃后所在两块石头之间的距离。</p>\n\n<ul>\n\t<li>更正式的，如果青蛙从&nbsp;<code>stones[i]</code>&nbsp;跳到&nbsp;<code>stones[j]</code>&nbsp;，跳跃的长度为&nbsp;<code>|stones[i] - stones[j]|</code>&nbsp;。</li>\n</ul>\n\n<p>一条路径的 <b>代价</b>&nbsp;是这条路径里的&nbsp;<b>最大跳跃长度</b>&nbsp;。</p>\n\n<p>请你返回这只青蛙的 <strong>最小代价</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-11-14-example-1.png\" style=\"width: 600px; height: 219px;\" /></p>\n\n<pre>\n<b>输入：</b>stones = [0,2,5,6,7]\n<b>输出：</b>5\n<b>解释：</b>上图展示了一条最优路径。\n这条路径的代价是 5 ，是这条路径中的最大跳跃长度。\n无法得到一条代价小于 5 的路径，我们返回 5 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-11-14-example-2.png\" style=\"width: 500px; height: 171px;\" /></p>\n\n<pre>\n<b>输入：</b>stones = [0,3,9]\n<b>输出：</b>9\n<b>解释：</b>\n青蛙可以直接跳到最后一块石头，然后跳回第一块石头。\n在这条路径中，每次跳跃长度都是 9 。所以路径代价是 max(9, 9) = 9 。\n这是可行路径中的最小代价。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= stones.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= stones[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>stones[0] == 0</code></li>\n\t<li><code>stones</code>&nbsp;中的元素严格递增。</li>\n</ul>\n","translatedTitle":"青蛙过河 II","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maxJump(vector<int>& stones) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maxJump(int[] stones) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maxJump(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maxJump(self, stones: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"int maxJump(int* stones, int stonesSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaxJump(int[] stones) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} stones\n * @return {number}\n */\nvar maxJump = function(stones) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} stones\n# @return {Integer}\ndef max_jump(stones)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maxJump(_ stones: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maxJump(stones []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maxJump(stones: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maxJump(stones: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn max_jump(stones: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $stones\n     * @return Integer\n     */\n    function maxJump($stones) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maxJump(stones: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (max-jump stones)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec max_jump(Stones :: [integer()]) -> integer().\nmax_jump(Stones) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec max_jump(stones :: [integer]) :: integer\n  def max_jump(stones) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int maxJump(List<int> stones) {\n\n  }\n}"}]}