{"slug":"number-of-ways-to-divide-a-long-corridor","id":2251,"title":"Number of Ways to Divide a Long Corridor","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":7,"dislikes":0,"status":0,"tag":[{"name":"Math","slug":"math","translatedName":"数学"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":2354,"totalSubmission":5969,"hints":["Divide the corridor into segments. Each segment has two seats, starts precisely with one seat, and ends precisely with the other seat.","How many dividers can you install between two adjacent segments? You must install precisely one. Otherwise, you would have created a section with not exactly two seats.","If there are k plants between two adjacent segments, there are k + 1 positions (ways) you could install the divider you must install.","The problem now becomes: Find the product of all possible positions between every two adjacent segments."],"sampleTestCase":"\"SSPPSPS\"","exampleTestcases":"\"SSPPSPS\"\n\"PPSPSP\"\n\"S\"","content":"<p>Along a long library corridor, there is a line of seats and decorative plants. You are given a <strong>0-indexed</strong> string <code>corridor</code> of length <code>n</code> consisting of letters <code>&#39;S&#39;</code> and <code>&#39;P&#39;</code> where each <code>&#39;S&#39;</code> represents a seat and each <code>&#39;P&#39;</code> represents a plant.</p>\n\n<p>One room divider has <strong>already</strong> been installed to the left of index <code>0</code>, and <strong>another</strong> to the right of index <code>n - 1</code>. Additional room dividers can be installed. For each position between indices <code>i - 1</code> and <code>i</code> (<code>1 &lt;= i &lt;= n - 1</code>), at most one divider can be installed.</p>\n\n<p>Divide the corridor into non-overlapping sections, where each section has <strong>exactly two seats</strong> with any number of plants. There may be multiple ways to perform the division. Two ways are <strong>different</strong> if there is a position with a room divider installed in the first way but not in the second way.</p>\n\n<p>Return <em>the number of ways to divide the corridor</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>. If there is no way, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-04-1.png\" style=\"width: 410px; height: 199px;\" />\n<pre>\n<strong>Input:</strong> corridor = &quot;SSPPSPS&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, <strong>each</strong> section has exactly <strong>two</strong> seats.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-04-2.png\" style=\"width: 357px; height: 68px;\" />\n<pre>\n<strong>Input:</strong> corridor = &quot;PPSPSP&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-12-3.png\" style=\"width: 115px; height: 68px;\" />\n<pre>\n<strong>Input:</strong> corridor = &quot;S&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no way to divide the corridor because there will always be a section that does not have exactly two seats.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == corridor.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>corridor[i]</code> is either <code>&#39;S&#39;</code> or <code>&#39;P&#39;</code>.</li>\n</ul>\n","translatedContent":"<p>在一个图书馆的长廊里，有一些座位和装饰植物排成一列。给你一个下标从 <strong>0</strong>&nbsp;开始，长度为 <code>n</code>&nbsp;的字符串&nbsp;<code>corridor</code>&nbsp;，它包含字母&nbsp;<code>'S'</code> 和&nbsp;<code>'P'</code>&nbsp;，其中每个&nbsp;<code>'S'</code>&nbsp;表示一个座位，每个&nbsp;<code>'P'</code>&nbsp;表示一株植物。</p>\n\n<p>在下标 <code>0</code>&nbsp;的左边和下标 <code>n - 1</code>&nbsp;的右边 <strong>已经</strong>&nbsp;分别各放了一个屏风。你还需要额外放置一些屏风。每一个位置&nbsp;<code>i - 1</code> 和&nbsp;<code>i</code>&nbsp;之间（<code>1 &lt;= i &lt;= n - 1</code>），至多能放一个屏风。</p>\n\n<p>请你将走廊用屏风划分为若干段，且每一段内都 <strong>恰好有两个座位</strong>&nbsp;，而每一段内植物的数目没有要求。可能有多种划分方案，如果两个方案中有任何一个屏风的位置不同，那么它们被视为 <strong>不同</strong> 方案。</p>\n\n<p>请你返回划分走廊的方案数。由于答案可能很大，请你返回它对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;的结果。如果没有任何方案，请返回&nbsp;<code>0</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-04-1.png\" style=\"width: 410px; height: 199px;\"></p>\n\n<pre><b>输入：</b>corridor = \"SSPPSPS\"\n<b>输出：</b>3\n<b>解释：</b>总共有 3 种不同分隔走廊的方案。\n上图中黑色的竖线表示已经放置好的屏风。\n上图每种方案中，每一段都恰好有 <strong>两个</strong>&nbsp;座位。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-04-2.png\" style=\"width: 357px; height: 68px;\"></p>\n\n<pre><b>输入：</b>corridor = \"PPSPSP\"\n<b>输出：</b>1\n<b>解释：</b>只有 1 种分隔走廊的方案，就是不放置任何屏风。\n放置任何的屏风都会导致有一段无法恰好有 2 个座位。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-12-3.png\" style=\"width: 115px; height: 68px;\"></p>\n\n<pre><b>输入：</b>corridor = \"S\"\n<b>输出：</b>0\n<b>解释：</b>没有任何方案，因为总是有一段无法恰好有 2 个座位。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == corridor.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>corridor[i]</code>&nbsp;要么是&nbsp;<code>'S'</code>&nbsp;，要么是&nbsp;<code>'P'</code> 。</li>\n</ul>\n","translatedTitle":"分隔长廊的方案数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int numberOfWays(string corridor) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int numberOfWays(String corridor) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def numberOfWays(self, corridor):\n        \"\"\"\n        :type corridor: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def numberOfWays(self, corridor: str) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint numberOfWays(char * corridor){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int NumberOfWays(string corridor) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} corridor\n * @return {number}\n */\nvar numberOfWays = function(corridor) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} corridor\n# @return {Integer}\ndef number_of_ways(corridor)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func numberOfWays(_ corridor: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func numberOfWays(corridor string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def numberOfWays(corridor: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun numberOfWays(corridor: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn number_of_ways(corridor: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $corridor\n     * @return Integer\n     */\n    function numberOfWays($corridor) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function numberOfWays(corridor: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (number-of-ways corridor)\n  (-> string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec number_of_ways(Corridor :: unicode:unicode_binary()) -> integer().\nnumber_of_ways(Corridor) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec number_of_ways(corridor :: String.t) :: integer\n  def number_of_ways(corridor) do\n\n  end\nend"}]}