{"slug":"keep-multiplying-found-values-by-two","id":2274,"title":"Keep Multiplying Found Values by Two","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":4,"dislikes":0,"status":0,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Hash Table","slug":"hash-table","translatedName":"哈希表"},{"name":"Sorting","slug":"sorting","translatedName":"排序"},{"name":"Simulation","slug":"simulation","translatedName":"模拟"}],"totalAccepted":6189,"totalSubmission":8156,"hints":["Repeatedly iterate through the array and check if the current value of original is in the array.","If original is not found, stop and return its current value.","Otherwise, multiply original by 2 and repeat the process.","Use set data structure to check the existence faster."],"sampleTestCase":"[5,3,6,1,12]\n3","exampleTestcases":"[5,3,6,1,12]\n3\n[2,7,9]\n4","content":"<p>You are given an array of integers <code>nums</code>. You are also given an integer <code>original</code> which is the first number that needs to be searched for in <code>nums</code>.</p>\n\n<p>You then do the following steps:</p>\n\n<ol>\n\t<li>If <code>original</code> is found in <code>nums</code>, <strong>multiply</strong> it by two (i.e., set <code>original = 2 * original</code>).</li>\n\t<li>Otherwise, <strong>stop</strong> the process.</li>\n\t<li><strong>Repeat</strong> this process with the new number as long as you keep finding the number.</li>\n</ol>\n\n<p>Return <em>the <strong>final</strong> value of </em><code>original</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,3,6,1,12], original = 3\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,9], original = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n- 4 is not found in nums. Thus, 4 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], original &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> ，另给你一个整数 <code>original</code> ，这是需要在 <code>nums</code> 中搜索的第一个数字。</p>\n\n<p>接下来，你需要按下述步骤操作：</p>\n\n<ol>\n\t<li>如果在 <code>nums</code> 中找到 <code>original</code> ，将 <code>original</code>&nbsp;<strong>乘以</strong> 2 ，得到新 <code>original</code>（即，令 <code>original = 2 * original</code>）。</li>\n\t<li>否则，停止这一过程。</li>\n\t<li>只要能在数组中找到新 <code>original</code> ，就对新 <code>original</code> 继续 <strong>重复</strong> 这一过程<strong>。</strong></li>\n</ol>\n\n<p>返回<em> </em><code>original</code> 的 <strong>最终</strong> 值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [5,3,6,1,12], original = 3\n<strong>输出：</strong>24\n<strong>解释：</strong> \n- 3 能在 nums 中找到。3 * 2 = 6 。\n- 6 能在 nums 中找到。6 * 2 = 12 。\n- 12 能在 nums 中找到。12 * 2 = 24 。\n- 24 不能在 nums 中找到。因此，返回 24 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,7,9], original = 4\n<strong>输出：</strong>4\n<strong>解释：</strong>\n- 4 不能在 nums 中找到。因此，返回 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], original &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"将找到的值乘以 2","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int findFinalValue(vector<int>& nums, int original) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int findFinalValue(int[] nums, int original) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def findFinalValue(self, nums, original):\n        \"\"\"\n        :type nums: List[int]\n        :type original: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def findFinalValue(self, nums: List[int], original: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint findFinalValue(int* nums, int numsSize, int original){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int FindFinalValue(int[] nums, int original) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} original\n * @return {number}\n */\nvar findFinalValue = function(nums, original) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} original\n# @return {Integer}\ndef find_final_value(nums, original)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func findFinalValue(_ nums: [Int], _ original: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func findFinalValue(nums []int, original int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def findFinalValue(nums: Array[Int], original: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun findFinalValue(nums: IntArray, original: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn find_final_value(nums: Vec<i32>, original: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $original\n     * @return Integer\n     */\n    function findFinalValue($nums, $original) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function findFinalValue(nums: number[], original: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (find-final-value nums original)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec find_final_value(Nums :: [integer()], Original :: integer()) -> integer().\nfind_final_value(Nums, Original) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec find_final_value(nums :: [integer], original :: integer) :: integer\n  def find_final_value(nums, original) do\n\n  end\nend"}]}