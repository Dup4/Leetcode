{"slug":"find-players-with-zero-or-one-losses","id":1354,"frontendId":5235,"title":"Find Players With Zero or One Losses","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":3,"dislikes":0,"status":0,"tag":[{"name":"Graph","slug":"graph","translatedName":"图"}],"totalAccepted":6483,"totalSubmission":10395,"hints":["Count the number of times a player loses while iterating through the matches."],"sampleTestCase":"[[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]","exampleTestcases":"[[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\n[[2,3],[1,3],[5,4],[6,4]]","content":"<p>You are given an integer array <code>matches</code> where <code>matches[i] = [winner<sub>i</sub>, loser<sub>i</sub>]</code> indicates that the player <code>winner<sub>i</sub></code> defeated player <code>loser<sub>i</sub></code> in a match.</p>\n\n<p>Return <em>a list </em><code>answer</code><em> of size </em><code>2</code><em> where:</em></p>\n\n<ul>\n\t<li><code>answer[0]</code> is a list of all players that have <strong>not</strong> lost any matches.</li>\n\t<li><code>answer[1]</code> is a list of all players that have lost exactly <strong>one</strong> match.</li>\n</ul>\n\n<p>The values in the two lists should be returned in <strong>increasing</strong> order.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>You should only consider the players that have played <strong>at least one</strong> match.</li>\n\t<li>The testcases will be generated such that <strong>no</strong> two matches will have the <strong>same</strong> outcome.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\n<strong>Output:</strong> [[1,2,10],[4,5,7,8]]\n<strong>Explanation:</strong>\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matches = [[2,3],[1,3],[5,4],[6,4]]\n<strong>Output:</strong> [[1,2,5,6],[]]\n<strong>Explanation:</strong>\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer[0] = [1,2,5,6] and answer[1] = [].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matches.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>matches[i].length == 2</code></li>\n\t<li><code>1 &lt;= winner<sub>i</sub>, loser<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>winner<sub>i</sub> != loser<sub>i</sub></code></li>\n\t<li>All <code>matches[i]</code> are <strong>unique</strong>.</li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>matches</code> 其中 <code>matches[i] = [winner<sub>i</sub>, loser<sub>i</sub>]</code> 表示在一场比赛中 <code>winner<sub>i</sub></code> 击败了 <code>loser<sub>i</sub></code> 。</p>\n\n<p>返回一个长度为 2 的列表<em> </em><code>answer</code> ：</p>\n\n<ul>\n\t<li><code>answer[0]</code> 是所有 <strong>没有</strong> 输掉任何比赛的玩家列表。</li>\n\t<li><code>answer[1]</code> 是所有恰好输掉 <strong>一场</strong> 比赛的玩家列表。</li>\n</ul>\n\n<p>两个列表中的值都应该按 <strong>递增</strong> 顺序返回。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>只考虑那些参与 <strong>至少一场</strong> 比赛的玩家。</li>\n\t<li>生成的测试用例保证 <strong>不存在</strong> 两场比赛结果 <strong>相同</strong> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\n<strong>输出：</strong>[[1,2,10],[4,5,7,8]]\n<strong>解释：</strong>\n玩家 1、2 和 10 都没有输掉任何比赛。\n玩家 4、5、7 和 8 每个都输掉一场比赛。\n玩家 3、6 和 9 每个都输掉两场比赛。\n因此，answer[0] = [1,2,10] 和 answer[1] = [4,5,7,8] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>matches = [[2,3],[1,3],[5,4],[6,4]]\n<strong>输出：</strong>[[1,2,5,6],[]]\n<strong>解释：</strong>\n玩家 1、2、5 和 6 都没有输掉任何比赛。\n玩家 3 和 4 每个都输掉两场比赛。\n因此，answer[0] = [1,2,5,6] 和 answer[1] = [] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matches.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>matches[i].length == 2</code></li>\n\t<li><code>1 &lt;= winner<sub>i</sub>, loser<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>winner<sub>i</sub> != loser<sub>i</sub></code></li>\n\t<li>所有 <code>matches[i]</code> <strong>互不相同</strong></li>\n</ul>\n","translatedTitle":"找出输掉零场或一场比赛的玩家","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<vector<int>> findWinners(vector<vector<int>>& matches) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<List<Integer>> findWinners(int[][] matches) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def findWinners(self, matches):\n        \"\"\"\n        :type matches: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** findWinners(int** matches, int matchesSize, int* matchesColSize, int* returnSize, int** returnColumnSizes){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<IList<int>> FindWinners(int[][] matches) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} matches\n * @return {number[][]}\n */\nvar findWinners = function(matches) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} matches\n# @return {Integer[][]}\ndef find_winners(matches)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func findWinners(_ matches: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func findWinners(matches [][]int) [][]int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def findWinners(matches: Array[Array[Int]]): List[List[Int]] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun findWinners(matches: Array<IntArray>): List<List<Int>> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn find_winners(matches: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $matches\n     * @return Integer[][]\n     */\n    function findWinners($matches) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function findWinners(matches: number[][]): number[][] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (find-winners matches)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec find_winners(Matches :: [[integer()]]) -> [[integer()]].\nfind_winners(Matches) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec find_winners(matches :: [[integer]]) :: [[integer]]\n  def find_winners(matches) do\n\n  end\nend"}]}