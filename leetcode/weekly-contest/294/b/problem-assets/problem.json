{"slug":"maximum-bags-with-full-capacity-of-rocks","id":2366,"frontendId":2279,"title":"Maximum Bags With Full Capacity of Rocks","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":4,"dislikes":0,"status":2,"tag":[{"name":"Greedy","slug":"greedy","translatedName":"贪心"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":7653,"totalSubmission":11509,"hints":["Which bag should you fill completely first?","Can you think of a greedy solution?"],"sampleTestCase":"[2,3,4,5]\n[1,2,4,4]\n2","exampleTestcases":"[2,3,4,5]\n[1,2,4,4]\n2\n[10,2,2]\n[2,2,0]\n100","content":"<p>You have <code>n</code> bags numbered from <code>0</code> to <code>n - 1</code>. You are given two <strong>0-indexed</strong> integer arrays <code>capacity</code> and <code>rocks</code>. The <code>i<sup>th</sup></code> bag can hold a maximum of <code>capacity[i]</code> rocks and currently contains <code>rocks[i]</code> rocks. You are also given an integer <code>additionalRocks</code>, the number of additional rocks you can place in <strong>any</strong> of the bags.</p>\n\n<p>Return<em> the <strong>maximum</strong> number of bags that could have full capacity after placing the additional rocks in some bags.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nPlace 1 rock in bag 0 and 1 rock in bag 1.\nThe number of rocks in each bag are now [2,3,4,4].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that there may be other ways of placing the rocks that result in an answer of 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nPlace 8 rocks in bag 0 and 2 rocks in bag 2.\nThe number of rocks in each bag are now [10,2,2].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that we did not use all of the additional rocks.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == capacity.length == rocks.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= capacity[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= rocks[i] &lt;= capacity[i]</code></li>\n\t<li><code>1 &lt;= additionalRocks &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>现有编号从&nbsp;<code>0</code> 到 <code>n - 1</code> 的 <code>n</code> 个背包。给你两个下标从 <strong>0</strong> 开始的整数数组 <code>capacity</code> 和 <code>rocks</code> 。第 <code>i</code> 个背包最大可以装 <code>capacity[i]</code> 块石头，当前已经装了 <code>rocks[i]</code> 块石头。另给你一个整数 <code>additionalRocks</code> ，表示<span class=\"text-only\" data-eleid=\"10\" style=\"white-space: pre;\">你可以放置的额外石头数量，石头可以往 </span><strong><span class=\"text-only\" data-eleid=\"11\" style=\"white-space: pre;\">任意</span></strong><span class=\"text-only\" data-eleid=\"12\" style=\"white-space: pre;\"> 背包中放置。</span></p>\n\n<p>请你将额外的石头放入一些背包中，并返回放置后装满石头的背包的 <strong>最大 </strong>数量<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>\n1 块石头放入背包 0 ，1 块石头放入背包 1 。\n每个背包中的石头总数是 [2,3,4,4] 。\n背包 0 、背包 1 和 背包 2 都装满石头。\n总计 3 个背包装满石头，所以返回 3 。\n可以证明不存在超过 3 个背包装满石头的情况。\n注意，可能存在其他放置石头的方案同样能够得到 3 这个结果。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100\n<strong>输出：</strong>3\n<strong>解释：</strong>\n8 块石头放入背包 0 ，2 块石头放入背包 2 。\n每个背包中的石头总数是 [10,2,2] 。\n背包 0 、背包 1 和背包 2 都装满石头。\n总计 3 个背包装满石头，所以返回 3 。\n可以证明不存在超过 3 个背包装满石头的情况。\n注意，不必用完所有的额外石头。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == capacity.length == rocks.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= capacity[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= rocks[i] &lt;= capacity[i]</code></li>\n\t<li><code>1 &lt;= additionalRocks &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"装满石头的背包的最大数量","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maximumBags(vector<int>& capacity, vector<int>& rocks, int additionalRocks) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maximumBags(int[] capacity, int[] rocks, int additionalRocks) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumBags(self, capacity, rocks, additionalRocks):\n        \"\"\"\n        :type capacity: List[int]\n        :type rocks: List[int]\n        :type additionalRocks: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumBags(self, capacity: List[int], rocks: List[int], additionalRocks: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint maximumBags(int* capacity, int capacitySize, int* rocks, int rocksSize, int additionalRocks){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaximumBags(int[] capacity, int[] rocks, int additionalRocks) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} capacity\n * @param {number[]} rocks\n * @param {number} additionalRocks\n * @return {number}\n */\nvar maximumBags = function(capacity, rocks, additionalRocks) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} capacity\n# @param {Integer[]} rocks\n# @param {Integer} additional_rocks\n# @return {Integer}\ndef maximum_bags(capacity, rocks, additional_rocks)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumBags(_ capacity: [Int], _ rocks: [Int], _ additionalRocks: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumBags(capacity []int, rocks []int, additionalRocks int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumBags(capacity: Array[Int], rocks: Array[Int], additionalRocks: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumBags(capacity: IntArray, rocks: IntArray, additionalRocks: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_bags(capacity: Vec<i32>, rocks: Vec<i32>, additional_rocks: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $capacity\n     * @param Integer[] $rocks\n     * @param Integer $additionalRocks\n     * @return Integer\n     */\n    function maximumBags($capacity, $rocks, $additionalRocks) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumBags(capacity: number[], rocks: number[], additionalRocks: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-bags capacity rocks additionalRocks)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_bags(Capacity :: [integer()], Rocks :: [integer()], AdditionalRocks :: integer()) -> integer().\nmaximum_bags(Capacity, Rocks, AdditionalRocks) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_bags(capacity :: [integer], rocks :: [integer], additional_rocks :: integer) :: integer\n  def maximum_bags(capacity, rocks, additional_rocks) do\n\n  end\nend"}]}