{"slug":"determine-if-two-events-have-conflict","id":2536,"frontendId":6214,"title":"Determine if Two Events Have Conflict","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":5745,"totalSubmission":10550,"hints":["Parse time format to some integer interval first","How would you determine if two intervals overlap?"],"sampleTestCase":"[\"01:15\",\"02:00\"]\n[\"02:00\",\"03:00\"]","exampleTestcases":"[\"01:15\",\"02:00\"]\n[\"02:00\",\"03:00\"]\n[\"01:00\",\"02:00\"]\n[\"01:20\",\"03:00\"]\n[\"10:00\",\"11:00\"]\n[\"14:00\",\"15:00\"]","content":"<p>You are given two arrays of strings that represent two inclusive events that happened <strong>on the same day</strong>, <code>event1</code> and <code>event2</code>, where:</p>\n\n<ul>\n\t<li><code>event1 = [startTime<sub>1</sub>, endTime<sub>1</sub>]</code> and</li>\n\t<li><code>event2 = [startTime<sub>2</sub>, endTime<sub>2</sub>]</code>.</li>\n</ul>\n\n<p>Event times are valid 24 hours format in the form of <code>HH:MM</code>.</p>\n\n<p>A <strong>conflict</strong> happens when two events have some non-empty intersection (i.e., some moment is common to both events).</p>\n\n<p>Return <code>true</code><em> if there is a conflict between two events. Otherwise, return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> event1 = [&quot;01:15&quot;,&quot;02:00&quot;], event2 = [&quot;02:00&quot;,&quot;03:00&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The two events intersect at time 2:00.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> event1 = [&quot;01:00&quot;,&quot;02:00&quot;], event2 = [&quot;01:20&quot;,&quot;03:00&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The two events intersect starting from 01:20 to 02:00.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> event1 = [&quot;10:00&quot;,&quot;11:00&quot;], event2 = [&quot;14:00&quot;,&quot;15:00&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The two events do not intersect.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>evnet1.length == event2.length == 2.</code></li>\n\t<li><code>event1[i].length == event2[i].length == 5</code></li>\n\t<li><code>startTime<sub>1</sub> &lt;= endTime<sub>1</sub></code></li>\n\t<li><code>startTime<sub>2</sub> &lt;= endTime<sub>2</sub></code></li>\n\t<li>All the event times follow the <code>HH:MM</code> format.</li>\n</ul>\n","translatedContent":"<p>给你两个字符串数组 <code>event1</code> 和&nbsp;<code>event2</code>&nbsp;，表示发生在同一天的两个闭区间时间段事件，其中：</p>\n\n<ul>\n\t<li><code>event1 = [startTime<sub>1</sub>, endTime<sub>1</sub>]</code> 且</li>\n\t<li><code>event2 = [startTime<sub>2</sub>, endTime<sub>2</sub>]</code></li>\n</ul>\n\n<p>事件的时间为有效的 24 小时制且按&nbsp;<code>HH:MM</code>&nbsp;格式给出。</p>\n\n<p>当两个事件存在某个非空的交集时（即，某些时刻是两个事件都包含的），则认为出现 <strong>冲突</strong>&nbsp;。</p>\n\n<p>如果两个事件之间存在冲突，返回&nbsp;<code>true</code><em>&nbsp;</em>；否则，返回<em>&nbsp;</em><code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><b>示例 1：</b></p>\n\n<pre>\n<b>输入：</b>event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]\n<b>输出：</b>true\n<b>解释：</b>两个事件在 2:00 出现交集。\n</pre>\n\n<p><b>示例 2：</b></p>\n\n<pre>\n<b>输入：</b>event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]\n<b>输出：</b>true\n<b>解释：</b>两个事件的交集从 01:20 开始，到 02:00 结束。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]\n<b>输出：</b>false\n<b>解释：</b>两个事件不存在交集。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>提示：</b></p>\n\n<ul>\n\t<li><code>evnet1.length == event2.length == 2.</code></li>\n\t<li><code>event1[i].length == event2[i].length == 5</code></li>\n\t<li><code>startTime<sub>1</sub> &lt;= endTime<sub>1</sub></code></li>\n\t<li><code>startTime<sub>2</sub> &lt;= endTime<sub>2</sub></code></li>\n\t<li>所有事件的时间都按照&nbsp;<code>HH:MM</code>&nbsp;格式给出</li>\n</ul>\n","translatedTitle":"判断两个事件是否存在冲突","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool haveConflict(vector<string>& event1, vector<string>& event2) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean haveConflict(String[] event1, String[] event2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def haveConflict(self, event1, event2):\n        \"\"\"\n        :type event1: List[str]\n        :type event2: List[str]\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def haveConflict(self, event1: List[str], event2: List[str]) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool haveConflict(char ** event1, int event1Size, char ** event2, int event2Size){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool HaveConflict(string[] event1, string[] event2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} event1\n * @param {string[]} event2\n * @return {boolean}\n */\nvar haveConflict = function(event1, event2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} event1\n# @param {String[]} event2\n# @return {Boolean}\ndef have_conflict(event1, event2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func haveConflict(_ event1: [String], _ event2: [String]) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func haveConflict(event1 []string, event2 []string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def haveConflict(event1: Array[String], event2: Array[String]): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun haveConflict(event1: Array<String>, event2: Array<String>): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn have_conflict(event1: Vec<String>, event2: Vec<String>) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $event1\n     * @param String[] $event2\n     * @return Boolean\n     */\n    function haveConflict($event1, $event2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function haveConflict(event1: string[], event2: string[]): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (have-conflict event1 event2)\n  (-> (listof string?) (listof string?) boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec have_conflict(Event1 :: [unicode:unicode_binary()], Event2 :: [unicode:unicode_binary()]) -> boolean().\nhave_conflict(Event1, Event2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec have_conflict(event1 :: [String.t], event2 :: [String.t]) :: boolean\n  def have_conflict(event1, event2) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  bool haveConflict(List<String> event1, List<String> event2) {\n\n  }\n}"}]}