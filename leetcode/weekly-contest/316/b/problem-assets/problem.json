{"slug":"number-of-subarrays-with-gcd-equal-to-k","id":2546,"frontendId":6224,"title":"Number of Subarrays With GCD Equal to K","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":3,"dislikes":0,"status":2,"tag":[],"totalAccepted":3793,"totalSubmission":12070,"hints":["The constraints on nums.length are small. It is possible to check every subarray.","To calculate GCD, you can use a built-in function or the Euclidean Algorithm."],"sampleTestCase":"[9,3,1,2,6,3]\n3","exampleTestcases":"[9,3,1,2,6,3]\n3\n[4]\n7","content":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the number of <strong>subarrays</strong> of </em><code>nums</code><em> where the greatest common divisor of the subarray&#39;s elements is </em><code>k</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>The <strong>greatest common divisor of an array</strong> is the largest integer that evenly divides all the array elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,3,1,2,6,3], k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The subarrays of nums where 3 is the greatest common divisor of all the subarray&#39;s elements are:\n- [9,<u><strong>3</strong></u>,1,2,6,3]\n- [9,3,1,2,6,<u><strong>3</strong></u>]\n- [<u><strong>9,3</strong></u>,1,2,6,3]\n- [9,3,1,2,<u><strong>6,3</strong></u>]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4], k = 7\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no subarrays of nums where 7 is the greatest common divisor of all the subarray&#39;s elements.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code> ，请你统计并返回 <code>nums</code>&nbsp;的子数组中元素的最大公因数等于 <code>k</code>&nbsp;的子数组数目。</p>\n\n<p><strong>子数组</strong> 是数组中一个连续的非空序列。</p>\n\n<p><strong>数组的最大公因数</strong>&nbsp;是能整除数组中所有元素的最大整数。</p>\n\n<p>&nbsp;</p>\n\n<p><b>示例 1：</b></p>\n\n<pre><b>输入：</b>nums = [9,3,1,2,6,3], k = 3\n<b>输出：</b>4\n<b>解释：</b>nums 的子数组中，以 3 作为最大公因数的子数组如下：\n- [9,<strong><em>3</em></strong>,1,2,6,3]\n- [9,3,1,2,6,<em><strong>3</strong></em>]\n- [<strong><em>9,3</em></strong>,1,2,6,3]\n- [9,3,1,2,<em><strong>6,3</strong></em>]\n</pre>\n\n<p><b>示例 2：</b></p>\n\n<pre><b>输入：</b>nums = [4], k = 7\n<b>输出：</b>0\n<b>解释：</b>不存在以 7 作为最大公因数的子数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>提示：</b></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"最大公因数等于 K 的子数组数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int subarrayGCD(vector<int>& nums, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int subarrayGCD(int[] nums, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def subarrayGCD(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def subarrayGCD(self, nums: List[int], k: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint subarrayGCD(int* nums, int numsSize, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int SubarrayGCD(int[] nums, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarrayGCD = function(nums, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_gcd(nums, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func subarrayGCD(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func subarrayGCD(nums []int, k int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def subarrayGCD(nums: Array[Int], k: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun subarrayGCD(nums: IntArray, k: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn subarray_gcd(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subarrayGCD($nums, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function subarrayGCD(nums: number[], k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (subarray-gcd nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec subarray_gcd(Nums :: [integer()], K :: integer()) -> integer().\nsubarray_gcd(Nums, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec subarray_gcd(nums :: [integer], k :: integer) :: integer\n  def subarray_gcd(nums, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int subarrayGCD(List<int> nums, int k) {\n\n  }\n}"}]}