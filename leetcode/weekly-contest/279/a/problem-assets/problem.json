{"slug":"sort-even-and-odd-indices-independently","id":2283,"title":"Sort Even and Odd Indices Independently","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":4,"dislikes":0,"status":0,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":5061,"totalSubmission":7165,"hints":["Try to separate the elements at odd indices from the elements at even indices.","Sort the two groups of elements individually.","Combine them to form the resultant array."],"sampleTestCase":"[4,1,2,3]","exampleTestcases":"[4,1,2,3]\n[2,1]","content":"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. Rearrange the values of <code>nums</code> according to the following rules:</p>\n\n<ol>\n\t<li>Sort the values at <strong>odd indices</strong> of <code>nums</code> in <strong>non-increasing</strong> order.\n\n\t<ul>\n\t\t<li>For example, if <code>nums = [4,<strong><u>1</u></strong>,2,<u><strong>3</strong></u>]</code> before this step, it becomes <code>[4,<u><strong>3</strong></u>,2,<strong><u>1</u></strong>]</code> after. The values at odd indices <code>1</code> and <code>3</code> are sorted in non-increasing order.</li>\n\t</ul>\n\t</li>\n\t<li>Sort the values at <strong>even indices</strong> of <code>nums</code> in <strong>non-decreasing</strong> order.\n\t<ul>\n\t\t<li>For example, if <code>nums = [<u><strong>4</strong></u>,1,<u><strong>2</strong></u>,3]</code> before this step, it becomes <code>[<u><strong>2</strong></u>,1,<u><strong>4</strong></u>,3]</code> after. The values at even indices <code>0</code> and <code>2</code> are sorted in non-decreasing order.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Return <em>the array formed after rearranging the values of</em> <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,1,2,3]\n<strong>Output:</strong> [2,3,4,1]\n<strong>Explanation:</strong> \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,<strong><u>1</u></strong>,2,<strong><u>3</u></strong>] to [4,<u><strong>3</strong></u>,2,<strong><u>1</u></strong>].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [<u><strong>4</strong></u>,1,<strong><u>2</u></strong>,3] to [<u><strong>2</strong></u>,3,<u><strong>4</strong></u>,1].\nThus, the array formed after rearranging the values is [2,3,4,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1]\n<strong>Output:</strong> [2,1]\n<strong>Explanation:</strong> \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。根据下述规则重排 <code>nums</code> 中的值：</p>\n\n<ol>\n\t<li>按 <strong>非递增</strong> 顺序排列 <code>nums</code> <strong>奇数下标</strong> 上的所有值。\n\n\t<ul>\n\t\t<li>举个例子，如果排序前 <code>nums = [4,<em><strong>1</strong></em>,2,<em><strong>3</strong></em>]</code> ，对奇数下标的值排序后变为 <code>[4,<em><strong>3</strong></em>,2,<em><strong>1</strong></em>]</code> 。奇数下标 <code>1</code> 和 <code>3</code> 的值按照非递增顺序重排。</li>\n\t</ul>\n\t</li>\n\t<li>按 <strong>非递减</strong> 顺序排列 <code>nums</code> <strong>偶数下标</strong> 上的所有值。\n\t<ul>\n\t\t<li>举个例子，如果排序前 <code>nums = [<em><strong>4</strong></em>,1,<em><strong>2</strong></em>,3]</code> ，对偶数下标的值排序后变为 <code>[<em><strong>2</strong></em>,1,<em><strong>4</strong></em>,3]</code> 。偶数下标 <code>0</code> 和 <code>2</code> 的值按照非递减顺序重排。</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>返回重排 <code>nums</code> 的值之后形成的数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [4,1,2,3]\n<strong>输出：</strong>[2,3,4,1]\n<strong>解释：</strong>\n首先，按非递增顺序重排奇数下标（1 和 3）的值。\n所以，nums 从 [4,<em><strong>1</strong></em>,2,<em><strong>3</strong></em>] 变为 [4,<em><strong>3</strong></em>,2,<em><strong>1</strong></em>] 。\n然后，按非递减顺序重排偶数下标（0 和 2）的值。\n所以，nums 从 [<em><strong>4</strong></em>,1,<em><strong>2</strong></em>,3] 变为 [<em><strong>2</strong></em>,3,<em><strong>4</strong></em>,1] 。\n因此，重排之后形成的数组是 [2,3,4,1] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,1]\n<strong>输出：</strong>[2,1]\n<strong>解释：</strong>\n由于只有一个奇数下标和一个偶数下标，所以不会发生重排。\n形成的结果数组是 [2,1] ，和初始数组一样。 \n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n","translatedTitle":"对奇偶下标分别排序","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<int> sortEvenOdd(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int[] sortEvenOdd(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def sortEvenOdd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def sortEvenOdd(self, nums: List[int]) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortEvenOdd(int* nums, int numsSize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int[] SortEvenOdd(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortEvenOdd = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef sort_even_odd(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func sortEvenOdd(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func sortEvenOdd(nums []int) []int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def sortEvenOdd(nums: Array[Int]): Array[Int] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun sortEvenOdd(nums: IntArray): IntArray {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn sort_even_odd(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function sortEvenOdd($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function sortEvenOdd(nums: number[]): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (sort-even-odd nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec sort_even_odd(Nums :: [integer()]) -> [integer()].\nsort_even_odd(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec sort_even_odd(nums :: [integer]) :: [integer]\n  def sort_even_odd(nums) do\n\n  end\nend"}]}