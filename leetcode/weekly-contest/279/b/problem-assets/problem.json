{"slug":"smallest-value-of-the-rearranged-number","id":2284,"title":"Smallest Value of the Rearranged Number","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":4,"dislikes":0,"status":0,"tag":[{"name":"Math","slug":"math","translatedName":"数学"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":4555,"totalSubmission":8384,"hints":["For positive numbers, the leading digit should be the smallest nonzero digit. Then the remaining digits follow in ascending order.","For negative numbers, the digits should be arranged in descending order."],"sampleTestCase":"310","exampleTestcases":"310\n-7605","content":"<p>You are given an integer <code>num.</code> <strong>Rearrange</strong> the digits of <code>num</code> such that its value is <strong>minimized</strong> and it does not contain <strong>any</strong> leading zeros.</p>\n\n<p>Return <em>the rearranged number with minimal value</em>.</p>\n\n<p>Note that the sign of the number does not change after rearranging the digits.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 310\n<strong>Output:</strong> 103\n<strong>Explanation:</strong> The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = -7605\n<strong>Output:</strong> -7650\n<strong>Explanation:</strong> Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>15</sup> &lt;= num &lt;= 10<sup>15</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数 <code>num</code> 。<strong>重排</strong> <code>num</code> 中的各位数字，使其值 <strong>最小化</strong> 且不含 <strong>任何</strong> 前导零。</p>\n\n<p>返回不含前导零且值最小的重排数字。</p>\n\n<p>注意，重排各位数字后，<code>num</code> 的符号不会改变。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>num = 310\n<strong>输出：</strong>103\n<strong>解释：</strong>310 中各位数字的可行排列有：013、031、103、130、301、310 。\n不含任何前导零且值最小的重排数字是 103 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>num = -7605\n<strong>输出：</strong>-7650\n<strong>解释：</strong>-7605 中各位数字的部分可行排列为：-7650、-6705、-5076、-0567。\n不含任何前导零且值最小的重排数字是 -7650 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-10<sup>15</sup> &lt;= num &lt;= 10<sup>15</sup></code></li>\n</ul>\n","translatedTitle":"重排数字的最小值","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long smallestNumber(long long num) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long smallestNumber(long num) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def smallestNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def smallestNumber(self, num: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long smallestNumber(long long num){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long SmallestNumber(long num) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} num\n * @return {number}\n */\nvar smallestNumber = function(num) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} num\n# @return {Integer}\ndef smallest_number(num)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func smallestNumber(_ num: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func smallestNumber(num int64) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def smallestNumber(num: Long): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun smallestNumber(num: Long): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn smallest_number(num: i64) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function smallestNumber($num) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function smallestNumber(num: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (smallest-number num)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec smallest_number(Num :: integer()) -> integer().\nsmallest_number(Num) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec smallest_number(num :: integer) :: integer\n  def smallest_number(num) do\n\n  end\nend"}]}