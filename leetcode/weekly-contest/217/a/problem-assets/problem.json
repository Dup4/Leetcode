{"slug":"richest-customer-wealth","id":1791,"title":"Richest Customer Wealth","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":41,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Matrix","slug":"matrix","translatedName":"矩阵"}],"totalAccepted":41529,"totalSubmission":48858,"hints":["Calculate the wealth of each customer","Find the maximum element in array."],"sampleTestCase":"[[1,2,3],[3,2,1]]","exampleTestcases":"[[1,2,3],[3,2,1]]\n[[1,5],[7,3],[3,5]]\n[[2,8,7],[7,1,3],[1,9,5]]","content":"<p>You are given an <code>m x n</code> integer grid <code>accounts</code> where <code>accounts[i][j]</code> is the amount of money the <code>i​​​​​<sup>​​​​​​th</sup>​​​​</code> customer has in the <code>j​​​​​<sup>​​​​​​th</sup></code>​​​​ bank. Return<em> the <strong>wealth</strong> that the richest customer has.</em></p>\n\n<p>A customer&#39;s <strong>wealth</strong> is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum <strong>wealth</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> accounts = [[1,2,3],[3,2,1]]\n<strong>Output:</strong> 6\n<strong>Explanation</strong><strong>:</strong>\n<code>1st customer has wealth = 1 + 2 + 3 = 6\n</code><code>2nd customer has wealth = 3 + 2 + 1 = 6\n</code>Both customers are considered the richest with a wealth of 6 each, so return 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> accounts = [[1,5],[7,3],[3,5]]\n<strong>Output:</strong> 10\n<strong>Explanation</strong>: \n1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> accounts = [[2,8,7],[7,1,3],[1,9,5]]\n<strong>Output:</strong> 17\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;accounts.length</code></li>\n\t<li><code>n ==&nbsp;accounts[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li>\n</ul>\n","translatedContent":"<p>给你一个 <code>m x n</code> 的整数网格 <code>accounts</code> ，其中 <code>accounts[i][j]</code> 是第 <code>i​​​​​<sup>​​​​​​</sup>​</code> 位客户在第 <code>j</code> 家银行托管的资产数量。返回最富有客户所拥有的 <strong>资产总量</strong> 。</p>\n\n<p>客户的 <strong>资产总量</strong> 就是他们在各家银行托管的资产数量之和。最富有客户就是 <strong>资产总量</strong> 最大的客户。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>accounts = [[1,2,3],[3,2,1]]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n<code>第 1 位客户的资产总量 = 1 + 2 + 3 = 6\n第 2 位客户的资产总量 = 3 + 2 + 1 = 6\n</code>两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>accounts = [[1,5],[7,3],[3,5]]\n<strong>输出：</strong>10\n<strong>解释：</strong>\n<code>第 1 位客户的资产总量</code> = 6\n<code>第 2 位客户的资产总量</code> = 10 \n<code>第 3 位客户的资产总量</code> = 8\n第 2 位客户是最富有的，资产总量是 10</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>accounts = [[2,8,7],[7,1,3],[1,9,5]]\n<strong>输出：</strong>17\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == accounts.length</code></li>\n\t<li><code>n == accounts[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li>\n</ul>\n","translatedTitle":"最富有客户的资产总量","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maximumWealth(vector<vector<int>>& accounts) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maximumWealth(int[][] accounts) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumWealth(self, accounts):\n        \"\"\"\n        :type accounts: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint maximumWealth(int** accounts, int accountsSize, int* accountsColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaximumWealth(int[][] accounts) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} accounts\n * @return {number}\n */\nvar maximumWealth = function(accounts) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} accounts\n# @return {Integer}\ndef maximum_wealth(accounts)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumWealth(_ accounts: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumWealth(accounts [][]int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumWealth(accounts: Array[Array[Int]]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumWealth(accounts: Array<IntArray>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_wealth(accounts: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $accounts\n     * @return Integer\n     */\n    function maximumWealth($accounts) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumWealth(accounts: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-wealth accounts)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_wealth(Accounts :: [[integer()]]) -> integer().\nmaximum_wealth(Accounts) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_wealth(accounts :: [[integer]]) :: integer\n  def maximum_wealth(accounts) do\n\n  end\nend"}]}