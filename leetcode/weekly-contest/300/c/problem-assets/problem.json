{"slug":"number-of-people-aware-of-a-secret","id":2408,"frontendId":6109,"title":"Number of People Aware of a Secret","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":1977,"totalSubmission":5847,"hints":["Let dp[i][j] be the number of people who have known the secret for exactly j + 1 days, at day i.","If j > 0, dp[i][j] = dp[i – 1][j – 1].","dp[i][0] = sum(dp[i – 1][j]) for j in [delay – 1, forget – 2]."],"sampleTestCase":"5\n2\n3","exampleTestcases":"6\n2\n4\n4\n1\n3","content":"<p>On day <code>1</code>, one person discovers a secret.</p>\n\n<p>You are given an integer <code>delay</code>, which means that each person will <strong>share</strong> the secret with a new person <strong>every day</strong>, starting from <code>delay</code> days after discovering the secret. You are also given an integer <code>forget</code>, which means that each person will <strong>forget</strong> the secret <code>forget</code> days after discovering it. A person <strong>cannot</strong> share the secret on the same day they forgot it, or on any day afterwards.</p>\n\n<p>Given an integer <code>n</code>, return<em> the number of people who know the secret at the end of day </em><code>n</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, delay = 2, forget = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nDay 1: Suppose the first person is named A. (1 person)\nDay 2: A is the only person who knows the secret. (1 person)\nDay 3: A shares the secret with a new person, B. (2 people)\nDay 4: A shares the secret with a new person, C. (3 people)\nDay 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)\nDay 6: B shares the secret with E, and C shares the secret with F. (5 people)\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, delay = 1, forget = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nDay 1: The first person is named A. (1 person)\nDay 2: A shares the secret with B. (2 people)\nDay 3: A and B share the secret with 2 new people, C and D. (4 people)\nDay 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= delay &lt; forget &lt;= n</code></li>\n</ul>\n","translatedContent":"<p>在第 <code>1</code>&nbsp;天，有一个人发现了一个秘密。</p>\n\n<p>给你一个整数&nbsp;<code>delay</code>&nbsp;，表示每个人会在发现秘密后的 <code>delay</code>&nbsp;天之后，<strong>每天</strong>&nbsp;给一个新的人&nbsp;<strong>分享</strong>&nbsp;秘密。同时给你一个整数&nbsp;<code>forget</code>&nbsp;，表示每个人在发现秘密&nbsp;<code>forget</code>&nbsp;天之后会&nbsp;<strong>忘记</strong>&nbsp;这个秘密。一个人&nbsp;<strong>不能</strong>&nbsp;在忘记秘密那一天及之后的日子里分享秘密。</p>\n\n<p>给你一个整数&nbsp;<code>n</code>&nbsp;，请你返回在第 <code>n</code>&nbsp;天结束时，知道秘密的人数。由于答案可能会很大，请你将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>n = 6, delay = 2, forget = 4\n<b>输出：</b>5\n<strong>解释：</strong>\n第 1 天：假设第一个人叫 A 。（一个人知道秘密）\n第 2 天：A 是唯一一个知道秘密的人。（一个人知道秘密）\n第 3 天：A 把秘密分享给 B 。（两个人知道秘密）\n第 4 天：A 把秘密分享给一个新的人 C 。（三个人知道秘密）\n第 5 天：A 忘记了秘密，B 把秘密分享给一个新的人 D 。（三个人知道秘密）\n第 6 天：B 把秘密分享给 E，C 把秘密分享给 F 。（五个人知道秘密）\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>n = 4, delay = 1, forget = 3\n<b>输出：</b>6\n<strong>解释：</strong>\n第 1 天：第一个知道秘密的人为 A 。（一个人知道秘密）\n第 2 天：A 把秘密分享给 B 。（两个人知道秘密）\n第 3 天：A 和 B 把秘密分享给 2 个新的人 C 和 D 。（四个人知道秘密）\n第 4 天：A 忘记了秘密，B、C、D 分别分享给 3 个新的人。（六个人知道秘密）\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= delay &lt; forget &lt;= n</code></li>\n</ul>\n","translatedTitle":"知道秘密的人数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int peopleAwareOfSecret(int n, int delay, int forget) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int peopleAwareOfSecret(int n, int delay, int forget) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def peopleAwareOfSecret(self, n, delay, forget):\n        \"\"\"\n        :type n: int\n        :type delay: int\n        :type forget: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint peopleAwareOfSecret(int n, int delay, int forget){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int PeopleAwareOfSecret(int n, int delay, int forget) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @param {number} delay\n * @param {number} forget\n * @return {number}\n */\nvar peopleAwareOfSecret = function(n, delay, forget) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @param {Integer} delay\n# @param {Integer} forget\n# @return {Integer}\ndef people_aware_of_secret(n, delay, forget)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func peopleAwareOfSecret(_ n: Int, _ delay: Int, _ forget: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func peopleAwareOfSecret(n int, delay int, forget int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def peopleAwareOfSecret(n: Int, delay: Int, forget: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun peopleAwareOfSecret(n: Int, delay: Int, forget: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn people_aware_of_secret(n: i32, delay: i32, forget: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $delay\n     * @param Integer $forget\n     * @return Integer\n     */\n    function peopleAwareOfSecret($n, $delay, $forget) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function peopleAwareOfSecret(n: number, delay: number, forget: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (people-aware-of-secret n delay forget)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec people_aware_of_secret(N :: integer(), Delay :: integer(), Forget :: integer()) -> integer().\npeople_aware_of_secret(N, Delay, Forget) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec people_aware_of_secret(n :: integer, delay :: integer, forget :: integer) :: integer\n  def people_aware_of_secret(n, delay, forget) do\n\n  end\nend"}]}