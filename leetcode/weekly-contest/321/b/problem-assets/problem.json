{"slug":"append-characters-to-string-to-make-subsequence","id":2572,"frontendId":6246,"title":"Append Characters to String to Make Subsequence","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3888,"totalSubmission":6218,"hints":["Find the longest prefix of t that is a subsequence of s.","Use two variables to keep track of your location in s and t. If the characters match, increment both variables. Otherwise, only increment the variable for s.","The remaining characters in t must be appended to the end of s."],"sampleTestCase":"\"coaching\"\n\"coding\"","exampleTestcases":"\"coaching\"\n\"coding\"\n\"abcde\"\n\"a\"\n\"z\"\n\"abcde\"","content":"<p>You are given two strings <code>s</code> and <code>t</code> consisting of only lowercase English letters.</p>\n\n<p>Return <em>the minimum number of characters that need to be appended to the end of </em><code>s</code><em> so that </em><code>t</code><em> becomes a <strong>subsequence</strong> of </em><code>s</code>.</p>\n\n<p>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;coaching&quot;, t = &quot;coding&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Append the characters &quot;ding&quot; to the end of s so that s = &quot;coachingding&quot;.\nNow, t is a subsequence of s (&quot;<u><strong>co</strong></u>aching<u><strong>ding</strong></u>&quot;).\nIt can be shown that appending any 3 characters to the end of s will never make t a subsequence.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcde&quot;, t = &quot;a&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> t is already a subsequence of s (&quot;<u><strong>a</strong></u>bcde&quot;).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;z&quot;, t = &quot;abcde&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Append the characters &quot;abcde&quot; to the end of s so that s = &quot;zabcde&quot;.\nNow, t is a subsequence of s (&quot;z<u><strong>abcde</strong></u>&quot;).\nIt can be shown that appending any 4 characters to the end of s will never make t a subsequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你两个仅由小写英文字母组成的字符串 <code>s</code> 和 <code>t</code> 。</p>\n\n<p>现在需要通过向 <code>s</code> 末尾追加字符的方式使 <code>t</code> 变成 <code>s</code> 的一个 <strong>子序列</strong> ，返回需要追加的最少字符数。</p>\n\n<p>子序列是一个可以由其他字符串删除部分（或不删除）字符但不改变剩下字符顺序得到的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"coaching\", t = \"coding\"\n<strong>输出：</strong>4\n<strong>解释：</strong>向 s 末尾追加字符串 \"ding\" ，s = \"coachingding\" 。\n现在，t 是 s (\"<em><strong>co</strong></em>aching<em><strong>ding</strong></em>\") 的一个子序列。\n可以证明向 s 末尾追加任何 3 个字符都无法使 t 成为 s 的一个子序列。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abcde\", t = \"a\"\n<strong>输出：</strong>0\n<strong>解释：</strong>t 已经是 s (\"<em><strong>a</strong></em>bcde\") 的一个子序列。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"z\", t = \"abcde\"\n<strong>输出：</strong>5\n<strong>解释：</strong>向 s 末尾追加字符串 \"abcde\" ，s = \"zabcde\" 。\n现在，t 是 s (\"z<em><strong>abcde</strong></em>\") 的一个子序列。 \n可以证明向 s 末尾追加任何 4 个字符都无法使 t 成为 s 的一个子序列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> 和 <code>t</code> 仅由小写英文字母组成</li>\n</ul>\n","translatedTitle":"追加字符以获得子序列","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int appendCharacters(string s, string t) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int appendCharacters(String s, String t) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def appendCharacters(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def appendCharacters(self, s: str, t: str) -> int:"},{"lang":"C","langSlug":"c","code":"int appendCharacters(char * s, char * t){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int AppendCharacters(string s, string t) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar appendCharacters = function(s, t) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef append_characters(s, t)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func appendCharacters(_ s: String, _ t: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func appendCharacters(s string, t string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def appendCharacters(s: String, t: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun appendCharacters(s: String, t: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn append_characters(s: String, t: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function appendCharacters($s, $t) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function appendCharacters(s: string, t: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (append-characters s t)\n  (-> string? string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec append_characters(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\nappend_characters(S, T) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec append_characters(s :: String.t, t :: String.t) :: integer\n  def append_characters(s, t) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int appendCharacters(String s, String t) {\n\n  }\n}"}]}