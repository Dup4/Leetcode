{"slug":"count-words-obtained-after-adding-a-letter","id":2256,"title":"Count Words Obtained After Adding a Letter","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":16,"dislikes":0,"status":0,"tag":[{"name":"Bit Manipulation","slug":"bit-manipulation","translatedName":"位运算"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Hash Table","slug":"hash-table","translatedName":"哈希表"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":3916,"totalSubmission":11820,"hints":["Which data structure can be used to efficiently check if a string exists in startWords?","After appending a letter, all letters of a string can be rearranged in any possible way. How can we use this to reduce our search space while checking if a string in targetWords can be obtained from a string in startWords?"],"sampleTestCase":"[\"ant\",\"act\",\"tack\"]\n[\"tack\",\"act\",\"acti\"]","exampleTestcases":"[\"ant\",\"act\",\"tack\"]\n[\"tack\",\"act\",\"acti\"]\n[\"ab\",\"a\"]\n[\"abc\",\"abcd\"]","content":"<p>You are given two <strong>0-indexed</strong> arrays of strings <code>startWords</code> and <code>targetWords</code>. Each string consists of <strong>lowercase English letters</strong> only.</p>\n\n<p>For each string in <code>targetWords</code>, check if it is possible to choose a string from <code>startWords</code> and perform a <strong>conversion operation</strong> on it to be equal to that from <code>targetWords</code>.</p>\n\n<p>The <strong>conversion operation</strong> is described in the following two steps:</p>\n\n<ol>\n\t<li><strong>Append</strong> any lowercase letter that is <strong>not present</strong> in the string to its end.\n\n\t<ul>\n\t\t<li>For example, if the string is <code>&quot;abc&quot;</code>, the letters <code>&#39;d&#39;</code>, <code>&#39;e&#39;</code>, or <code>&#39;y&#39;</code> can be added to it, but not <code>&#39;a&#39;</code>. If <code>&#39;d&#39;</code> is added, the resulting string will be <code>&quot;abcd&quot;</code>.</li>\n\t</ul>\n\t</li>\n\t<li><strong>Rearrange</strong> the letters of the new string in <strong>any</strong> arbitrary order.\n\t<ul>\n\t\t<li>For example, <code>&quot;abcd&quot;</code> can be rearranged to <code>&quot;acbd&quot;</code>, <code>&quot;bacd&quot;</code>, <code>&quot;cbda&quot;</code>, and so on. Note that it can also be rearranged to <code>&quot;abcd&quot;</code> itself.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Return <em>the <strong>number of strings</strong> in </em><code>targetWords</code><em> that can be obtained by performing the operations on <strong>any</strong> string of </em><code>startWords</code>.</p>\n\n<p><strong>Note</strong> that you will only be verifying if the string in <code>targetWords</code> can be obtained from a string in <code>startWords</code> by performing the operations. The strings in <code>startWords</code> <strong>do not</strong> actually change during this process.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> startWords = [&quot;ant&quot;,&quot;act&quot;,&quot;tack&quot;], targetWords = [&quot;tack&quot;,&quot;act&quot;,&quot;acti&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- In order to form targetWords[0] = &quot;tack&quot;, we use startWords[1] = &quot;act&quot;, append &#39;k&#39; to it, and rearrange &quot;actk&quot; to &quot;tack&quot;.\n- There is no string in startWords that can be used to obtain targetWords[1] = &quot;act&quot;.\n  Note that &quot;act&quot; does exist in startWords, but we <strong>must</strong> append one letter to the string before rearranging it.\n- In order to form targetWords[2] = &quot;acti&quot;, we use startWords[1] = &quot;act&quot;, append &#39;i&#39; to it, and rearrange &quot;acti&quot; to &quot;acti&quot; itself.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> startWords = [&quot;ab&quot;,&quot;a&quot;], targetWords = [&quot;abc&quot;,&quot;abcd&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\n- In order to form targetWords[0] = &quot;abc&quot;, we use startWords[0] = &quot;ab&quot;, add &#39;c&#39; to it, and rearrange it to &quot;abc&quot;.\n- There is no string in startWords that can be used to obtain targetWords[1] = &quot;abcd&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= startWords.length, targetWords.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= startWords[i].length, targetWords[j].length &lt;= 26</code></li>\n\t<li>Each string of <code>startWords</code> and <code>targetWords</code> consists of lowercase English letters only.</li>\n\t<li>No letter occurs more than once in any string of <code>startWords</code> or <code>targetWords</code>.</li>\n</ul>\n","translatedContent":"<p>给你两个下标从 <strong>0</strong> 开始的字符串数组 <code>startWords</code> 和 <code>targetWords</code> 。每个字符串都仅由 <strong>小写英文字母</strong> 组成。</p>\n\n<p>对于 <code>targetWords</code> 中的每个字符串，检查是否能够从 <code>startWords</code> 中选出一个字符串，执行一次 <strong>转换操作</strong>&nbsp;，得到的结果与当前&nbsp;<code>targetWords</code> 字符串相等。</p>\n\n<p><strong>转换操作</strong> 如下面两步所述：</p>\n\n<ol>\n\t<li><strong>追加</strong> 任何 <strong>不存在</strong> 于当前字符串的任一小写字母到当前字符串的末尾。\n\n\t<ul>\n\t\t<li>例如，如果字符串为 <code>\"abc\"</code> ，那么字母 <code>'d'</code>、<code>'e'</code> 或 <code>'y'</code> 都可以加到该字符串末尾，但 <code>'a'</code> 就不行。如果追加的是 <code>'d'</code> ，那么结果字符串为 <code>\"abcd\"</code> 。</li>\n\t</ul>\n\t</li>\n\t<li><strong>重排</strong> 新字符串中的字母，可以按 <strong>任意</strong> 顺序重新排布字母。\n\t<ul>\n\t\t<li>例如，<code>\"abcd\"</code> 可以重排为 <code>\"acbd\"</code>、<code>\"bacd\"</code>、<code>\"cbda\"</code>，以此类推。注意，它也可以重排为 <code>\"abcd\"</code> 自身。</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>找出 <code>targetWords</code> 中有多少字符串能够由&nbsp;<code>startWords</code> 中的 <strong>任一</strong> 字符串执行上述转换操作获得。返回<em> </em><code>targetWords</code><em> </em>中这类 <strong>字符串的数目</strong> 。</p>\n\n<p><strong>注意：</strong>你仅能验证 <code>targetWords</code> 中的字符串是否可以由 <code>startWords</code> 中的某个字符串经执行操作获得。<code>startWords</code>&nbsp; 中的字符串在这一过程中 <strong>不</strong> 发生实际变更。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n- 为了形成 targetWords[0] = \"tack\" ，可以选用 startWords[1] = \"act\" ，追加字母 'k' ，并重排 \"actk\" 为 \"tack\" 。\n- startWords 中不存在可以用于获得 targetWords[1] = \"act\" 的字符串。\n  注意 \"act\" 确实存在于 startWords ，但是 <strong>必须</strong> 在重排前给这个字符串追加一个字母。\n- 为了形成 targetWords[2] = \"acti\" ，可以选用 startWords[1] = \"act\" ，追加字母 'i' ，并重排 \"acti\" 为 \"acti\" 自身。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n- 为了形成 targetWords[0] = \"abc\" ，可以选用 startWords[0] = \"ab\" ，追加字母 'c' ，并重排为 \"abc\" 。\n- startWords 中不存在可以用于获得 targetWords[1] = \"abcd\" 的字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= startWords.length, targetWords.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= startWords[i].length, targetWords[j].length &lt;= 26</code></li>\n\t<li><code>startWords</code> 和 <code>targetWords</code> 中的每个字符串都仅由小写英文字母组成</li>\n\t<li>在 <code>startWords</code> 或 <code>targetWords</code> 的任一字符串中，每个字母至多出现一次</li>\n</ul>\n","translatedTitle":"统计追加字母可以获得的单词数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int wordCount(vector<string>& startWords, vector<string>& targetWords) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int wordCount(String[] startWords, String[] targetWords) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def wordCount(self, startWords, targetWords):\n        \"\"\"\n        :type startWords: List[str]\n        :type targetWords: List[str]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint wordCount(char ** startWords, int startWordsSize, char ** targetWords, int targetWordsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int WordCount(string[] startWords, string[] targetWords) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} startWords\n * @param {string[]} targetWords\n * @return {number}\n */\nvar wordCount = function(startWords, targetWords) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} start_words\n# @param {String[]} target_words\n# @return {Integer}\ndef word_count(start_words, target_words)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func wordCount(_ startWords: [String], _ targetWords: [String]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func wordCount(startWords []string, targetWords []string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def wordCount(startWords: Array[String], targetWords: Array[String]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun wordCount(startWords: Array<String>, targetWords: Array<String>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn word_count(start_words: Vec<String>, target_words: Vec<String>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $startWords\n     * @param String[] $targetWords\n     * @return Integer\n     */\n    function wordCount($startWords, $targetWords) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function wordCount(startWords: string[], targetWords: string[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (word-count startWords targetWords)\n  (-> (listof string?) (listof string?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec word_count(StartWords :: [unicode:unicode_binary()], TargetWords :: [unicode:unicode_binary()]) -> integer().\nword_count(StartWords, TargetWords) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec word_count(start_words :: [String.t], target_words :: [String.t]) :: integer\n  def word_count(start_words, target_words) do\n\n  end\nend"}]}