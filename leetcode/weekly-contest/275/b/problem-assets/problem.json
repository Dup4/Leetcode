{"slug":"minimum-swaps-to-group-all-1s-together-ii","id":2255,"title":"Minimum Swaps to Group All 1's Together II","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":27,"dislikes":0,"status":0,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Sliding Window","slug":"sliding-window","translatedName":"滑动窗口"}],"totalAccepted":4745,"totalSubmission":10259,"hints":["Notice that the number of 1’s to be grouped together is fixed. It is the number of 1's the whole array has.","Call this number total. We should then check for every subarray of size total (possibly wrapped around), how many swaps are required to have the subarray be all 1’s.","The number of swaps required is the number of 0’s in the subarray.","To eliminate the circular property of the array, we can append the original array to itself. Then, we check each subarray of length total.","How do we avoid recounting the number of 0’s in the subarray each time? The Sliding Window technique can help."],"sampleTestCase":"[0,1,0,1,1,0,0]","exampleTestcases":"[0,1,0,1,1,0,0]\n[0,1,1,1,0,0,1,1,0]\n[1,1,0,0,1]","content":"<p>A <strong>swap</strong> is defined as taking two <strong>distinct</strong> positions in an array and swapping the values in them.</p>\n\n<p>A <strong>circular</strong> array is defined as an array where we consider the <strong>first</strong> element and the <strong>last</strong> element to be <strong>adjacent</strong>.</p>\n\n<p>Given a <strong>binary</strong> <strong>circular</strong> array <code>nums</code>, return <em>the minimum number of swaps required to group all </em><code>1</code><em>&#39;s present in the array together at <strong>any location</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,1,1,0,0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Here are a few of the ways to group all the 1&#39;s together:\n[0,<u>0</u>,<u>1</u>,1,1,0,0] using 1 swap.\n[0,1,<u>1</u>,1,<u>0</u>,0,0] using 1 swap.\n[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).\nThere is no way to group all 1&#39;s together with 0 swaps.\nThus, the minimum number of swaps required is 1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1,1,0,0,1,1,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Here are a few of the ways to group all the 1&#39;s together:\n[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).\n[1,1,1,1,1,0,0,0,0] using 2 swaps.\nThere is no way to group all 1&#39;s together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,0,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All the 1&#39;s are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n","translatedContent":"<p><strong>交换</strong> 定义为选中一个数组中的两个 <strong>互不相同</strong> 的位置并交换二者的值。</p>\n\n<p><strong>环形</strong> 数组是一个数组，可以认为 <strong>第一个</strong> 元素和 <strong>最后一个</strong> 元素 <strong>相邻</strong> 。</p>\n\n<p>给你一个 <strong>二进制环形</strong> 数组 <code>nums</code> ，返回在 <strong>任意位置</strong> 将数组中的所有 <code>1</code> 聚集在一起需要的最少交换次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [0,1,0,1,1,0,0]\n<strong>输出：</strong>1\n<strong>解释：</strong>这里列出一些能够将所有 1 聚集在一起的方案：\n[0,<strong><em>0</em></strong>,<em><strong>1</strong></em>,1,1,0,0] 交换 1 次。\n[0,1,<em><strong>1</strong></em>,1,<em><strong>0</strong></em>,0,0] 交换 1 次。\n[1,1,0,0,0,0,1] 交换 2 次（利用数组的环形特性）。\n无法在交换 0 次的情况下将数组中的所有 1 聚集在一起。\n因此，需要的最少交换次数为 1 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [0,1,1,1,0,0,1,1,0]\n<strong>输出：</strong>2\n<strong>解释：</strong>这里列出一些能够将所有 1 聚集在一起的方案：\n[1,1,1,0,0,0,0,1,1] 交换 2 次（利用数组的环形特性）。\n[1,1,1,1,1,0,0,0,0] 交换 2 次。\n无法在交换 0 次或 1 次的情况下将数组中的所有 1 聚集在一起。\n因此，需要的最少交换次数为 2 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,1,0,0,1]\n<strong>输出：</strong>0\n<strong>解释：</strong>得益于数组的环形特性，所有的 1 已经聚集在一起。\n因此，需要的最少交换次数为 0 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> 为 <code>0</code> 或者 <code>1</code></li>\n</ul>\n","translatedTitle":"最少交换次数来组合所有的 1 II","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int minSwaps(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int minSwaps(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def minSwaps(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def minSwaps(self, nums: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint minSwaps(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MinSwaps(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minSwaps = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Integer}\ndef min_swaps(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func minSwaps(_ nums: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func minSwaps(nums []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def minSwaps(nums: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun minSwaps(nums: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn min_swaps(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minSwaps($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function minSwaps(nums: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (min-swaps nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec min_swaps(Nums :: [integer()]) -> integer().\nmin_swaps(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec min_swaps(nums :: [integer]) :: integer\n  def min_swaps(nums) do\n\n  end\nend"}]}