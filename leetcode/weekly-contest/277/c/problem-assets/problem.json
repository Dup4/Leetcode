{"slug":"find-all-lonely-numbers-in-the-array","id":2270,"title":"Find All Lonely Numbers in the Array","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":6,"dislikes":0,"status":0,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Hash Table","slug":"hash-table","translatedName":"哈希表"},{"name":"Counting","slug":"counting","translatedName":"计数"}],"totalAccepted":6315,"totalSubmission":10471,"hints":["For a given element x, how can you quickly check if x - 1 and x + 1 are present in the array without reiterating through the entire array?","Use a set or a hash map."],"sampleTestCase":"[10,6,5,8]","exampleTestcases":"[10,6,5,8]\n[1,3,5,3]","content":"<p>You are given an integer array <code>nums</code>. A number <code>x</code> is <strong>lonely</strong> when it appears only <strong>once</strong>, and no <strong>adjacent</strong> numbers (i.e. <code>x + 1</code> and <code>x - 1)</code> appear in the array.</p>\n\n<p>Return <em><strong>all</strong> lonely numbers in </em><code>nums</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,6,5,8]\n<strong>Output:</strong> [10,8]\n<strong>Explanation:</strong> \n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,3]\n<strong>Output:</strong> [1,5]\n<strong>Explanation:</strong> \n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> 。如果数字 <code>x</code> 在数组中仅出现 <strong>一次</strong> ，且没有 <strong>相邻</strong> 数字（即，<code>x + 1</code> 和 <code>x - 1</code>）出现在数组中，则认为数字 <code>x</code> 是 <strong>孤独数字</strong> 。</p>\n\n<p>返回<em> </em><code>nums</code> 中的 <strong>所有</strong> 孤独数字。你可以按 <strong>任何顺序</strong> 返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [10,6,5,8]\n<strong>输出：</strong>[10,8]\n<strong>解释：</strong>\n- 10 是一个孤独数字，因为它只出现一次，并且 9 和 11 没有在 nums 中出现。\n- 8 是一个孤独数字，因为它只出现一次，并且 7 和 9 没有在 nums 中出现。\n- 5 不是一个孤独数字，因为 6 出现在 nums 中，反之亦然。\n因此，nums 中的孤独数字是 [10, 8] 。\n注意，也可以返回 [8, 10] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,3,5,3]\n<strong>输出：</strong>[1,5]\n<strong>解释：</strong>\n- 1 是一个孤独数字，因为它只出现一次，并且 0 和 2 没有在 nums 中出现。\n- 5 是一个孤独数字，因为它只出现一次，并且 4 和 6 没有在 nums 中出现。\n- 3 不是一个孤独数字，因为它出现两次。\n因此，nums 中的孤独数字是 [1, 5] 。\n注意，也可以返回 [5, 1] 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n","translatedTitle":"找出数组中的所有孤独数字","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<int> findLonely(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<Integer> findLonely(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def findLonely(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def findLonely(self, nums: List[int]) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findLonely(int* nums, int numsSize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<int> FindLonely(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findLonely = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_lonely(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func findLonely(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func findLonely(nums []int) []int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def findLonely(nums: Array[Int]): List[Int] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun findLonely(nums: IntArray): List<Int> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn find_lonely(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findLonely($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function findLonely(nums: number[]): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (find-lonely nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec find_lonely(Nums :: [integer()]) -> [integer()].\nfind_lonely(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec find_lonely(nums :: [integer]) :: [integer]\n  def find_lonely(nums) do\n\n  end\nend"}]}