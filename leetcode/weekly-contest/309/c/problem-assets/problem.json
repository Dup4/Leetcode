{"slug":"longest-nice-subarray","id":2478,"frontendId":6169,"title":"Longest Nice Subarray","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":3652,"totalSubmission":9512,"hints":["What is the maximum possible length of a nice subarray?","The length of the longest nice subarray cannot exceed 30. Why is that?"],"sampleTestCase":"[1,3,8,48,10]","exampleTestcases":"[1,3,8,48,10]\n[3,1,5,11,13]","content":"<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>We call a subarray of <code>nums</code> <strong>nice</strong> if the bitwise <strong>AND</strong> of every pair of elements that are in <strong>different</strong> positions in the subarray is equal to <code>0</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> nice subarray</em>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p><strong>Note</strong> that subarrays of length <code>1</code> are always considered nice.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,8,48,10]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:\n- 3 AND 8 = 0.\n- 3 AND 48 = 0.\n- 8 AND 48 = 0.\nIt can be proven that no longer nice subarray can be obtained, so we return 3.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,5,11,13]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个由 <strong>正</strong> 整数组成的数组 <code>nums</code> 。</p>\n\n<p>如果&nbsp;<code>nums</code> 的子数组中位于 <strong>不同</strong> 位置的每对元素按位 <strong>与（AND）</strong>运算的结果等于 <code>0</code> ，则称该子数组为 <strong>优雅</strong> 子数组。</p>\n\n<p>返回 <strong>最长</strong> 的优雅子数组的长度。</p>\n\n<p><strong>子数组</strong> 是数组中的一个 <strong>连续</strong> 部分。</p>\n\n<p><strong>注意：</strong>长度为 <code>1</code> 的子数组始终视作优雅子数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,3,8,48,10]\n<strong>输出：</strong>3\n<strong>解释：</strong>最长的优雅子数组是 [3,8,48] 。子数组满足题目条件：\n- 3 AND 8 = 0\n- 3 AND 48 = 0\n- 8 AND 48 = 0\n可以证明不存在更长的优雅子数组，所以返回 3 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,1,5,11,13]\n<strong>输出：</strong>1\n<strong>解释：</strong>最长的优雅子数组长度为 1 ，任何长度为 1 的子数组都满足题目条件。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"最长优雅子数组","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int longestNiceSubarray(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int longestNiceSubarray(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def longestNiceSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def longestNiceSubarray(self, nums: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint longestNiceSubarray(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int LongestNiceSubarray(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestNiceSubarray = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Integer}\ndef longest_nice_subarray(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func longestNiceSubarray(_ nums: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func longestNiceSubarray(nums []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def longestNiceSubarray(nums: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun longestNiceSubarray(nums: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn longest_nice_subarray(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestNiceSubarray($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function longestNiceSubarray(nums: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (longest-nice-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec longest_nice_subarray(Nums :: [integer()]) -> integer().\nlongest_nice_subarray(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec longest_nice_subarray(nums :: [integer]) :: integer\n  def longest_nice_subarray(nums) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int longestNiceSubarray(List<int> nums) {\n\n  }\n}"}]}