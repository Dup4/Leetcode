{"slug":"number-of-ways-to-reach-a-position-after-exactly-k-steps","id":2477,"frontendId":6168,"title":"Number of Ways to Reach a Position After Exactly k Steps","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":3200,"totalSubmission":15459,"hints":["How many steps to the left and to the right do you need to make exactly?","Does the order of the steps matter?","Use combinatorics to find the number of ways to order the steps."],"sampleTestCase":"1\n2\n3","exampleTestcases":"1\n2\n3\n2\n5\n10","content":"<p>You are given two <strong>positive</strong> integers <code>startPos</code> and <code>endPos</code>. Initially, you are standing at position <code>startPos</code> on an <strong>infinite</strong> number line. With one step, you can move either one position to the left, or one position to the right.</p>\n\n<p>Given a positive integer <code>k</code>, return <em>the number of <strong>different</strong> ways to reach the position </em><code>endPos</code><em> starting from </em><code>startPos</code><em>, such that you perform <strong>exactly</strong> </em><code>k</code><em> steps</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two ways are considered different if the order of the steps made is not exactly the same.</p>\n\n<p><strong>Note</strong> that the number line includes negative integers.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> startPos = 1, endPos = 2, k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -&gt; 2 -&gt; 3 -&gt; 2.\n- 1 -&gt; 2 -&gt; 1 -&gt; 2.\n- 1 -&gt; 0 -&gt; 1 -&gt; 2.\nIt can be proven that no other way is possible, so we return 3.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> startPos = 2, endPos = 5, k = 10\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> It is impossible to reach position 5 from position 2 in exactly 10 steps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= startPos, endPos, k &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你两个 <strong>正</strong> 整数 <code>startPos</code> 和 <code>endPos</code> 。最初，你站在 <strong>无限</strong> 数轴上位置 <code>startPos</code> 处。在一步移动中，你可以向左或者向右移动一个位置。</p>\n\n<p>给你一个正整数 <code>k</code> ，返回从 <code>startPos</code> 出发、<strong>恰好</strong> 移动 <code>k</code> 步并到达 <code>endPos</code> 的 <strong>不同</strong> 方法数目。由于答案可能会很大，返回对 <code>10<sup>9</sup> + 7</code> <strong>取余</strong> 的结果。</p>\n\n<p>如果所执行移动的顺序不完全相同，则认为两种方法不同。</p>\n\n<p><strong>注意：</strong>数轴包含负整数<strong>。</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>startPos = 1, endPos = 2, k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>存在 3 种从 1 到 2 且恰好移动 3 步的方法：\n- 1 -&gt; 2 -&gt; 3 -&gt; 2.\n- 1 -&gt; 2 -&gt; 1 -&gt; 2.\n- 1 -&gt; 0 -&gt; 1 -&gt; 2.\n可以证明不存在其他方法，所以返回 3 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>startPos = 2, endPos = 5, k = 10\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在从 2 到 5 且恰好移动 10 步的方法。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= startPos, endPos, k &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"恰好移动 k 步到达某一位置的方法数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int numberOfWays(int startPos, int endPos, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int numberOfWays(int startPos, int endPos, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def numberOfWays(self, startPos, endPos, k):\n        \"\"\"\n        :type startPos: int\n        :type endPos: int\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def numberOfWays(self, startPos: int, endPos: int, k: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint numberOfWays(int startPos, int endPos, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int NumberOfWays(int startPos, int endPos, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} startPos\n * @param {number} endPos\n * @param {number} k\n * @return {number}\n */\nvar numberOfWays = function(startPos, endPos, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} start_pos\n# @param {Integer} end_pos\n# @param {Integer} k\n# @return {Integer}\ndef number_of_ways(start_pos, end_pos, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func numberOfWays(_ startPos: Int, _ endPos: Int, _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func numberOfWays(startPos int, endPos int, k int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def numberOfWays(startPos: Int, endPos: Int, k: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun numberOfWays(startPos: Int, endPos: Int, k: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn number_of_ways(start_pos: i32, end_pos: i32, k: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $startPos\n     * @param Integer $endPos\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfWays($startPos, $endPos, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function numberOfWays(startPos: number, endPos: number, k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (number-of-ways startPos endPos k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec number_of_ways(StartPos :: integer(), EndPos :: integer(), K :: integer()) -> integer().\nnumber_of_ways(StartPos, EndPos, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec number_of_ways(start_pos :: integer, end_pos :: integer, k :: integer) :: integer\n  def number_of_ways(start_pos, end_pos, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int numberOfWays(int startPos, int endPos, int k) {\n\n  }\n}"}]}