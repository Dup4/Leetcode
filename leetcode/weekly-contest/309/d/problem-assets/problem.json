{"slug":"meeting-rooms-iii","id":2479,"frontendId":6170,"title":"Meeting Rooms III","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":1718,"totalSubmission":7062,"hints":["Sort meetings based on start times.","Use two min heaps, the first one keeps track of the numbers of all the rooms that are free. The second heap keeps track of the end times of all the meetings that are happening and the room that they are in.","Keep track of the number of times each room is used in an array.","With each meeting, check if there are any free rooms. If there are, then use the room with the smallest number. Otherwise, assign the meeting to the room whose meeting will end the soonest."],"sampleTestCase":"2\n[[0,10],[1,5],[2,7],[3,4]]","exampleTestcases":"2\n[[0,10],[1,5],[2,7],[3,4]]\n3\n[[1,20],[2,10],[3,5],[4,9],[6,8]]","content":"<p>You are given an integer <code>n</code>. There are <code>n</code> rooms numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given a 2D integer array <code>meetings</code> where <code>meetings[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> means that a meeting will be held during the <strong>half-closed</strong> time interval <code>[start<sub>i</sub>, end<sub>i</sub>)</code>. All the values of <code>start<sub>i</sub></code> are <strong>unique</strong>.</p>\n\n<p>Meetings are allocated to rooms in the following manner:</p>\n\n<ol>\n\t<li>Each meeting will take place in the unused room with the <strong>lowest</strong> number.</li>\n\t<li>If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the <strong>same</strong> duration as the original meeting.</li>\n\t<li>When a room becomes unused, meetings that have an earlier original <strong>start</strong> time should be given the room.</li>\n</ol>\n\n<p>Return<em> the <strong>number</strong> of the room that held the most meetings. </em>If there are multiple rooms, return<em> the room with the <strong>lowest</strong> number.</em></p>\n\n<p>A <strong>half-closed interval</strong> <code>[a, b)</code> is the interval between <code>a</code> and <code>b</code> <strong>including</strong> <code>a</code> and <strong>not including</strong> <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\n- At time 0, both rooms are not being used. The first meeting starts in room 0.\n- At time 1, only room 1 is not being used. The second meeting starts in room 1.\n- At time 2, both rooms are being used. The third meeting is delayed.\n- At time 3, both rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).\n- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).\nBoth rooms 0 and 1 held 2 meetings, so we return 0. \n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\n- At time 1, all three rooms are not being used. The first meeting starts in room 0.\n- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.\n- At time 3, only room 2 is not being used. The third meeting starts in room 2.\n- At time 4, all three rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).\n- At time 6, all three rooms are being used. The fifth meeting is delayed.\n- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).\nRoom 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li>All the values of <code>start<sub>i</sub></code> are <strong>unique</strong>.</li>\n</ul>\n","translatedContent":"<p>给你一个整数 <code>n</code> ，共有编号从 <code>0</code> 到 <code>n - 1</code> 的 <code>n</code> 个会议室。</p>\n\n<p>给你一个二维整数数组 <code>meetings</code> ，其中 <code>meetings[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> 表示一场会议将会在 <strong>半闭</strong> 时间区间 <code>[start<sub>i</sub>, end<sub>i</sub>)</code> 举办。所有 <code>start<sub>i</sub></code> 的值 <strong>互不相同</strong> 。</p>\n\n<p>会议将会按以下方式分配给会议室：</p>\n\n<ol>\n\t<li>每场会议都会在未占用且编号 <strong>最小</strong> 的会议室举办。</li>\n\t<li>如果没有可用的会议室，会议将会延期，直到存在空闲的会议室。延期会议的持续时间和原会议持续时间 <strong>相同</strong> 。</li>\n\t<li>当会议室处于未占用状态时，将会优先提供给原 <strong>开始</strong> 时间更早的会议。</li>\n</ol>\n\n<p>返回举办最多次会议的房间 <strong>编号</strong> 。如果存在多个房间满足此条件，则返回编号 <strong>最小</strong> 的房间。</p>\n\n<p><strong>半闭区间 </strong><code>[a, b)</code> 是 <code>a</code> 和 <code>b</code> 之间的区间，<strong>包括</strong> <code>a</code> 但<strong> 不包括</strong> <code>b</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n- 在时间 0 ，两个会议室都未占用，第一场会议在会议室 0 举办。\n- 在时间 1 ，只有会议室 1 未占用，第二场会议在会议室 1 举办。\n- 在时间 2 ，两个会议室都被占用，第三场会议延期举办。\n- 在时间 3 ，两个会议室都被占用，第四场会议延期举办。\n- 在时间 5 ，会议室 1 的会议结束。第三场会议在会议室 1 举办，时间周期为 [5,10) 。\n- 在时间 10 ，两个会议室的会议都结束。第四场会议在会议室 0 举办，时间周期为 [10,11) 。\n会议室 0 和会议室 1 都举办了 2 场会议，所以返回 0 。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n- 在时间 1 ，所有三个会议室都未占用，第一场会议在会议室 0 举办。\n- 在时间 2 ，会议室 1 和 2 未占用，第二场会议在会议室 1 举办。\n- 在时间 3 ，只有会议室 2 未占用，第三场会议在会议室 2 举办。\n- 在时间 4 ，所有三个会议室都被占用，第四场会议延期举办。 \n- 在时间 5 ，会议室 2 的会议结束。第四场会议在会议室 2 举办，时间周期为 [5,10) 。\n- 在时间 6 ，所有三个会议室都被占用，第五场会议延期举办。 \n- 在时间 10 ，会议室 1 和 2 的会议结束。第五场会议在会议室 1 举办，时间周期为 [10,12) 。 \n会议室 1 和会议室 2 都举办了 2 场会议，所以返回 1 。 \n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>start<sub>i</sub></code> 的所有值 <strong>互不相同</strong></li>\n</ul>\n","translatedTitle":"会议室 III","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int mostBooked(int n, vector<vector<int>>& meetings) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int mostBooked(int n, int[][] meetings) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def mostBooked(self, n, meetings):\n        \"\"\"\n        :type n: int\n        :type meetings: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint mostBooked(int n, int** meetings, int meetingsSize, int* meetingsColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MostBooked(int n, int[][] meetings) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @param {number[][]} meetings\n * @return {number}\n */\nvar mostBooked = function(n, meetings) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @param {Integer[][]} meetings\n# @return {Integer}\ndef most_booked(n, meetings)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func mostBooked(_ n: Int, _ meetings: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func mostBooked(n int, meetings [][]int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def mostBooked(n: Int, meetings: Array[Array[Int]]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun mostBooked(n: Int, meetings: Array<IntArray>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn most_booked(n: i32, meetings: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $meetings\n     * @return Integer\n     */\n    function mostBooked($n, $meetings) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function mostBooked(n: number, meetings: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (most-booked n meetings)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec most_booked(N :: integer(), Meetings :: [[integer()]]) -> integer().\nmost_booked(N, Meetings) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec most_booked(n :: integer, meetings :: [[integer]]) :: integer\n  def most_booked(n, meetings) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int mostBooked(int n, List<List<int>> meetings) {\n\n  }\n}"}]}