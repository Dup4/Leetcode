{"slug":"largest-positive-integer-that-exists-with-its-negative","id":2524,"frontendId":6204,"title":"Largest Positive Integer That Exists With Its Negative","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":5345,"totalSubmission":7443,"hints":["What data structure can help you to determine if an element exists?","Would a hash table help?"],"sampleTestCase":"[-1,2,-3,3]","exampleTestcases":"[-1,2,-3,3]\n[-1,10,6,7,-7,1]\n[-10,8,6,7,-2,-3]","content":"<p>Given an integer array <code>nums</code> that <strong>does not contain</strong> any zeros, find <strong>the largest positive</strong> integer <code>k</code> such that <code>-k</code> also exists in the array.</p>\n\n<p>Return <em>the positive integer </em><code>k</code>. If there is no such integer, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,2,-3,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 is the only valid k we can find in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,10,6,7,-7,1]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-10,8,6,7,-2,-3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no a single valid k, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n","translatedContent":"<p>给你一个 <strong>不包含</strong> 任何零的整数数组 <code>nums</code> ，找出自身与对应的负数都在数组中存在的最大正整数 <code>k</code> 。</p>\n\n<p>返回正整数<em> </em><code>k</code> ，如果不存在这样的整数，返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-1,2,-3,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>3 是数组中唯一一个满足题目要求的 k 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-1,10,6,7,-7,1]\n<strong>输出：</strong>7\n<strong>解释：</strong>数组中存在 1 和 7 对应的负数，7 的值更大。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-10,8,6,7,-2,-3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>不存在满足题目要求的 k ，返回 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n","translatedTitle":"与对应负数同时存在的最大正整数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int findMaxK(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int findMaxK(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def findMaxK(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def findMaxK(self, nums: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint findMaxK(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int FindMaxK(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxK = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_k(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func findMaxK(_ nums: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func findMaxK(nums []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def findMaxK(nums: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun findMaxK(nums: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn find_max_k(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaxK($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function findMaxK(nums: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (find-max-k nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec find_max_k(Nums :: [integer()]) -> integer().\nfind_max_k(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec find_max_k(nums :: [integer]) :: integer\n  def find_max_k(nums) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int findMaxK(List<int> nums) {\n\n  }\n}"}]}