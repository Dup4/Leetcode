{"slug":"count-subarrays-with-fixed-bounds","id":2527,"frontendId":6207,"title":"Count Subarrays With Fixed Bounds","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":5,"dislikes":0,"status":2,"tag":[],"totalAccepted":1254,"totalSubmission":6206,"hints":["Can you solve the problem if all the numbers in the array were between minK and maxK inclusive?","Think of the inclusion-exclusion principle.","Divide the array into multiple subarrays such that each number in each subarray is between minK and maxK inclusive, solve the previous problem for each subarray, and sum all the answers."],"sampleTestCase":"[1,3,5,2,7,5]\n1\n5","exampleTestcases":"[1,3,5,2,7,5]\n1\n5\n[1,1,1,1]\n1\n1","content":"<p>You are given an integer array <code>nums</code> and two integers <code>minK</code> and <code>maxK</code>.</p>\n\n<p>A <strong>fixed-bound subarray</strong> of <code>nums</code> is a subarray that satisfies the following conditions:</p>\n\n<ul>\n\t<li>The <strong>minimum</strong> value in the subarray is equal to <code>minK</code>.</li>\n\t<li>The <strong>maximum</strong> value in the subarray is equal to <code>maxK</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>number</strong> of fixed-bound subarrays</em>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,2,7,5], minK = 1, maxK = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The fixed-bound subarrays are [1,3,5] and [1,3,5,2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1], minK = 1, maxK = 1\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], minK, maxK &lt;= 10<sup>6</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> 和两个整数 <code>minK</code> 以及 <code>maxK</code> 。</p>\n\n<p><code>nums</code> 的定界子数组是满足下述条件的一个子数组：</p>\n\n<ul>\n\t<li>子数组中的 <strong>最小值</strong> 等于 <code>minK</code> 。</li>\n\t<li>子数组中的 <strong>最大值</strong> 等于 <code>maxK</code> 。</li>\n</ul>\n\n<p>返回定界子数组的数目。</p>\n\n<p>子数组是数组中的一个连续部分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,3,5,2,7,5], minK = 1, maxK = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>定界子数组是 [1,3,5] 和 [1,3,5,2] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,1,1,1], minK = 1, maxK = 1\n<strong>输出：</strong>10\n<strong>解释：</strong>nums 的每个子数组都是一个定界子数组。共有 10 个子数组。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], minK, maxK &lt;= 10<sup>6</sup></code></li>\n</ul>\n","translatedTitle":"统计定界子数组的数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int minK, int maxK) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long countSubarrays(int[] nums, int minK, int maxK) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countSubarrays(self, nums, minK, maxK):\n        \"\"\"\n        :type nums: List[int]\n        :type minK: int\n        :type maxK: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long countSubarrays(int* nums, int numsSize, int minK, int maxK){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long CountSubarrays(int[] nums, int minK, int maxK) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} minK\n * @param {number} maxK\n * @return {number}\n */\nvar countSubarrays = function(nums, minK, maxK) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} min_k\n# @param {Integer} max_k\n# @return {Integer}\ndef count_subarrays(nums, min_k, max_k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countSubarrays(_ nums: [Int], _ minK: Int, _ maxK: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countSubarrays(nums []int, minK int, maxK int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countSubarrays(nums: Array[Int], minK: Int, maxK: Int): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countSubarrays(nums: IntArray, minK: Int, maxK: Int): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, min_k: i32, max_k: i32) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $minK\n     * @param Integer $maxK\n     * @return Integer\n     */\n    function countSubarrays($nums, $minK, $maxK) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countSubarrays(nums: number[], minK: number, maxK: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-subarrays nums minK maxK)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_subarrays(Nums :: [integer()], MinK :: integer(), MaxK :: integer()) -> integer().\ncount_subarrays(Nums, MinK, MaxK) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_subarrays(nums :: [integer], min_k :: integer, max_k :: integer) :: integer\n  def count_subarrays(nums, min_k, max_k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int countSubarrays(List<int> nums, int minK, int maxK) {\n\n  }\n}"}]}