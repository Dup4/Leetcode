{"slug":"minimum-obstacle-removal-to-reach-corner","id":2375,"frontendId":2290,"title":"Minimum Obstacle Removal to Reach Corner","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":17,"dislikes":0,"status":2,"tag":[],"totalAccepted":3262,"totalSubmission":6486,"hints":["Model the grid as a graph where cells are nodes and edges are between adjacent cells. Edges to cells with obstacles have a cost of 1 and all other edges have a cost of 0.","Could you use 0-1 Breadth-First Search or Dijkstra’s algorithm?"],"sampleTestCase":"[[0,1,1],[1,1,0],[1,1,0]]","exampleTestcases":"[[0,1,1],[1,1,0],[1,1,0]]\n[[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]","content":"<p>You are given a <strong>0-indexed</strong> 2D integer array <code>grid</code> of size <code>m x n</code>. Each cell has one of two values:</p>\n\n<ul>\n\t<li><code>0</code> represents an <strong>empty</strong> cell,</li>\n\t<li><code>1</code> represents an <strong>obstacle</strong> that may be removed.</li>\n</ul>\n\n<p>You can move up, down, left, or right from and to an empty cell.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of <strong>obstacles</strong> to <strong>remove</strong> so you can move from the upper left corner </em><code>(0, 0)</code><em> to the lower right corner </em><code>(m - 1, n - 1)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-06-example1drawio-1.png\" style=\"width: 605px; height: 246px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,1],[1,1,0],[1,1,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).\nIt can be shown that we need to remove at least 2 obstacles, so we return 2.\nNote that there may be other ways to remove 2 obstacles to create a path.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-06-example1drawio.png\" style=\"width: 405px; height: 246px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> <strong>or</strong> <code>1</code>.</li>\n\t<li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>grid</code> ，数组大小为 <code>m x n</code> 。每个单元格都是两个值之一：</p>\n\n<ul>\n\t<li><code>0</code> 表示一个 <strong>空</strong> 单元格，</li>\n\t<li><code>1</code> 表示一个可以移除的 <strong>障碍物</strong> 。</li>\n</ul>\n\n<p>你可以向上、下、左、右移动，从一个空单元格移动到另一个空单元格。</p>\n\n<p>现在你需要从左上角&nbsp;<code>(0, 0)</code> 移动到右下角 <code>(m - 1, n - 1)</code> ，返回需要移除的障碍物的 <strong>最小</strong> 数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-06-example1drawio-1.png\" style=\"width: 605px; height: 246px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[0,1,1],[1,1,0],[1,1,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>可以移除位于 (0, 1) 和 (0, 2) 的障碍物来创建从 (0, 0) 到 (2, 2) 的路径。\n可以证明我们至少需要移除两个障碍物，所以返回 2 。\n注意，可能存在其他方式来移除 2 个障碍物，创建出可行的路径。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-04-06-example1drawio.png\" style=\"width: 405px; height: 246px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>不移除任何障碍物就能从 (0, 0) 到 (2, 4) ，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>grid[i][j]</code> 为 <code>0</code> <strong>或</strong> <code>1</code></li>\n\t<li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li>\n</ul>\n","translatedTitle":"到达角落需要移除障碍物的最小数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int minimumObstacles(vector<vector<int>>& grid) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int minimumObstacles(int[][] grid) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def minimumObstacles(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def minimumObstacles(self, grid: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint minimumObstacles(int** grid, int gridSize, int* gridColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MinimumObstacles(int[][] grid) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumObstacles = function(grid) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_obstacles(grid)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func minimumObstacles(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func minimumObstacles(grid [][]int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def minimumObstacles(grid: Array[Array[Int]]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun minimumObstacles(grid: Array<IntArray>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn minimum_obstacles(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumObstacles($grid) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function minimumObstacles(grid: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (minimum-obstacles grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec minimum_obstacles(Grid :: [[integer()]]) -> integer().\nminimum_obstacles(Grid) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec minimum_obstacles(grid :: [[integer]]) :: integer\n  def minimum_obstacles(grid) do\n\n  end\nend"}]}