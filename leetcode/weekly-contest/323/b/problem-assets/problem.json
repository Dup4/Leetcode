{"slug":"longest-square-streak-in-an-array","id":2586,"frontendId":6258,"title":"Longest Square Streak in an Array","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2922,"totalSubmission":8019,"hints":["With the constraints, the length of the longest square streak possible is 5.","Store the elements of nums in a set to quickly check if it exists.","Store the elements of nums in a set to quickly check if it exists."],"sampleTestCase":"[4,3,6,16,8,2]","exampleTestcases":"[4,3,6,16,8,2]\n[2,3,5,6,7]","content":"<p>You are given an integer array <code>nums</code>. A subsequence of <code>nums</code> is called a <strong>square streak</strong> if:</p>\n\n<ul>\n\t<li>The length of the subsequence is at least <code>2</code>, and</li>\n\t<li><strong>after</strong> sorting the subsequence, each element (except the first element) is the <strong>square</strong> of the previous number.</li>\n</ul>\n\n<p>Return<em> the length of the <strong>longest square streak</strong> in </em><code>nums</code><em>, or return </em><code>-1</code><em> if there is no <strong>square streak</strong>.</em></p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,6,16,8,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,5,6,7]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no square streak in nums so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> 。如果 <code>nums</code> 的子序列满足下述条件，则认为该子序列是一个 <strong>方波</strong> ：</p>\n\n<ul>\n\t<li>子序列的长度至少为 <code>2</code> ，并且</li>\n\t<li>将子序列从小到大排序 <strong>之后</strong> ，除第一个元素外，每个元素都是前一个元素的 <strong>平方</strong> 。</li>\n</ul>\n\n<p>返回<em> </em><code>nums</code><em> </em>中 <strong>最长方波</strong> 的长度，如果不存在 <strong>方波</strong><em> </em>则返回<em> </em><code>-1</code> 。</p>\n\n<p><strong>子序列</strong> 也是一个数组，可以由另一个数组删除一些或不删除元素且不改变剩余元素的顺序得到。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1 ：</strong></p>\n\n<pre><strong>输入：</strong>nums = [4,3,6,16,8,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>选出子序列 [4,16,2] 。排序后，得到 [2,4,16] 。\n- 4 = 2 * 2.\n- 16 = 4 * 4.\n因此，[4,16,2] 是一个方波.\n可以证明长度为 4 的子序列都不是方波。\n</pre>\n\n<p><strong>示例 2 ：</strong></p>\n\n<pre><strong>输入：</strong>nums = [2,3,5,6,7]\n<strong>输出：</strong>-1\n<strong>解释：</strong>nums 不存在方波，所以返回 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","translatedTitle":"数组中最长的方波","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int longestSquareStreak(vector<int>& nums) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int longestSquareStreak(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def longestSquareStreak(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"int longestSquareStreak(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int LongestSquareStreak(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestSquareStreak = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Integer}\ndef longest_square_streak(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func longestSquareStreak(_ nums: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func longestSquareStreak(nums []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def longestSquareStreak(nums: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun longestSquareStreak(nums: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn longest_square_streak(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestSquareStreak($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function longestSquareStreak(nums: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (longest-square-streak nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec longest_square_streak(Nums :: [integer()]) -> integer().\nlongest_square_streak(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec longest_square_streak(nums :: [integer]) :: integer\n  def longest_square_streak(nums) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int longestSquareStreak(List<int> nums) {\n\n  }\n}"}]}