{"slug":"beautiful-towers-i","id":3114,"frontendId":100049,"title":"Beautiful Towers I","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":2931,"totalSubmission":6970,"hints":["Try all the possible indices <code>i</code> as the peak.","If <code>i</code> is the peak, start from <code>heights[i] = maxHeights[i]</code>, and <code>heights[j] = max(maxHeights[j], heights[j + 1])</code> for <code>0 <= j < i </code>","If <code>i</code> is the peak, start from <code>heights[i] = maxHeights[i]</code>, and heights[j] = max(maxHeights[j], heights[j - 1]) for <code>i < j < heights.size()</code>"],"sampleTestCase":"[5,3,4,1,1]","exampleTestcases":"[5,3,4,1,1]\n[6,5,3,9,2,7]\n[3,2,5,5,2,3]","content":"<p>You are given a <strong>0-indexed</strong> array <code>maxHeights</code> of <code>n</code> integers.</p>\n\n<p>You are tasked with building <code>n</code> towers in the coordinate line. The <code>i<sup>th</sup></code> tower is built at coordinate <code>i</code> and has a height of <code>heights[i]</code>.</p>\n\n<p>A configuration of towers is <strong>beautiful</strong> if the following conditions hold:</p>\n\n<ol>\n\t<li><code>1 &lt;= heights[i] &lt;= maxHeights[i]</code></li>\n\t<li><code>heights</code> is a <strong>mountain</strong> array.</li>\n</ol>\n\n<p>Array <code>heights</code> is a <strong>mountain</strong> if there exists an index <code>i</code> such that:</p>\n\n<ul>\n\t<li>For all <code>0 &lt; j &lt;= i</code>, <code>heights[j - 1] &lt;= heights[j]</code></li>\n\t<li>For all <code>i &lt;= k &lt; n - 1</code>, <code>heights[k + 1] &lt;= heights[k]</code></li>\n</ul>\n\n<p>Return <em>the <strong>maximum possible sum of heights</strong> of a beautiful configuration of towers</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxHeights = [5,3,4,1,1]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxHeights = [6,5,3,9,2,7]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxHeights = [3,2,5,5,2,3]\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == maxHeights &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= maxHeights[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个长度为 <code>n</code>&nbsp;下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>maxHeights</code>&nbsp;。</p>\n\n<p>你的任务是在坐标轴上建 <code>n</code>&nbsp;座塔。第&nbsp;<code>i</code>&nbsp;座塔的下标为 <code>i</code>&nbsp;，高度为&nbsp;<code>heights[i]</code>&nbsp;。</p>\n\n<p>如果以下条件满足，我们称这些塔是 <strong>美丽</strong>&nbsp;的：</p>\n\n<ol>\n\t<li><code>1 &lt;= heights[i] &lt;= maxHeights[i]</code></li>\n\t<li><code>heights</code>&nbsp;是一个 <strong>山状</strong>&nbsp;数组。</li>\n</ol>\n\n<p>如果存在下标 <code>i</code>&nbsp;满足以下条件，那么我们称数组&nbsp;<code>heights</code>&nbsp;是一个 <strong>山状</strong>&nbsp;数组：</p>\n\n<ul>\n\t<li>对于所有&nbsp;<code>0 &lt; j &lt;= i</code>&nbsp;，都有&nbsp;<code>heights[j - 1] &lt;= heights[j]</code></li>\n\t<li>对于所有&nbsp;<code>i &lt;= k &lt; n - 1</code>&nbsp;，都有&nbsp;<code>heights[k + 1] &lt;= heights[k]</code></li>\n</ul>\n\n<p>请你返回满足 <b>美丽塔</b>&nbsp;要求的方案中，<strong>高度和的最大值</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>maxHeights = [5,3,4,1,1]\n<b>输出：</b>13\n<b>解释：</b>和最大的美丽塔方案为 heights = [5,3,3,1,1] ，这是一个美丽塔方案，因为：\n- 1 &lt;= heights[i] &lt;= maxHeights[i]  \n- heights 是个山状数组，峰值在 i = 0 处。\n13 是所有美丽塔方案中的最大高度和。</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>maxHeights = [6,5,3,9,2,7]\n<b>输出：</b>22\n<strong>解释：</strong> 和最大的美丽塔方案为 heights = [3,3,3,9,2,2] ，这是一个美丽塔方案，因为：\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights 是个山状数组，峰值在 i = 3 处。\n22 是所有美丽塔方案中的最大高度和。</pre>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>maxHeights = [3,2,5,5,2,3]\n<b>输出：</b>18\n<strong>解释：</strong>和最大的美丽塔方案为 heights = [2,2,5,5,2,2] ，这是一个美丽塔方案，因为：\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights 是个山状数组，最大值在 i = 2 处。\n注意，在这个方案中，i = 3 也是一个峰值。\n18 是所有美丽塔方案中的最大高度和。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == maxHeights &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= maxHeights[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"美丽塔 I","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long maximumSumOfHeights(vector<int>& maxHeights) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long maximumSumOfHeights(List<Integer> maxHeights) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumSumOfHeights(self, maxHeights):\n        \"\"\"\n        :type maxHeights: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"long long maximumSumOfHeights(int* maxHeights, int maxHeightsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long MaximumSumOfHeights(IList<int> maxHeights) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} maxHeights\n * @return {number}\n */\nvar maximumSumOfHeights = function(maxHeights) {\n\n};"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumSumOfHeights(maxHeights: number[]): number {\n\n};"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $maxHeights\n     * @return Integer\n     */\n    function maximumSumOfHeights($maxHeights) {\n\n    }\n}"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumSumOfHeights(_ maxHeights: [Int]) -> Int {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumSumOfHeights(maxHeights: List<Int>): Long {\n\n    }\n}"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int maximumSumOfHeights(List<int> maxHeights) {\n\n  }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumSumOfHeights(maxHeights []int) int64 {\n\n}"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} max_heights\n# @return {Integer}\ndef maximum_sum_of_heights(max_heights)\n\nend"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumSumOfHeights(maxHeights: List[Int]): Long = {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_sum_of_heights(max_heights: Vec<i32>) -> i64 {\n\n    }\n}"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-sum-of-heights maxHeights)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_sum_of_heights(MaxHeights :: [integer()]) -> integer().\nmaximum_sum_of_heights(MaxHeights) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_sum_of_heights(max_heights :: [integer]) :: integer\n  def maximum_sum_of_heights(max_heights) do\n\n  end\nend"}]}