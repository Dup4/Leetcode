{"slug":"maximum-odd-binary-number","id":3055,"frontendId":8048,"title":"Maximum Odd Binary Number","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":3669,"totalSubmission":4723,"hints":["The binary representation of an odd number contains <code>'1'</code> in the least significant place."],"sampleTestCase":"\"010\"","exampleTestcases":"\"010\"\n\"0101\"","content":"<p>You are given a <strong>binary</strong> string <code>s</code> that contains at least one <code>&#39;1&#39;</code>.</p>\n\n<p>You have to <strong>rearrange</strong> the bits in such a way that the resulting binary number is the <strong>maximum odd binary number</strong> that can be created from this combination.</p>\n\n<p>Return <em>a string representing the maximum odd binary number that can be created from the given combination.</em></p>\n\n<p><strong>Note </strong>that the resulting string <strong>can</strong> have leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;010&quot;\n<strong>Output:</strong> &quot;001&quot;\n<strong>Explanation:</strong> Because there is just one &#39;1&#39;, it must be in the last position. So the answer is &quot;001&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0101&quot;\n<strong>Output:</strong> &quot;1001&quot;\n<strong>Explanation: </strong>One of the &#39;1&#39;s must be in the last position. The maximum number that can be made with the remaining digits is &quot;100&quot;. So the answer is &quot;1001&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n\t<li><code>s</code> contains at least one <code>&#39;1&#39;</code>.</li>\n</ul>\n","translatedContent":"<p>给你一个 <strong>二进制</strong> 字符串 <code>s</code> ，其中至少包含一个 <code>'1'</code> 。</p>\n\n<p>你必须按某种方式 <strong>重新排列</strong> 字符串中的位，使得到的二进制数字是可以由该组合生成的 <strong>最大二进制奇数</strong> 。</p>\n\n<p>以字符串形式，表示并返回可以由给定组合生成的最大二进制奇数。</p>\n\n<p><strong>注意 </strong>返回的结果字符串 <strong>可以</strong> 含前导零。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"010\"\n<strong>输出：</strong>\"001\"\n<strong>解释：</strong>因为字符串 s 中仅有一个 '1' ，其必须出现在最后一位上。所以答案是 \"001\" 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"0101\"\n<strong>输出：</strong>\"1001\"\n<strong>解释：</strong>其中一个 '1' 必须出现在最后一位上。而由剩下的数字可以生产的最大数字是 \"100\" 。所以答案是 \"1001\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> 仅由 <code>'0'</code> 和 <code>'1'</code> 组成</li>\n\t<li><code>s</code> 中至少包含一个 <code>'1'</code></li>\n</ul>\n","translatedTitle":"最大二进制奇数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string maximumOddBinaryNumber(string s) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String maximumOddBinaryNumber(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumOddBinaryNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumOddBinaryNumber(self, s: str) -> str:"},{"lang":"C","langSlug":"c","code":"char* maximumOddBinaryNumber(char* s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string MaximumOddBinaryNumber(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {string}\n */\nvar maximumOddBinaryNumber = function(s) {\n\n};"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumOddBinaryNumber(s: string): string {\n\n};"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function maximumOddBinaryNumber($s) {\n\n    }\n}"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumOddBinaryNumber(_ s: String) -> String {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumOddBinaryNumber(s: String): String {\n\n    }\n}"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  String maximumOddBinaryNumber(String s) {\n\n  }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumOddBinaryNumber(s string) string {\n\n}"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {String}\ndef maximum_odd_binary_number(s)\n\nend"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumOddBinaryNumber(s: String): String = {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_odd_binary_number(s: String) -> String {\n\n    }\n}"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-odd-binary-number s)\n  (-> string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_odd_binary_number(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmaximum_odd_binary_number(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_odd_binary_number(s :: String.t) :: String.t\n  def maximum_odd_binary_number(s) do\n\n  end\nend"}]}