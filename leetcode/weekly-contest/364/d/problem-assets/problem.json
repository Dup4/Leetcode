{"slug":"count-valid-paths-in-a-tree","id":3112,"frontendId":100047,"title":"Count Valid Paths in a Tree","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":5,"dislikes":0,"status":2,"tag":[],"totalAccepted":606,"totalSubmission":3403,"hints":["Use the sieve of Eratosthenes to find all prime numbers in the range <code>[1, n]</code>.****","Root the tree at any node.","Let <code>dp[i][0] = the number of vertical paths starting from i containing no prime nodes </code>, and <code>dp[i][1] = the number of vertical paths starting from i containing one prime node </code>.","If <code>i</code> is not prime, <code>dp[i][0] = sum(dp[child][0]) + 1</code>, and <code>dp[i][1] = sum(dp[child][1])</code> for each <code>child</code> of <code>i</code> in the rooted tree.","If <code>i</code> is prime, <code>dp[i][0] = 0</code>, and <code>dp[i][1] = sum(dp[child][0]) + 1</code> for each <code>child</code> of <code>i</code> in the rooted tree.","For each node <code>i</code>, and using the computed <code>dp</code> matrix, count the number of unordered pairs <code>(a,b)</code> such that <code>lca(a,b) = i</code>, and there exists exactly one prime number on the path from <code>a</code> to <code>b</code>."],"sampleTestCase":"5\n[[1,2],[1,3],[2,4],[2,5]]","exampleTestcases":"5\n[[1,2],[1,3],[2,4],[2,5]]\n6\n[[1,2],[1,3],[2,4],[3,5],[3,6]]","content":"<p>There is an undirected tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree.</p>\n\n<p>Return <em>the <strong>number of valid paths</strong> in the tree</em>.</p>\n\n<p>A path <code>(a, b)</code> is <strong>valid</strong> if there exists <strong>exactly one</strong> prime number among the node labels in the path from <code>a</code> to <code>b</code>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>The path <code>(a, b)</code> is a sequence of <strong>distinct</strong> nodes starting with node <code>a</code> and ending with node <code>b</code> such that every two adjacent nodes in the sequence share an edge in the tree.</li>\n\t<li>Path <code>(a, b)</code> and path <code>(b, a)</code> are considered the <strong>same</strong> and counted only <strong>once</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2023-08-27-example1.png\" style=\"width: 440px; height: 357px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2. \n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2023-08-27-example2.png\" style=\"width: 488px; height: 384px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li>The input is generated such that <code>edges</code> represent a valid tree.</li>\n</ul>\n","translatedContent":"<p>给你一棵 <code>n</code>&nbsp;个节点的无向树，节点编号为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;。给你一个整数&nbsp;<code>n</code>&nbsp;和一个长度为 <code>n - 1</code>&nbsp;的二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示节点&nbsp;<code>u<sub>i</sub></code> 和&nbsp;<code>v<sub>i</sub></code>&nbsp;在树中有一条边。</p>\n\n<p>请你返回树中的 <strong>合法路径数目</strong>&nbsp;。</p>\n\n<p>如果在节点 <code>a</code>&nbsp;到节点 <code>b</code>&nbsp;之间 <strong>恰好有一个</strong>&nbsp;节点的编号是质数，那么我们称路径&nbsp;<code>(a, b)</code>&nbsp;是 <strong>合法的</strong>&nbsp;。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>路径&nbsp;<code>(a, b)</code>&nbsp;指的是一条从节点 <code>a</code>&nbsp;开始到节点 <code>b</code>&nbsp;结束的一个节点序列，序列中的节点 <strong>互不相同</strong>&nbsp;，且相邻节点之间在树上有一条边。</li>\n\t<li>路径&nbsp;<code>(a, b)</code>&nbsp;和路径&nbsp;<code>(b, a)</code>&nbsp;视为 <strong>同一条</strong>&nbsp;路径，且只计入答案 <strong>一次</strong>&nbsp;。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2023-08-27-example1.png\" style=\"width: 440px; height: 357px;\" /></p>\n\n<pre>\n<b>输入：</b>n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\n<b>输出：</b>4\n<b>解释：</b>恰好有一个质数编号的节点路径有：\n- (1, 2) 因为路径 1 到 2 只包含一个质数 2 。\n- (1, 3) 因为路径 1 到 3 只包含一个质数 3 。\n- (1, 4) 因为路径 1 到 4 只包含一个质数 2 。\n- (2, 4) 因为路径 2 到 4 只包含一个质数 2 。\n只有 4 条合法路径。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2023-08-27-example2.png\" style=\"width: 488px; height: 384px;\" /></p>\n\n<pre>\n<b>输入：</b>n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\n<b>输出：</b>6\n<b>解释：</b>恰好有一个质数编号的节点路径有：\n- (1, 2) 因为路径 1 到 2 只包含一个质数 2 。\n- (1, 3) 因为路径 1 到 3 只包含一个质数 3 。\n- (1, 4) 因为路径 1 到 4 只包含一个质数 2 。\n- (1, 6) 因为路径 1 到 6 只包含一个质数 3 。\n- (2, 4) 因为路径 2 到 4 只包含一个质数 2 。\n- (3, 6) 因为路径 3 到 6 只包含一个质数 3 。\n只有 6 条合法路径。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li>输入保证&nbsp;<code>edges</code>&nbsp;形成一棵合法的树。</li>\n</ul>\n","translatedTitle":"统计树中的合法路径数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long countPaths(int n, vector<vector<int>>& edges) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long countPaths(int n, int[][] edges) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countPaths(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countPaths(self, n: int, edges: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"long long countPaths(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long CountPaths(int n, int[][] edges) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar countPaths = function(n, edges) {\n\n};"},{"lang":"TypeScript","langSlug":"typescript","code":"function countPaths(n: number, edges: number[][]): number {\n    \n};"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function countPaths($n, $edges) {\n\n    }\n}"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countPaths(_ n: Int, _ edges: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countPaths(n: Int, edges: Array<IntArray>): Long {\n\n    }\n}"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int countPaths(int n, List<List<int>> edges) {\n    \n  }\n}"},{"lang":"Go","langSlug":"golang","code":"func countPaths(n int, edges [][]int) int64 {\n\n}"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef count_paths(n, edges)\n\nend"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countPaths(n: Int, edges: Array[Array[Int]]): Long = {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_paths(n: i32, edges: Vec<Vec<i32>>) -> i64 {\n\n    }\n}"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-paths n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_paths(N :: integer(), Edges :: [[integer()]]) -> integer().\ncount_paths(N, Edges) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_paths(n :: integer, edges :: [[integer]]) :: integer\n  def count_paths(n, edges) do\n    \n  end\nend"}]}