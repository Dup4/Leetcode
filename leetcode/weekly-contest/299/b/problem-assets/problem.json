{"slug":"count-number-of-ways-to-place-houses","id":2397,"frontendId":6100,"title":"Count Number of Ways to Place Houses","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3066,"totalSubmission":9821,"hints":["Try coming up with a DP solution for one side of the street.","The DP for one side of the street will bear resemblance to the Fibonacci sequence.","The number of different arrangements on both side of the street is the same."],"sampleTestCase":"1","exampleTestcases":"1\n2","content":"<p>There is a street with <code>n * 2</code> <strong>plots</strong>, where there are <code>n</code> plots on each side of the street. The plots on each side are numbered from <code>1</code> to <code>n</code>. On each plot, a house can be placed.</p>\n\n<p>Return <em>the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Note that if a house is placed on the <code>i<sup>th</sup></code> plot on one side of the street, a house can also be placed on the <code>i<sup>th</sup></code> plot on the other side of the street.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nPossible arrangements:\n1. All plots are empty.\n2. A house is placed on one side of the street.\n3. A house is placed on the other side of the street.\n4. Two houses are placed, one on each side of the street.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-05-12-arrangements.png\" style=\"width: 500px; height: 500px;\" />\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The 9 possible arrangements are shown in the diagram above.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedContent":"<p>一条街道上共有 <code>n * 2</code> 个 <strong>地块</strong> ，街道的两侧各有 <code>n</code> 个地块。每一边的地块都按从 <code>1</code> 到 <code>n</code> 编号。每个地块上都可以放置一所房子。</p>\n\n<p>现要求街道同一侧不能存在两所房子相邻的情况，请你计算并返回放置房屋的方式数目。由于答案可能很大，需要对 <code>10<sup>9</sup> + 7</code> 取余后再返回。</p>\n\n<p>注意，如果一所房子放置在这条街某一侧上的第 <code>i</code> 个地块，不影响在另一侧的第 <code>i</code> 个地块放置房子。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>\n可能的放置方式：\n1. 所有地块都不放置房子。\n2. 一所房子放在街道的某一侧。\n3. 一所房子放在街道的另一侧。\n4. 放置两所房子，街道两侧各放置一所。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-05-12-arrangements.png\" style=\"width: 500px; height: 500px;\">\n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>9\n<strong>解释：</strong>如上图所示，共有 9 种可能的放置方式。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedTitle":"统计放置房子的方式数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int countHousePlacements(int n) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int countHousePlacements(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countHousePlacements(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countHousePlacements(self, n: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint countHousePlacements(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int CountHousePlacements(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar countHousePlacements = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {Integer}\ndef count_house_placements(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countHousePlacements(_ n: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countHousePlacements(n int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countHousePlacements(n: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countHousePlacements(n: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_house_placements(n: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countHousePlacements($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countHousePlacements(n: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-house-placements n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_house_placements(N :: integer()) -> integer().\ncount_house_placements(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_house_placements(n :: integer) :: integer\n  def count_house_placements(n) do\n\n  end\nend"}]}