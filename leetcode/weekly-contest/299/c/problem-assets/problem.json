{"slug":"maximum-score-of-spliced-array","id":1348,"frontendId":5229,"title":"Maximum Score Of Spliced Array","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":2149,"totalSubmission":5758,"hints":["Think on Dynamic Programming.","First assume you will be taking the array a and choose some subarray from b","Suppose the DP is DP(pos, state). pos is the current position you are in. state is one of {0,1,2}, where 0 means taking the array a, 1 means we are taking the subarray b, and 2 means we are again taking the array a. We need to handle the transitions carefully."],"sampleTestCase":"[60,60,60]\n[10,90,10]","exampleTestcases":"[60,60,60]\n[10,90,10]\n[20,40,20,70,30]\n[50,20,50,40,20]\n[7,11,13]\n[1,1,1]","content":"<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, both of length <code>n</code>.</p>\n\n<p>You can choose two integers <code>left</code> and <code>right</code> where <code>0 &lt;= left &lt;= right &lt; n</code> and <strong>swap</strong> the subarray <code>nums1[left...right]</code> with the subarray <code>nums2[left...right]</code>.</p>\n\n<ul>\n\t<li>For example, if <code>nums1 = [1,2,3,4,5]</code> and <code>nums2 = [11,12,13,14,15]</code> and you choose <code>left = 1</code> and <code>right = 2</code>, <code>nums1</code> becomes <code>[1,<strong><u>12,13</u></strong>,4,5]</code> and <code>nums2</code> becomes <code>[11,<strong><u>2,3</u></strong>,14,15]</code>.</li>\n</ul>\n\n<p>You may choose to apply the mentioned operation <strong>once</strong> or not do anything.</p>\n\n<p>The <strong>score</strong> of the arrays is the <strong>maximum</strong> of <code>sum(nums1)</code> and <code>sum(nums2)</code>, where <code>sum(arr)</code> is the sum of all the elements in the array <code>arr</code>.</p>\n\n<p>Return <em>the <strong>maximum possible score</strong></em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous sequence of elements within an array. <code>arr[left...right]</code> denotes the subarray that contains the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> (<strong>inclusive</strong>).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [60,60,60], nums2 = [10,90,10]\n<strong>Output:</strong> 210\n<strong>Explanation:</strong> Choosing left = 1 and right = 1, we have nums1 = [60,<u><strong>90</strong></u>,60] and nums2 = [10,<u><strong>60</strong></u>,10].\nThe score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]\n<strong>Output:</strong> 220\n<strong>Explanation:</strong> Choosing left = 3, right = 4, we have nums1 = [20,40,20,<u><strong>40,20</strong></u>] and nums2 = [50,20,50,<u><strong>70,30</strong></u>].\nThe score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [7,11,13], nums2 = [1,1,1]\n<strong>Output:</strong> 31\n<strong>Explanation:</strong> We choose not to swap any subarray.\nThe score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedContent":"<p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，长度都是 <code>n</code> 。</p>\n\n<p>你可以选择两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>0 &lt;= left &lt;= right &lt; n</code> ，接着 <strong>交换</strong> 两个子数组 <code>nums1[left...right]</code> 和 <code>nums2[left...right]</code> 。</p>\n\n<ul>\n\t<li>例如，设 <code>nums1 = [1,2,3,4,5]</code> 和 <code>nums2 = [11,12,13,14,15]</code> ，整数选择 <code>left = 1</code> 和 <code>right = 2</code>，那么 <code>nums1</code> 会变为 <code>[1,<strong><em>12</em>,<em>13</em></strong>,4,5]</code> 而 <code>nums2</code> 会变为 <code>[11,<em><strong>2,3</strong></em>,14,15]</code> 。</li>\n</ul>\n\n<p>你可以选择执行上述操作 <strong>一次</strong> 或不执行任何操作。</p>\n\n<p>数组的 <strong>分数</strong> 取 <code>sum(nums1)</code> 和 <code>sum(nums2)</code> 中的最大值，其中 <code>sum(arr)</code> 是数组 <code>arr</code> 中所有元素之和。</p>\n\n<p>返回 <strong>可能的最大分数</strong> 。</p>\n\n<p><strong>子数组 </strong>是数组中连续的一个元素序列。<code>arr[left...right]</code> 表示子数组包含 <code>nums</code> 中下标 <code>left</code> 和 <code>right</code> 之间的元素<strong>（含</strong> 下标 <code>left</code> 和 <code>right</code> 对应元素<strong>）</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [60,60,60], nums2 = [10,90,10]\n<strong>输出：</strong>210\n<strong>解释：</strong>选择 left = 1 和 right = 1 ，得到 nums1 = [60,<em><strong>90</strong></em>,60] 和 nums2 = [10,<em><strong>60</strong></em>,10] 。\n分数为 max(sum(nums1), sum(nums2)) = max(210, 80) = 210 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]\n<strong>输出：</strong>220\n<strong>解释：</strong>选择 left = 3 和 right = 4 ，得到 nums1 = [20,40,20,<em><strong>40,20</strong></em>] 和 nums2 = [50,20,50,<em><strong>70,30</strong></em>] 。\n分数为 max(sum(nums1), sum(nums2)) = max(140, 220) = 220 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [7,11,13], nums2 = [1,1,1]\n<strong>输出：</strong>31\n<strong>解释：</strong>选择不交换任何子数组。\n分数为 max(sum(nums1), sum(nums2)) = max(31, 3) = 31 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n","translatedTitle":"拼接数组的最大分数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maximumsSplicedArray(vector<int>& nums1, vector<int>& nums2) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maximumsSplicedArray(int[] nums1, int[] nums2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumsSplicedArray(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint maximumsSplicedArray(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaximumsSplicedArray(int[] nums1, int[] nums2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumsSplicedArray = function(nums1, nums2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximums_spliced_array(nums1, nums2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumsSplicedArray(_ nums1: [Int], _ nums2: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumsSplicedArray(nums1 []int, nums2 []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumsSplicedArray(nums1: Array[Int], nums2: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumsSplicedArray(nums1: IntArray, nums2: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximums_spliced_array(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maximumsSplicedArray($nums1, $nums2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumsSplicedArray(nums1: number[], nums2: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximums-spliced-array nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximums_spliced_array(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmaximums_spliced_array(Nums1, Nums2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximums_spliced_array(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def maximums_spliced_array(nums1, nums2) do\n\n  end\nend"}]}