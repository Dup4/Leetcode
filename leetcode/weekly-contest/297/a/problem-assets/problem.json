{"slug":"calculate-amount-paid-in-taxes","id":1382,"frontendId":5259,"title":"Calculate Amount Paid in Taxes","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"}],"totalAccepted":4851,"totalSubmission":7746,"hints":["As you iterate through the tax brackets, keep track of the previous tax bracket’s upper bound in a variable called prev. If there is no previous tax bracket, use 0 instead.","The amount of money in the ith tax bracket is min(income, upperi) - prev."],"sampleTestCase":"[[3,50],[7,10],[12,25]]\n10","exampleTestcases":"[[3,50],[7,10],[12,25]]\n10\n[[1,0],[4,25],[5,50]]\n2\n[[2,50]]\n0","content":"<p>You are given a <strong>0-indexed</strong> 2D integer array <code>brackets</code> where <code>brackets[i] = [upper<sub>i</sub>, percent<sub>i</sub>]</code> means that the <code>i<sup>th</sup></code> tax bracket has an upper bound of <code>upper<sub>i</sub></code> and is taxed at a rate of <code>percent<sub>i</sub></code>. The brackets are <strong>sorted</strong> by upper bound (i.e. <code>upper<sub>i-1</sub> &lt; upper<sub>i</sub></code> for <code>0 &lt; i &lt; brackets.length</code>).</p>\n\n<p>Tax is calculated as follows:</p>\n\n<ul>\n\t<li>The first <code>upper<sub>0</sub></code> dollars earned are taxed at a rate of <code>percent<sub>0</sub></code>.</li>\n\t<li>The next <code>upper<sub>1</sub> - upper<sub>0</sub></code> dollars earned are taxed at a rate of <code>percent<sub>1</sub></code>.</li>\n\t<li>The next <code>upper<sub>2</sub> - upper<sub>1</sub></code> dollars earned are taxed at a rate of <code>percent<sub>2</sub></code>.</li>\n\t<li>And so on.</li>\n</ul>\n\n<p>You are given an integer <code>income</code> representing the amount of money you earned. Return <em>the amount of money that you have to pay in taxes.</em> Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> brackets = [[3,50],[7,10],[12,25]], income = 10\n<strong>Output:</strong> 2.65000\n<strong>Explanation:</strong>\nThe first 3 dollars you earn are taxed at 50%. You have to pay $3 * 50% = $1.50 dollars in taxes.\nThe next 7 - 3 = 4 dollars you earn are taxed at 10%. You have to pay $4 * 10% = $0.40 dollars in taxes.\nThe final 10 - 7 = 3 dollars you earn are taxed at 25%. You have to pay $3 * 25% = $0.75 dollars in taxes.\nYou have to pay a total of $1.50 + $0.40 + $0.75 = $2.65 dollars in taxes.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> brackets = [[1,0],[4,25],[5,50]], income = 2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong>\nThe first dollar you earn is taxed at 0%. You have to pay $1 * 0% = $0 dollars in taxes.\nThe second dollar you earn is taxed at 25%. You have to pay $1 * 25% = $0.25 dollars in taxes.\nYou have to pay a total of $0 + $0.25 = $0.25 dollars in taxes.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> brackets = [[2,50]], income = 0\n<strong>Output:</strong> 0.00000\n<strong>Explanation:</strong>\nYou have no income to tax, so you have to pay a total of $0 dollars in taxes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= brackets.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= upper<sub>i</sub> &lt;= 1000</code></li>\n\t<li><code>0 &lt;= percent<sub>i</sub> &lt;= 100</code></li>\n\t<li><code>0 &lt;= income &lt;= 1000</code></li>\n\t<li><code>upper<sub>i</sub></code> is sorted in ascending order.</li>\n\t<li>All the values of <code>upper<sub>i</sub></code> are <strong>unique</strong>.</li>\n\t<li>The upper bound of the last tax bracket is greater than or equal to <code>income</code>.</li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>brackets</code> ，其中 <code>brackets[i] = [upper<sub>i</sub>, percent<sub>i</sub>]</code> ，表示第 <code>i</code> 个税级的上限是 <code>upper<sub>i</sub></code> ，征收的税率为 <code>percent<sub>i</sub></code> 。税级按上限 <strong>从低到高排序</strong>（在满足 <code>0 &lt; i &lt; brackets.length</code> 的前提下，<code>upper<sub>i-1</sub> &lt; upper<sub>i</sub></code>）。</p>\n\n<p>税款计算方式如下：</p>\n\n<ul>\n\t<li>不超过 <code>upper<sub>0</sub></code> 的收入按税率 <code>percent<sub>0</sub></code> 缴纳</li>\n\t<li>接着 <code>upper<sub>1</sub> - upper<sub>0</sub></code> 的部分按税率 <code>percent<sub>1</sub></code> 缴纳</li>\n\t<li>然后 <code>upper<sub>2</sub> - upper<sub>1</sub></code> 的部分按税率 <code>percent<sub>2</sub></code> 缴纳</li>\n\t<li>以此类推</li>\n</ul>\n\n<p>给你一个整数 <code>income</code> 表示你的总收入。返回你需要缴纳的税款总额。与标准答案误差不超 <code>10<sup>-5</sup></code> 的结果将被视作正确答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>brackets = [[3,50],[7,10],[12,25]], income = 10\n<strong>输出：</strong>2.65000\n<strong>解释：</strong>\n前 $3 的税率为 50% 。需要支付税款 $3 * 50% = $1.50 。\n接下来 $7 - $3 = $4 的税率为 10% 。需要支付税款 $4 * 10% = $0.40 。\n最后 $10 - $7 = $3 的税率为 25% 。需要支付税款 $3 * 25% = $0.75 。\n需要支付的税款总计 $1.50 + $0.40 + $0.75 = $2.65 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>brackets = [[1,0],[4,25],[5,50]], income = 2\n<strong>输出：</strong>0.25000\n<strong>解释：</strong>\n前 $1 的税率为 0% 。需要支付税款 $1 * 0% = $0 。\n剩下 $1 的税率为 25% 。需要支付税款 $1 * 25% = $0.25 。\n需要支付的税款总计 $0 + $0.25 = $0.25 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>brackets = [[2,50]], income = 0\n<strong>输出：</strong>0.00000\n<strong>解释：</strong>\n没有收入，无需纳税，需要支付的税款总计 $0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= brackets.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= upper<sub>i</sub> &lt;= 1000</code></li>\n\t<li><code>0 &lt;= percent<sub>i</sub> &lt;= 100</code></li>\n\t<li><code>0 &lt;= income &lt;= 1000</code></li>\n\t<li><code>upper<sub>i</sub></code> 按递增顺序排列</li>\n\t<li><code>upper<sub>i</sub></code> 中的所有值 <strong>互不相同</strong></li>\n\t<li>最后一个税级的上限大于等于 <code>income</code></li>\n</ul>\n","translatedTitle":"计算应缴税款总额","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    double calculateTax(vector<vector<int>>& brackets, int income) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public double calculateTax(int[][] brackets, int income) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def calculateTax(self, brackets, income):\n        \"\"\"\n        :type brackets: List[List[int]]\n        :type income: int\n        :rtype: float\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def calculateTax(self, brackets: List[List[int]], income: int) -> float:"},{"lang":"C","langSlug":"c","code":"\n\ndouble calculateTax(int** brackets, int bracketsSize, int* bracketsColSize, int income){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public double CalculateTax(int[][] brackets, int income) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} brackets\n * @param {number} income\n * @return {number}\n */\nvar calculateTax = function(brackets, income) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} brackets\n# @param {Integer} income\n# @return {Float}\ndef calculate_tax(brackets, income)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func calculateTax(_ brackets: [[Int]], _ income: Int) -> Double {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func calculateTax(brackets [][]int, income int) float64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def calculateTax(brackets: Array[Array[Int]], income: Int): Double = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun calculateTax(brackets: Array<IntArray>, income: Int): Double {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn calculate_tax(brackets: Vec<Vec<i32>>, income: i32) -> f64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $brackets\n     * @param Integer $income\n     * @return Float\n     */\n    function calculateTax($brackets, $income) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function calculateTax(brackets: number[][], income: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (calculate-tax brackets income)\n  (-> (listof (listof exact-integer?)) exact-integer? flonum?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec calculate_tax(Brackets :: [[integer()]], Income :: integer()) -> float().\ncalculate_tax(Brackets, Income) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec calculate_tax(brackets :: [[integer]], income :: integer) :: float\n  def calculate_tax(brackets, income) do\n\n  end\nend"}]}