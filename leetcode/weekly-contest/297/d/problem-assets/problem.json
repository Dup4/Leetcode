{"slug":"naming-a-company","id":2390,"frontendId":6094,"title":"Naming a Company","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":787,"totalSubmission":3734,"hints":["How can we divide the ideas into groups to make it easier to find valid pairs?","Group ideas that share the same suffix (all characters except the first) together and notice that a pair of ideas from the same group is invalid. What about pairs of ideas from different groups?","The first letter of the idea in the first group must not be the first letter of an idea in the second group and vice versa.","We can efficiently count the valid pairings for an idea if we already know how many ideas starting with a letter x are within a group that does not contain any ideas with starting letter y for all letters x and y."],"sampleTestCase":"[\"coffee\",\"donuts\",\"time\",\"toffee\"]","exampleTestcases":"[\"coffee\",\"donuts\",\"time\",\"toffee\"]\n[\"lack\",\"back\"]","content":"<p>You are given an array of strings <code>ideas</code> that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:</p>\n\n<ol>\n\t<li>Choose 2 <strong>distinct</strong> names from <code>ideas</code>, call them <code>idea<sub>A</sub></code> and <code>idea<sub>B</sub></code>.</li>\n\t<li>Swap the first letters of <code>idea<sub>A</sub></code> and <code>idea<sub>B</sub></code> with each other.</li>\n\t<li>If <strong>both</strong> of the new names are not found in the original <code>ideas</code>, then the name <code>idea<sub>A</sub> idea<sub>B</sub></code> (the <strong>concatenation</strong> of <code>idea<sub>A</sub></code> and <code>idea<sub>B</sub></code>, separated by a space) is a valid company name.</li>\n\t<li>Otherwise, it is not a valid name.</li>\n</ol>\n\n<p>Return <em>the number of <strong>distinct</strong> valid names for the company</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ideas = [&quot;coffee&quot;,&quot;donuts&quot;,&quot;time&quot;,&quot;toffee&quot;]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The following selections are valid:\n- (&quot;coffee&quot;, &quot;donuts&quot;): The company name created is &quot;doffee conuts&quot;.\n- (&quot;donuts&quot;, &quot;coffee&quot;): The company name created is &quot;conuts doffee&quot;.\n- (&quot;donuts&quot;, &quot;time&quot;): The company name created is &quot;tonuts dime&quot;.\n- (&quot;donuts&quot;, &quot;toffee&quot;): The company name created is &quot;tonuts doffee&quot;.\n- (&quot;time&quot;, &quot;donuts&quot;): The company name created is &quot;dime tonuts&quot;.\n- (&quot;toffee&quot;, &quot;donuts&quot;): The company name created is &quot;doffee tonuts&quot;.\nTherefore, there are a total of 6 distinct company names.\n\nThe following are some examples of invalid selections:\n- (&quot;coffee&quot;, &quot;time&quot;): The name &quot;toffee&quot; formed after swapping already exists in the original array.\n- (&quot;time&quot;, &quot;toffee&quot;): Both names are still the same after swapping and exist in the original array.\n- (&quot;coffee&quot;, &quot;toffee&quot;): Both names formed after swapping already exist in the original array.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ideas = [&quot;lack&quot;,&quot;back&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no valid selections. Therefore, 0 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= ideas.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= ideas[i].length &lt;= 10</code></li>\n\t<li><code>ideas[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings in <code>ideas</code> are <strong>unique</strong>.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串数组 <code>ideas</code> 表示在公司命名过程中使用的名字列表。公司命名流程如下：</p>\n\n<ol>\n\t<li>从 <code>ideas</code> 中选择 2 个 <strong>不同</strong> 名字，称为 <code>idea<sub>A</sub></code> 和 <code>idea<sub>B</sub></code> 。</li>\n\t<li>交换 <code>idea<sub>A</sub></code> 和 <code>idea<sub>B</sub></code> 的首字母。</li>\n\t<li>如果得到的两个新名字 <strong>都</strong> 不在 <code>ideas</code> 中，那么 <code>idea<sub>A</sub> idea<sub>B</sub></code>（<strong>串联</strong> <code>idea<sub>A</sub></code> 和 <code>idea<sub>B</sub></code> ，中间用一个空格分隔）是一个有效的公司名字。</li>\n\t<li>否则，不是一个有效的名字。</li>\n</ol>\n\n<p>返回 <strong>不同</strong> 且有效的公司名字的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]\n<strong>输出：</strong>6\n<strong>解释：</strong>下面列出一些有效的选择方案：\n- (\"coffee\", \"donuts\")：对应的公司名字是 \"doffee conuts\" 。\n- (\"donuts\", \"coffee\")：对应的公司名字是 \"conuts doffee\" 。\n- (\"donuts\", \"time\")：对应的公司名字是 \"tonuts dime\" 。\n- (\"donuts\", \"toffee\")：对应的公司名字是 \"tonuts doffee\" 。\n- (\"time\", \"donuts\")：对应的公司名字是 \"dime tonuts\" 。\n- (\"toffee\", \"donuts\")：对应的公司名字是 \"doffee tonuts\" 。\n因此，总共有 6 个不同的公司名字。\n\n下面列出一些无效的选择方案：\n- (\"coffee\", \"time\")：在原数组中存在交换后形成的名字 \"toffee\" 。\n- (\"time\", \"toffee\")：在原数组中存在交换后形成的两个名字。\n- (\"coffee\", \"toffee\")：在原数组中存在交换后形成的两个名字。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>ideas = [\"lack\",\"back\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在有效的选择方案。因此，返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= ideas.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= ideas[i].length &lt;= 10</code></li>\n\t<li><code>ideas[i]</code> 由小写英文字母组成</li>\n\t<li><code>ideas</code> 中的所有字符串 <strong>互不相同</strong></li>\n</ul>\n","translatedTitle":"公司命名","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long distinctNames(vector<string>& ideas) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long distinctNames(String[] ideas) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def distinctNames(self, ideas):\n        \"\"\"\n        :type ideas: List[str]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def distinctNames(self, ideas: List[str]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long distinctNames(char ** ideas, int ideasSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long DistinctNames(string[] ideas) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} ideas\n * @return {number}\n */\nvar distinctNames = function(ideas) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} ideas\n# @return {Integer}\ndef distinct_names(ideas)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func distinctNames(_ ideas: [String]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func distinctNames(ideas []string) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def distinctNames(ideas: Array[String]): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun distinctNames(ideas: Array<String>): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn distinct_names(ideas: Vec<String>) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $ideas\n     * @return Integer\n     */\n    function distinctNames($ideas) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function distinctNames(ideas: string[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (distinct-names ideas)\n  (-> (listof string?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec distinct_names(Ideas :: [unicode:unicode_binary()]) -> integer().\ndistinct_names(Ideas) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec distinct_names(ideas :: [String.t]) :: integer\n  def distinct_names(ideas) do\n\n  end\nend"}]}