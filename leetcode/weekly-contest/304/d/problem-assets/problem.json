{"slug":"longest-cycle-in-a-graph","id":2439,"frontendId":6135,"title":"Longest Cycle in a Graph","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2261,"totalSubmission":8302,"hints":["How many cycles can each node at most be part of?","Each node can be part of at most one cycle. Start from each node and find the cycle that it is part of if there is any. Save the already visited nodes to not repeat visiting the same cycle multiple times."],"sampleTestCase":"[3,3,4,2,3]","exampleTestcases":"[3,3,4,2,3]\n[2,-1,3,1]","content":"<p>You are given a <strong>directed</strong> graph of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>, where each node has <strong>at most one</strong> outgoing edge.</p>\n\n<p>The graph is represented with a given <strong>0-indexed</strong> array <code>edges</code> of size <code>n</code>, indicating that there is a directed edge from node <code>i</code> to node <code>edges[i]</code>. If there is no outgoing edge from node <code>i</code>, then <code>edges[i] == -1</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> cycle in the graph</em>. If no cycle exists, return <code>-1</code>.</p>\n\n<p>A cycle is a path that starts and ends at the <strong>same</strong> node.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-08-graph4drawio-5.png\" style=\"width: 335px; height: 191px;\" />\n<pre>\n<strong>Input:</strong> edges = [3,3,4,2,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest cycle in the graph is the cycle: 2 -&gt; 4 -&gt; 3 -&gt; 2.\nThe length of this cycle is 3, so 3 is returned.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-07-graph4drawio-1.png\" style=\"width: 171px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> edges = [2,-1,3,1]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no cycles in this graph.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-1 &lt;= edges[i] &lt; n</code></li>\n\t<li><code>edges[i] != i</code></li>\n</ul>\n","translatedContent":"<p>给你一个 <code>n</code>&nbsp;个节点的 <b>有向图</b>&nbsp;，节点编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，其中每个节点&nbsp;<strong>至多</strong>&nbsp;有一条出边。</p>\n\n<p>图用一个大小为 <code>n</code>&nbsp;下标从<strong>&nbsp;0</strong>&nbsp;开始的数组&nbsp;<code>edges</code>&nbsp;表示，节点 <code>i</code>&nbsp;到节点&nbsp;<code>edges[i]</code>&nbsp;之间有一条有向边。如果节点&nbsp;<code>i</code>&nbsp;没有出边，那么&nbsp;<code>edges[i] == -1</code>&nbsp;。</p>\n\n<p>请你返回图中的 <strong>最长</strong>&nbsp;环，如果没有任何环，请返回 <code>-1</code>&nbsp;。</p>\n\n<p>一个环指的是起点和终点是 <strong>同一个</strong>&nbsp;节点的路径。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-08-graph4drawio-5.png\" style=\"width: 335px; height: 191px;\" /></p>\n\n<pre>\n<b>输入：</b>edges = [3,3,4,2,3]\n<b>输出去：</b>3\n<b>解释：</b>图中的最长环是：2 -&gt; 4 -&gt; 3 -&gt; 2 。\n这个环的长度为 3 ，所以返回 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-07-graph4drawio-1.png\" style=\"width: 171px; height: 161px;\" /></p>\n\n<pre>\n<b>输入：</b>edges = [2,-1,3,1]\n<b>输出：</b>-1\n<b>解释：</b>图中没有任何环。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-1 &lt;= edges[i] &lt; n</code></li>\n\t<li><code>edges[i] != i</code></li>\n</ul>\n","translatedTitle":"图中的最长环","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int longestCycle(vector<int>& edges) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int longestCycle(int[] edges) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def longestCycle(self, edges):\n        \"\"\"\n        :type edges: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def longestCycle(self, edges: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint longestCycle(int* edges, int edgesSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int LongestCycle(int[] edges) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} edges\n * @return {number}\n */\nvar longestCycle = function(edges) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} edges\n# @return {Integer}\ndef longest_cycle(edges)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func longestCycle(_ edges: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func longestCycle(edges []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def longestCycle(edges: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun longestCycle(edges: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn longest_cycle(edges: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $edges\n     * @return Integer\n     */\n    function longestCycle($edges) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function longestCycle(edges: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (longest-cycle edges)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec longest_cycle(Edges :: [integer()]) -> integer().\nlongest_cycle(Edges) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec longest_cycle(edges :: [integer]) :: integer\n  def longest_cycle(edges) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int longestCycle(List<int> edges) {\n\n  }\n}"}]}