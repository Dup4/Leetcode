{"slug":"number-of-flowers-in-full-bloom","id":2334,"frontendId":6044,"title":"Number of Flowers in Full Bloom","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":14,"dislikes":0,"status":0,"tag":[],"totalAccepted":3115,"totalSubmission":6722,"hints":["Notice that for any given time t, the number of flowers blooming at time t is equal to the number of flowers that have started blooming minus the number of flowers that have already stopped blooming.","We can obtain these values efficiently using binary search.","We can store the starting times in sorted order, which then allows us to binary search to find how many flowers have started blooming for a given time t.","We do the same for the ending times to find how many flowers have stopped blooming at time t."],"sampleTestCase":"[[1,6],[3,7],[9,12],[4,13]]\n[2,3,7,11]","exampleTestcases":"[[1,6],[3,7],[9,12],[4,13]]\n[2,3,7,11]\n[[1,10],[3,3]]\n[3,3,2]","content":"<p>You are given a <strong>0-indexed</strong> 2D integer array <code>flowers</code>, where <code>flowers[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> means the <code>i<sup>th</sup></code> flower will be in <strong>full bloom</strong> from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> (<strong>inclusive</strong>). You are also given a <strong>0-indexed</strong> integer array <code>persons</code> of size <code>n</code>, where <code>persons[i]</code> is the time that the <code>i<sup>th</sup></code> person will arrive to see the flowers.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> of size </em><code>n</code><em>, where </em><code>answer[i]</code><em> is the <strong>number</strong> of flowers that are in full bloom when the </em><code>i<sup>th</sup></code><em> person arrives.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-03-02-ex1new.jpg\" style=\"width: 550px; height: 216px;\" />\n<pre>\n<strong>Input:</strong> flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]\n<strong>Output:</strong> [1,2,2,2]\n<strong>Explanation: </strong>The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-03-02-ex2new.jpg\" style=\"width: 450px; height: 195px;\" />\n<pre>\n<strong>Input:</strong> flowers = [[1,10],[3,3]], persons = [3,3,2]\n<strong>Output:</strong> [2,2,1]\n<strong>Explanation:</strong> The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowers.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>flowers[i].length == 2</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= persons.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= persons[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>flowers</code>&nbsp;，其中&nbsp;<code>flowers[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;朵花的 <strong>花期</strong>&nbsp;从&nbsp;<code>start<sub>i</sub></code>&nbsp;到&nbsp;<code>end<sub>i</sub></code>&nbsp;（都 <strong>包含</strong>）。同时给你一个下标从 <strong>0</strong>&nbsp;开始大小为 <code>n</code>&nbsp;的整数数组&nbsp;<code>persons</code>&nbsp;，<code>persons[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个人来看花的时间。</p>\n\n<p>请你返回一个大小为 <code>n</code>&nbsp;的整数数组<em>&nbsp;</em><code>answer</code>&nbsp;，其中&nbsp;<code>answer[i]</code>是第&nbsp;<code>i</code>&nbsp;个人到达时在花期内花的&nbsp;<strong>数目</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-03-02-ex1new.jpg\" style=\"width: 550px; height: 216px;\"></p>\n\n<pre><b>输入：</b>flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]\n<b>输出：</b>[1,2,2,2]\n<strong>解释：</strong>上图展示了每朵花的花期时间，和每个人的到达时间。\n对每个人，我们返回他们到达时在花期内花的数目。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-03-02-ex2new.jpg\" style=\"width: 450px; height: 195px;\"></p>\n\n<pre><b>输入：</b>flowers = [[1,10],[3,3]], persons = [3,3,2]\n<b>输出：</b>[2,2,1]\n<b>解释：</b>上图展示了每朵花的花期时间，和每个人的到达时间。\n对每个人，我们返回他们到达时在花期内花的数目。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowers.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>flowers[i].length == 2</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= persons.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= persons[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"花期内花的数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<int> fullBloomFlowers(vector<vector<int>>& flowers, vector<int>& persons) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int[] fullBloomFlowers(int[][] flowers, int[] persons) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def fullBloomFlowers(self, flowers, persons):\n        \"\"\"\n        :type flowers: List[List[int]]\n        :type persons: List[int]\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def fullBloomFlowers(self, flowers: List[List[int]], persons: List[int]) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* fullBloomFlowers(int** flowers, int flowersSize, int* flowersColSize, int* persons, int personsSize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int[] FullBloomFlowers(int[][] flowers, int[] persons) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} flowers\n * @param {number[]} persons\n * @return {number[]}\n */\nvar fullBloomFlowers = function(flowers, persons) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} flowers\n# @param {Integer[]} persons\n# @return {Integer[]}\ndef full_bloom_flowers(flowers, persons)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func fullBloomFlowers(_ flowers: [[Int]], _ persons: [Int]) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func fullBloomFlowers(flowers [][]int, persons []int) []int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def fullBloomFlowers(flowers: Array[Array[Int]], persons: Array[Int]): Array[Int] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun fullBloomFlowers(flowers: Array<IntArray>, persons: IntArray): IntArray {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn full_bloom_flowers(flowers: Vec<Vec<i32>>, persons: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $flowers\n     * @param Integer[] $persons\n     * @return Integer[]\n     */\n    function fullBloomFlowers($flowers, $persons) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function fullBloomFlowers(flowers: number[][], persons: number[]): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (full-bloom-flowers flowers persons)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec full_bloom_flowers(Flowers :: [[integer()]], Persons :: [integer()]) -> [integer()].\nfull_bloom_flowers(Flowers, Persons) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec full_bloom_flowers(flowers :: [[integer]], persons :: [integer]) :: [integer]\n  def full_bloom_flowers(flowers, persons) do\n\n  end\nend"}]}