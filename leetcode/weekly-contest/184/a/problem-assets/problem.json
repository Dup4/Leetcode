{"slug":"string-matching-in-an-array","id":1524,"title":"String Matching in an Array","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":22,"dislikes":0,"status":0,"tag":[{"name":"String","slug":"string","translatedName":"字符串"},{"name":"String Matching","slug":"string-matching","translatedName":"字符串匹配"}],"totalAccepted":14573,"totalSubmission":23676,"hints":["Bruteforce to find if one string is substring of another or use KMP algorithm."],"sampleTestCase":"[\"mass\",\"as\",\"hero\",\"superhero\"]","exampleTestcases":"[\"mass\",\"as\",\"hero\",\"superhero\"]\n[\"leetcode\",\"et\",\"code\"]\n[\"blue\",\"green\",\"bu\"]","content":"<p>Given an array of string <code>words</code>. Return all strings in <code>words</code> which is substring of another word in <strong>any</strong> order.&nbsp;</p>\n\n<p>String <code>words[i]</code> is substring of <code>words[j]</code>,&nbsp;if&nbsp;can be obtained removing some characters to left and/or right side of <code>words[j]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;mass&quot;,&quot;as&quot;,&quot;hero&quot;,&quot;superhero&quot;]\n<strong>Output:</strong> [&quot;as&quot;,&quot;hero&quot;]\n<strong>Explanation:</strong> &quot;as&quot; is substring of &quot;mass&quot; and &quot;hero&quot; is substring of &quot;superhero&quot;.\n[&quot;hero&quot;,&quot;as&quot;] is also a valid answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;leetcode&quot;,&quot;et&quot;,&quot;code&quot;]\n<strong>Output:</strong> [&quot;et&quot;,&quot;code&quot;]\n<strong>Explanation:</strong> &quot;et&quot;, &quot;code&quot; are substring of &quot;leetcode&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;blue&quot;,&quot;green&quot;,&quot;bu&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> contains only lowercase English letters.</li>\n\t<li>It&#39;s <strong>guaranteed</strong>&nbsp;that <code>words[i]</code>&nbsp;will be unique.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串数组 <code>words</code> ，数组中的每个字符串都可以看作是一个单词。请你按 <strong>任意</strong> 顺序返回 <code>words</code> 中是其他单词的子字符串的所有单词。</p>\n\n<p>如果你可以删除 <code>words[j]</code>&nbsp;最左侧和/或最右侧的若干字符得到 <code>word[i]</code> ，那么字符串 <code>words[i]</code> 就是 <code>words[j]</code> 的一个子字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;mass&quot;,&quot;as&quot;,&quot;hero&quot;,&quot;superhero&quot;]\n<strong>输出：</strong>[&quot;as&quot;,&quot;hero&quot;]\n<strong>解释：</strong>&quot;as&quot; 是 &quot;mass&quot; 的子字符串，&quot;hero&quot; 是 &quot;superhero&quot; 的子字符串。\n[&quot;hero&quot;,&quot;as&quot;] 也是有效的答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;leetcode&quot;,&quot;et&quot;,&quot;code&quot;]\n<strong>输出：</strong>[&quot;et&quot;,&quot;code&quot;]\n<strong>解释：</strong>&quot;et&quot; 和 &quot;code&quot; 都是 &quot;leetcode&quot; 的子字符串。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;blue&quot;,&quot;green&quot;,&quot;bu&quot;]\n<strong>输出：</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> 仅包含小写英文字母。</li>\n\t<li>题目数据 <strong>保证</strong> 每个 <code>words[i]</code> 都是独一无二的。</li>\n</ul>\n","translatedTitle":"数组中的字符串匹配","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<string> stringMatching(vector<string>& words) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<String> stringMatching(String[] words) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def stringMatching(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def stringMatching(self, words: List[str]) -> List[str]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** stringMatching(char ** words, int wordsSize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<string> StringMatching(string[] words) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar stringMatching = function(words) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} words\n# @return {String[]}\ndef string_matching(words)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func stringMatching(_ words: [String]) -> [String] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func stringMatching(words []string) []string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def stringMatching(words: Array[String]): List[String] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun stringMatching(words: Array<String>): List<String> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn string_matching(words: Vec<String>) -> Vec<String> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function stringMatching($words) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function stringMatching(words: string[]): string[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (string-matching words)\n  (-> (listof string?) (listof string?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec string_matching(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nstring_matching(Words) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec string_matching(words :: [String.t]) :: [String.t]\n  def string_matching(words) do\n\n  end\nend"}]}