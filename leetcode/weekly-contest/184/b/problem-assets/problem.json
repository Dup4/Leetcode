{"slug":"queries-on-a-permutation-with-key","id":1525,"title":"Queries on a Permutation With Key","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":33,"dislikes":0,"status":0,"tag":[{"name":"Binary Indexed Tree","slug":"binary-indexed-tree","translatedName":"树状数组"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Simulation","slug":"simulation","translatedName":"模拟"}],"totalAccepted":8694,"totalSubmission":10742,"hints":["Create the permutation P=[1,2,...,m], it could be a list for example.","For each i, find the position of queries[i] with a simple scan over P and then move this to the beginning."],"sampleTestCase":"[3,1,2,1]\n5","exampleTestcases":"[3,1,2,1]\n5\n[4,1,2,2]\n4\n[7,5,5,8,3]\n8","content":"<p>Given the array <code>queries</code> of positive integers between <code>1</code> and <code>m</code>, you have to process all <code>queries[i]</code> (from <code>i=0</code> to <code>i=queries.length-1</code>) according to the following rules:</p>\r\n\r\n<ul>\r\n\t<li>In the beginning, you have the permutation <code>P=[1,2,3,...,m]</code>.</li>\r\n\t<li>For the current <code>i</code>, find the position of <code>queries[i]</code> in the permutation <code>P</code> (<strong>indexing from 0</strong>) and then move this at the beginning of the permutation <code>P.</code>&nbsp;Notice that the position of <code>queries[i]</code> in <code>P</code> is the result for <code>queries[i]</code>.</li>\r\n</ul>\r\n\r\n<p>Return an array containing the result for the given <code>queries</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> queries = [3,1,2,1], m = 5\r\n<strong>Output:</strong> [2,1,2,1] \r\n<strong>Explanation:</strong> The queries are processed as follow: \r\nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is <strong>2</strong>, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \r\nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is <strong>1</strong>, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \r\nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is <strong>2</strong>, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \r\nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is <strong>1</strong>, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \r\nTherefore, the array containing the result is [2,1,2,1].  \r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> queries = [4,1,2,2], m = 4\r\n<strong>Output:</strong> [3,1,2,0]\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> queries = [7,5,5,8,3], m = 8\r\n<strong>Output:</strong> [6,5,0,7,5]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= m &lt;= 10^3</code></li>\r\n\t<li><code>1 &lt;= queries.length &lt;= m</code></li>\r\n\t<li><code>1 &lt;= queries[i] &lt;= m</code></li>\r\n</ul>","translatedContent":"<p>给你一个待查数组 <code>queries</code> ，数组中的元素为 <code>1</code> 到 <code>m</code> 之间的正整数。 请你根据以下规则处理所有待查项 <code>queries[i]</code>（从 <code>i=0</code> 到 <code>i=queries.length-1</code>）：</p>\n\n<ul>\n\t<li>一开始，排列 <code>P=[1,2,3,...,m]</code>。</li>\n\t<li>对于当前的 <code>i</code> ，请你找出待查项 <code>queries[i]</code> 在排列 <code>P</code> 中的位置（<strong>下标从 0 开始</strong>），然后将其从原位置移动到排列 <code>P</code> 的起始位置（即下标为 0 处）。注意， <code>queries[i]</code> 在 <code>P</code> 中的位置就是 <code>queries[i]</code> 的查询结果。</li>\n</ul>\n\n<p>请你以数组形式返回待查数组&nbsp; <code>queries</code> 的查询结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>queries = [3,1,2,1], m = 5\n<strong>输出：</strong>[2,1,2,1] \n<strong>解释：</strong>待查数组 queries 处理如下：\n对于 i=0: queries[i]=3, P=[1,2,3,4,5], 3 在 P 中的位置是 <strong>2</strong>，接着我们把 3 移动到 P 的起始位置，得到 P=[3,1,2,4,5] 。\n对于 i=1: queries[i]=1, P=[3,1,2,4,5], 1 在 P 中的位置是 <strong>1</strong>，接着我们把 1 移动到 P 的起始位置，得到 P=[1,3,2,4,5] 。 \n对于 i=2: queries[i]=2, P=[1,3,2,4,5], 2 在 P 中的位置是 <strong>2</strong>，接着我们把 2 移动到 P 的起始位置，得到 P=[2,1,3,4,5] 。\n对于 i=3: queries[i]=1, P=[2,1,3,4,5], 1 在 P 中的位置是 <strong>1</strong>，接着我们把 1 移动到 P 的起始位置，得到 P=[1,2,3,4,5] 。 \n因此，返回的结果数组为 [2,1,2,1] 。  \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>queries = [4,1,2,2], m = 4\n<strong>输出：</strong>[3,1,2,0]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>queries = [7,5,5,8,3], m = 8\n<strong>输出：</strong>[6,5,0,7,5]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m &lt;= 10^3</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= m</code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= m</code></li>\n</ul>\n","translatedTitle":"查询带键的排列","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<int> processQueries(vector<int>& queries, int m) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int[] processQueries(int[] queries, int m) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def processQueries(self, queries, m):\n        \"\"\"\n        :type queries: List[int]\n        :type m: int\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def processQueries(self, queries: List[int], m: int) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* processQueries(int* queries, int queriesSize, int m, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int[] ProcessQueries(int[] queries, int m) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} queries\n * @param {number} m\n * @return {number[]}\n */\nvar processQueries = function(queries, m) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} queries\n# @param {Integer} m\n# @return {Integer[]}\ndef process_queries(queries, m)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func processQueries(_ queries: [Int], _ m: Int) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func processQueries(queries []int, m int) []int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def processQueries(queries: Array[Int], m: Int): Array[Int] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun processQueries(queries: IntArray, m: Int): IntArray {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn process_queries(queries: Vec<i32>, m: i32) -> Vec<i32> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $queries\n     * @param Integer $m\n     * @return Integer[]\n     */\n    function processQueries($queries, $m) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function processQueries(queries: number[], m: number): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (process-queries queries m)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec process_queries(Queries :: [integer()], M :: integer()) -> [integer()].\nprocess_queries(Queries, M) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec process_queries(queries :: [integer], m :: integer) :: [integer]\n  def process_queries(queries, m) do\n\n  end\nend"}]}