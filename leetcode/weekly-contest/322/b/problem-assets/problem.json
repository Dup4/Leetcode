{"slug":"divide-players-into-teams-of-equal-skill","id":2581,"frontendId":6254,"title":"Divide Players Into Teams of Equal Skill","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":4877,"totalSubmission":8909,"hints":["Try sorting the skill array.","It is always optimal to pair the weakest available player with the strongest available player."],"sampleTestCase":"[3,2,5,1,3,4]","exampleTestcases":"[3,2,5,1,3,4]\n[3,4]\n[1,1,2,3]","content":"<p>You are given a positive integer array <code>skill</code> of <strong>even</strong> length <code>n</code> where <code>skill[i]</code> denotes the skill of the <code>i<sup>th</sup></code> player. Divide the players into <code>n / 2</code> teams of size <code>2</code> such that the total skill of each team is <strong>equal</strong>.</p>\n\n<p>The <strong>chemistry</strong> of a team is equal to the <strong>product</strong> of the skills of the players on that team.</p>\n\n<p>Return <em>the sum of the <strong>chemistry</strong> of all the teams, or return </em><code>-1</code><em> if there is no way to divide the players into teams such that the total skill of each team is equal.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [3,2,5,1,3,4]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [3,4]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> skill = [1,1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nThere is no way to divide the players into teams such that the total skill of each team is equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= skill.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>skill.length</code> is even.</li>\n\t<li><code>1 &lt;= skill[i] &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你一个正整数数组 <code>skill</code> ，数组长度为 <strong>偶数</strong> <code>n</code> ，其中 <code>skill[i]</code> 表示第 <code>i</code> 个玩家的技能点。将所有玩家分成 <code>n / 2</code> 个 <code>2</code> 人团队，使每一个团队的技能点之和 <strong>相等</strong> 。</p>\n\n<p>团队的 <strong>化学反应</strong> 等于团队中玩家的技能点 <strong>乘积</strong> 。</p>\n\n<p>返回所有团队的 <strong>化学反应</strong> 之和，如果无法使每个团队的技能点之和相等，则返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>skill = [3,2,5,1,3,4]\n<strong>输出：</strong>22\n<strong>解释：</strong>\n将玩家分成 3 个团队 (1, 5), (2, 4), (3, 3) ，每个团队的技能点之和都是 6 。\n所有团队的化学反应之和是 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>skill = [3,4]\n<strong>输出：</strong>12\n<strong>解释：</strong>\n两个玩家形成一个团队，技能点之和是 7 。\n团队的化学反应是 3 * 4 = 12 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>skill = [1,1,2,3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n无法将玩家分成每个团队技能点都相等的若干个 2 人团队。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= skill.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>skill.length</code> 是偶数</li>\n\t<li><code>1 &lt;= skill[i] &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"划分技能点相等的团队","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long dividePlayers(vector<int>& skill) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long dividePlayers(int[] skill) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def dividePlayers(self, skill):\n        \"\"\"\n        :type skill: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def dividePlayers(self, skill: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"long long dividePlayers(int* skill, int skillSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long DividePlayers(int[] skill) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} skill\n * @return {number}\n */\nvar dividePlayers = function(skill) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} skill\n# @return {Integer}\ndef divide_players(skill)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func dividePlayers(_ skill: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func dividePlayers(skill []int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def dividePlayers(skill: Array[Int]): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun dividePlayers(skill: IntArray): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn divide_players(skill: Vec<i32>) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $skill\n     * @return Integer\n     */\n    function dividePlayers($skill) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function dividePlayers(skill: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (divide-players skill)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec divide_players(Skill :: [integer()]) -> integer().\ndivide_players(Skill) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec divide_players(skill :: [integer]) :: integer\n  def divide_players(skill) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int dividePlayers(List<int> skill) {\n\n  }\n}"}]}