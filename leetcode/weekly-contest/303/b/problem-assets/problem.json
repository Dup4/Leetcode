{"slug":"equal-row-and-column-pairs","id":2428,"frontendId":6125,"title":"Equal Row and Column Pairs","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":5633,"totalSubmission":7749,"hints":["We can use nested loops to compare every row against every column.","Another loop is necessary to compare the row and column element by element.","It is also possible to hash the arrays and compare the hashed values instead."],"sampleTestCase":"[[3,2,1],[1,7,6],[2,7,7]]","exampleTestcases":"[[3,2,1],[1,7,6],[2,7,7]]\n[[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]","content":"<p>Given a <strong>0-indexed</strong> <code>n x n</code> integer matrix <code>grid</code>, <em>return the number of pairs </em><code>(R<sub>i</sub>, C<sub>j</sub>)</code><em> such that row </em><code>R<sub>i</sub></code><em> and column </em><code>C<sub>j</sub></code><em> are equal</em>.</p>\n\n<p>A row and column pair is considered equal if they contain the same elements in the same order (i.e. an equal array).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-01-ex1.jpg\" style=\"width: 150px; height: 153px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,2,1],[1,7,6],[2,7,7]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is 1 equal row and column pair:\n- (Row 2, Column 1): [2,7,7]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-01-ex2.jpg\" style=\"width: 200px; height: 209px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 equal row and column pairs:\n- (Row 0, Column 0): [3,1,2,2]\n- (Row 2, Column 2): [2,4,2,2]\n- (Row 3, Column 2): [2,4,2,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong> 开始、大小为 <code>n x n</code> 的整数矩阵 <code>grid</code> ，返回满足 <code>R<sub>i</sub></code><em> </em>行和<em> </em><code>C<sub>j</sub></code><em> </em>列相等的行列对<em> </em><code>(R<sub>i</sub>, C<sub>j</sub>)</code><em> </em>的数目<em>。</em></p>\n\n<p>如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-01-ex1.jpg\" style=\"width: 150px; height: 153px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[3,2,1],[1,7,6],[2,7,7]]\n<strong>输出：</strong>1\n<strong>解释：</strong>存在一对相等行列对：\n- (第 2 行，第 1 列)：[2,7,7]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2022-06-01-ex2.jpg\" style=\"width: 200px; height: 209px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]\n<strong>输出：</strong>3\n<strong>解释：</strong>存在三对相等行列对：\n- (第 0 行，第 0 列)：[3,1,2,2]\n- (第 2 行, 第 2 列)：[2,4,2,2]\n- (第 3 行, 第 2 列)：[2,4,2,2]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","translatedTitle":"相等行列对","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int equalPairs(vector<vector<int>>& grid) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int equalPairs(int[][] grid) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def equalPairs(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def equalPairs(self, grid: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint equalPairs(int** grid, int gridSize, int* gridColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int EqualPairs(int[][] grid) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar equalPairs = function(grid) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} grid\n# @return {Integer}\ndef equal_pairs(grid)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func equalPairs(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func equalPairs(grid [][]int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def equalPairs(grid: Array[Array[Int]]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun equalPairs(grid: Array<IntArray>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn equal_pairs(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function equalPairs($grid) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function equalPairs(grid: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (equal-pairs grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec equal_pairs(Grid :: [[integer()]]) -> integer().\nequal_pairs(Grid) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec equal_pairs(grid :: [[integer]]) :: integer\n  def equal_pairs(grid) do\n\n  end\nend"}]}