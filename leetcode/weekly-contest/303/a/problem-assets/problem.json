{"slug":"first-letter-to-appear-twice","id":2427,"frontendId":6124,"title":"First Letter to Appear Twice","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":6086,"totalSubmission":6944,"hints":["Iterate through the string from left to right. Keep track of the elements you have already seen in a set.","If the current element is already in the set, return that element."],"sampleTestCase":"\"abccbaacz\"","exampleTestcases":"\"abccbaacz\"\n\"abcdd\"","content":"<p>Given a string <code>s</code> consisting of lowercase English letters, return <em>the first letter to appear <strong>twice</strong></em>.</p>\n\n<p><strong>Note</strong>:</p>\n\n<ul>\n\t<li>A letter <code>a</code> appears twice before another letter <code>b</code> if the <strong>second</strong> occurrence of <code>a</code> is before the <strong>second</strong> occurrence of <code>b</code>.</li>\n\t<li><code>s</code> will contain at least one letter that appears twice.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abccbaacz&quot;\n<strong>Output:</strong> &quot;c&quot;\n<strong>Explanation:</strong>\nThe letter &#39;a&#39; appears on the indexes 0, 5 and 6.\nThe letter &#39;b&#39; appears on the indexes 1 and 4.\nThe letter &#39;c&#39; appears on the indexes 2, 3 and 7.\nThe letter &#39;z&#39; appears on the index 8.\nThe letter &#39;c&#39; is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdd&quot;\n<strong>Output:</strong> &quot;d&quot;\n<strong>Explanation:</strong>\nThe only letter that appears twice is &#39;d&#39; so we return &#39;d&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n\t<li><code>s</code> has at least one repeated letter.</li>\n</ul>\n","translatedContent":"<p>给你一个由小写英文字母组成的字符串 <code>s</code> ，请你找出并返回第一个出现 <strong>两次</strong> 的字母。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>如果 <code>a</code> 的 <strong>第二次</strong> 出现比 <code>b</code> 的 <strong>第二次</strong> 出现在字符串中的位置更靠前，则认为字母 <code>a</code> 在字母 <code>b</code> 之前出现两次。</li>\n\t<li><code>s</code> 包含至少一个出现两次的字母。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abccbaacz\"\n<strong>输出：</strong>\"c\"\n<strong>解释：</strong>\n字母 'a' 在下标 0 、5 和 6 处出现。\n字母 'b' 在下标 1 和 4 处出现。\n字母 'c' 在下标 2 、3 和 7 处出现。\n字母 'z' 在下标 8 处出现。\n字母 'c' 是第一个出现两次的字母，因为在所有字母中，'c' 第二次出现的下标是最小的。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abcdd\"\n<strong>输出：</strong>\"d\"\n<strong>解释：</strong>\n只有字母 'd' 出现两次，所以返回 'd' 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> 由小写英文字母组成</li>\n\t<li><code>s</code> 包含至少一个重复字母</li>\n</ul>\n","translatedTitle":"第一个出现两次的字母","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    char repeatedCharacter(string s) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public char repeatedCharacter(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def repeatedCharacter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def repeatedCharacter(self, s: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar repeatedCharacter(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public char RepeatedCharacter(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {character}\n */\nvar repeatedCharacter = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {Character}\ndef repeated_character(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func repeatedCharacter(_ s: String) -> Character {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func repeatedCharacter(s string) byte {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def repeatedCharacter(s: String): Char = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun repeatedCharacter(s: String): Char {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn repeated_character(s: String) -> char {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function repeatedCharacter($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function repeatedCharacter(s: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (repeated-character s)\n  (-> string? char?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec repeated_character(S :: unicode:unicode_binary()) -> char().\nrepeated_character(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec repeated_character(s :: String.t) :: char\n  def repeated_character(s) do\n\n  end\nend"}]}