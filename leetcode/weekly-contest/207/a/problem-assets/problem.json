{"slug":"rearrange-spaces-between-words","id":1714,"title":"Rearrange Spaces Between Words","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":15,"dislikes":0,"status":2,"tag":[{"name":"String","slug":"string","translatedName":"字符串"}],"totalAccepted":8496,"totalSubmission":19178,"hints":["Count the total number of spaces and words. Then use the integer division to determine the numbers of spaces to add between each word and at the end."],"sampleTestCase":"\"  this   is  a sentence \"","exampleTestcases":"\"  this   is  a sentence \"\n\" practice   makes   perfect\"","content":"<p>You are given a string <code>text</code> of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It&#39;s guaranteed that <code>text</code> <strong>contains at least one word</strong>.</p>\n\n<p>Rearrange the spaces so that there is an <strong>equal</strong> number of spaces between every pair of adjacent words and that number is <strong>maximized</strong>. If you cannot redistribute all the spaces equally, place the <strong>extra spaces at the end</strong>, meaning the returned string should be the same length as <code>text</code>.</p>\n\n<p>Return <em>the string after rearranging the spaces</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;  this   is  a sentence &quot;\n<strong>Output:</strong> &quot;this   is   a   sentence&quot;\n<strong>Explanation:</strong> There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot; practice   makes   perfect&quot;\n<strong>Output:</strong> &quot;practice   makes   perfect &quot;\n<strong>Explanation:</strong> There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 100</code></li>\n\t<li><code>text</code> consists of lowercase English letters and <code>&#39; &#39;</code>.</li>\n\t<li><code>text</code> contains at least one word.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串 <code>text</code> ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 <code>text</code> <strong>至少包含一个单词</strong> 。</p>\n\n<p>请你重新排列空格，使每对相邻单词之间的空格数目都 <strong>相等</strong> ，并尽可能 <strong>最大化</strong> 该数目。如果不能重新平均分配所有空格，请 <strong>将多余的空格放置在字符串末尾</strong> ，这也意味着返回的字符串应当与原 <code>text</code> 字符串的长度相等。</p>\n\n<p>返回 <strong>重新排列空格后的字符串</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>text = &quot;  this   is  a sentence &quot;\n<strong>输出：</strong>&quot;this   is   a   sentence&quot;\n<strong>解释：</strong>总共有 9 个空格和 4 个单词。可以将 9 个空格平均分配到相邻单词之间，相邻单词间空格数为：9 / (4-1) = 3 个。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>text = &quot; practice   makes   perfect&quot;\n<strong>输出：</strong>&quot;practice   makes   perfect &quot;\n<strong>解释：</strong>总共有 7 个空格和 3 个单词。7 / (3-1) = 3 个空格加上 1 个多余的空格。多余的空格需要放在字符串的末尾。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>text = &quot;hello   world&quot;\n<strong>输出：</strong>&quot;hello   world&quot;\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>text = &quot;  walks  udp package   into  bar a&quot;\n<strong>输出：</strong>&quot;walks  udp  package  into  bar  a &quot;\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>text = &quot;a&quot;\n<strong>输出：</strong>&quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 100</code></li>\n\t<li><code>text</code> 由小写英文字母和 <code>&#39; &#39;</code> 组成</li>\n\t<li><code>text</code> 中至少包含一个单词</li>\n</ul>\n","translatedTitle":"重新排列单词间的空格","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string reorderSpaces(string text) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String reorderSpaces(String text) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def reorderSpaces(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def reorderSpaces(self, text: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * reorderSpaces(char * text){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string ReorderSpaces(string text) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} text\n * @return {string}\n */\nvar reorderSpaces = function(text) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} text\n# @return {String}\ndef reorder_spaces(text)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func reorderSpaces(_ text: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func reorderSpaces(text string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def reorderSpaces(text: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun reorderSpaces(text: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn reorder_spaces(text: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $text\n     * @return String\n     */\n    function reorderSpaces($text) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function reorderSpaces(text: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (reorder-spaces text)\n  (-> string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec reorder_spaces(Text :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreorder_spaces(Text) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec reorder_spaces(text :: String.t) :: String.t\n  def reorder_spaces(text) do\n\n  end\nend"}]}