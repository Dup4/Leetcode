{"slug":"maximum-non-negative-product-in-a-matrix","id":1716,"title":"Maximum Non Negative Product in a Matrix","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":33,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"},{"name":"Matrix","slug":"matrix","translatedName":"矩阵"}],"totalAccepted":4511,"totalSubmission":14261,"hints":["Use Dynamic programming. Keep the highest value and lowest value you can achieve up to a point."],"sampleTestCase":"[[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]","exampleTestcases":"[[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]\n[[1,-2,1],[1,-2,1],[3,-4,1]]\n[[1,3],[0,-4]]","content":"<p>You are given a <code>m x n</code> matrix <code>grid</code>. Initially, you are located at the top-left corner <code>(0, 0)</code>, and in each step, you can only <strong>move right or down</strong> in the matrix.</p>\n\n<p>Among all possible paths starting from the top-left corner <code>(0, 0)</code> and ending in the bottom-right corner <code>(m - 1, n - 1)</code>, find the path with the <strong>maximum non-negative product</strong>. The product of a path is the product of all integers in the grid cells visited along the path.</p>\n\n<p>Return the <em>maximum non-negative product <strong>modulo</strong> </em><code>10<sup>9</sup> + 7</code>. <em>If the maximum product is <strong>negative</strong>, return </em><code>-1</code>.</p>\n\n<p>Notice that the modulo is performed after getting the maximum product.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-23-product1.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-23-product2.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,-2,1],[1,-2,1],[3,-4,1]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8).\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-23-product3.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,3],[0,-4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Maximum non-negative product is shown (1 * 0 * -4 = 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 15</code></li>\n\t<li><code>-4 &lt;= grid[i][j] &lt;= 4</code></li>\n</ul>\n","translatedContent":"<p>给你一个大小为 <code>rows x cols</code> 的矩阵 <code>grid</code> 。最初，你位于左上角 <code>(0, 0)</code> ，每一步，你可以在矩阵中 <strong>向右</strong> 或 <strong>向下</strong> 移动。</p>\n\n<p>在从左上角 <code>(0, 0)</code> 开始到右下角 <code>(rows - 1, cols - 1)</code> 结束的所有路径中，找出具有 <strong>最大非负积</strong> 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</p>\n\n<p>返回 <strong>最大非负积 </strong>对<strong><em> </em><code>10<sup>9</sup>&nbsp;+ 7</code></strong> <strong>取余</strong> 的结果。如果最大积为负数，则返回<em> </em><code>-1</code> 。</p>\n\n<p><strong>注意，</strong>取余是在得到最大积之后执行的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>grid = [[-1,-2,-3],\n&nbsp;            [-2,-3,-3],\n&nbsp;            [-3,-3,-2]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>从 (0, 0) 到 (2, 2) 的路径中无法得到非负积，所以返回 -1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>grid = [[<strong>1</strong>,-2,1],\n&nbsp;            [<strong>1</strong>,<strong>-2</strong>,1],\n&nbsp;            [3,<strong>-4</strong>,<strong>1</strong>]]\n<strong>输出：</strong>8\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 1 * -2 * -4 * 1 = 8)\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>grid = [[<strong>1</strong>, 3],\n&nbsp;            [<strong>0</strong>,<strong>-4</strong>]]\n<strong>输出：</strong>0\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 0 * -4 = 0)\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>grid = [[ <strong>1</strong>, 4,4,0],\n&nbsp;            [<strong>-2</strong>, 0,0,1],\n&nbsp;            [ <strong>1</strong>,<strong>-1</strong>,<strong>1</strong>,<strong>1</strong>]]\n<strong>输出：</strong>2\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * -2 * 1 * -1 * 1 * 1 = 2)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rows, cols &lt;= 15</code></li>\n\t<li><code>-4 &lt;= grid[i][j] &lt;= 4</code></li>\n</ul>\n","translatedTitle":"矩阵的最大非负积","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maxProductPath(vector<vector<int>>& grid) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maxProductPath(int[][] grid) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maxProductPath(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint maxProductPath(int** grid, int gridSize, int* gridColSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaxProductPath(int[][] grid) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxProductPath = function(grid) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[][]} grid\n# @return {Integer}\ndef max_product_path(grid)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maxProductPath(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maxProductPath(grid [][]int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maxProductPath(grid: Array[Array[Int]]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maxProductPath(grid: Array<IntArray>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn max_product_path(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxProductPath($grid) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maxProductPath(grid: number[][]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (max-product-path grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec max_product_path(Grid :: [[integer()]]) -> integer().\nmax_product_path(Grid) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec max_product_path(grid :: [[integer]]) :: integer\n  def max_product_path(grid) do\n\n  end\nend"}]}