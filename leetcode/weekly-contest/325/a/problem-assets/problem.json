{"slug":"shortest-distance-to-target-string-in-a-circular-array","id":2598,"frontendId":6269,"title":"Shortest Distance to Target String in a Circular Array","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":2728,"totalSubmission":5087,"hints":["You have two options, either move straight to the left or move straight to the right.","Find the first target word and record the distance.","Choose the one with the minimum distance."],"sampleTestCase":"[\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"]\n\"hello\"\n1","exampleTestcases":"[\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"]\n\"hello\"\n1\n[\"a\",\"b\",\"leetcode\"]\n\"leetcode\"\n0\n[\"i\",\"eat\",\"leetcode\"]\n\"ate\"\n0","content":"<p>You are given a <strong>0-indexed</strong> <strong>circular</strong> string array <code>words</code> and a string <code>target</code>. A <strong>circular array</strong> means that the array&#39;s end connects to the array&#39;s beginning.</p>\n\n<ul>\n\t<li>Formally, the next element of <code>words[i]</code> is <code>words[(i + 1) % n]</code> and the previous element of <code>words[i]</code> is <code>words[(i - 1 + n) % n]</code>, where <code>n</code> is the length of <code>words</code>.</li>\n</ul>\n\n<p>Starting from <code>startIndex</code>, you can move to either the next word or the previous word with <code>1</code> step at a time.</p>\n\n<p>Return <em>the <strong>shortest</strong> distance needed to reach the string</em> <code>target</code>. If the string <code>target</code> does not exist in <code>words</code>, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;hello&quot;,&quot;i&quot;,&quot;am&quot;,&quot;leetcode&quot;,&quot;hello&quot;], target = &quot;hello&quot;, startIndex = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We start from index 1 and can reach &quot;hello&quot; by\n- moving 3 units to the right to reach index 4.\n- moving 2 units to the left to reach index 4.\n- moving 4 units to the right to reach index 0.\n- moving 1 unit to the left to reach index 0.\nThe shortest distance to reach &quot;hello&quot; is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;leetcode&quot;], target = &quot;leetcode&quot;, startIndex = 0\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We start from index 0 and can reach &quot;leetcode&quot; by\n- moving 2 units to the right to reach index 3.\n- moving 1 unit to the left to reach index 3.\nThe shortest distance to reach &quot;leetcode&quot; is 1.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;i&quot;,&quot;eat&quot;,&quot;leetcode&quot;], target = &quot;ate&quot;, startIndex = 0\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> Since &quot;ate&quot; does not exist in <code>words</code>, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> and <code>target</code> consist of only lowercase English letters.</li>\n\t<li><code>0 &lt;= startIndex &lt; words.length</code></li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong> 开始的 <strong>环形</strong> 字符串数组 <code>words</code> 和一个字符串 <code>target</code> 。<strong>环形数组</strong> 意味着数组首尾相连。</p>\n\n<ul>\n\t<li>形式上， <code>words[i]</code> 的下一个元素是 <code>words[(i + 1) % n]</code> ，而 <code>words[i]</code> 的前一个元素是 <code>words[(i - 1 + n) % n]</code> ，其中 <code>n</code> 是 <code>words</code> 的长度。</li>\n</ul>\n\n<p>从 <code>startIndex</code> 开始，你一次可以用 <code>1</code> 步移动到下一个或者前一个单词。</p>\n\n<p>返回到达目标字符串 <code>target</code> 所需的最短距离。如果 <code>words</code> 中不存在字符串 <code>target</code> ，返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"], target = \"hello\", startIndex = 1\n<strong>输出：</strong>1\n<strong>解释：</strong>从下标 1 开始，可以经由以下步骤到达 \"hello\" ：\n- 向右移动 3 个单位，到达下标 4 。\n- 向左移动 2 个单位，到达下标 4 。\n- 向右移动 4 个单位，到达下标 0 。\n- 向左移动 1 个单位，到达下标 0 。\n到达 \"hello\" 的最短距离是 1 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"a\",\"b\",\"leetcode\"], target = \"leetcode\", startIndex = 0\n<strong>输出：</strong>1\n<strong>解释：</strong>从下标 0 开始，可以经由以下步骤到达 \"leetcode\" ：\n- 向右移动 2 个单位，到达下标 3 。\n- 向左移动 1 个单位，到达下标 3 。\n到达 \"leetcode\" 的最短距离是 1 。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"i\",\"eat\",\"leetcode\"], target = \"ate\", startIndex = 0\n<strong>输出：</strong>-1\n<strong>解释：</strong>因为 words 中不存在字符串 \"ate\" ，所以返回 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> 和 <code>target</code> 仅由小写英文字母组成</li>\n\t<li><code>0 &lt;= startIndex &lt; words.length</code></li>\n</ul>\n","translatedTitle":"到目标字符串的最短距离","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int closetTarget(vector<string>& words, string target, int startIndex) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int closetTarget(String[] words, String target, int startIndex) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def closetTarget(self, words, target, startIndex):\n        \"\"\"\n        :type words: List[str]\n        :type target: str\n        :type startIndex: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def closetTarget(self, words: List[str], target: str, startIndex: int) -> int:"},{"lang":"C","langSlug":"c","code":"int closetTarget(char ** words, int wordsSize, char * target, int startIndex){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int ClosetTarget(string[] words, string target, int startIndex) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} words\n * @param {string} target\n * @param {number} startIndex\n * @return {number}\n */\nvar closetTarget = function(words, target, startIndex) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} words\n# @param {String} target\n# @param {Integer} start_index\n# @return {Integer}\ndef closet_target(words, target, start_index)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func closetTarget(_ words: [String], _ target: String, _ startIndex: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func closetTarget(words []string, target string, startIndex int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def closetTarget(words: Array[String], target: String, startIndex: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun closetTarget(words: Array<String>, target: String, startIndex: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn closet_target(words: Vec<String>, target: String, start_index: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $target\n     * @param Integer $startIndex\n     * @return Integer\n     */\n    function closetTarget($words, $target, $startIndex) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function closetTarget(words: string[], target: string, startIndex: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (closet-target words target startIndex)\n  (-> (listof string?) string? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec closet_target(Words :: [unicode:unicode_binary()], Target :: unicode:unicode_binary(), StartIndex :: integer()) -> integer().\ncloset_target(Words, Target, StartIndex) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec closet_target(words :: [String.t], target :: String.t, start_index :: integer) :: integer\n  def closet_target(words, target, start_index) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int closetTarget(List<String> words, String target, int startIndex) {\n\n  }\n}"}]}