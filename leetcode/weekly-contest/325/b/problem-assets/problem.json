{"slug":"take-k-of-each-character-from-left-and-right","id":2599,"frontendId":6270,"title":"Take K of Each Character From Left and Right","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":1160,"totalSubmission":5210,"hints":["Start by counting the frequency of each character and checking if it is possible.","If you take x characters from the left side, what is the minimum number of characters you need to take from the right side? Find this for all values of x in the range 0 ≤ x ≤ s.length.","Use a two-pointers approach to avoid computing the same information multiple times.","Start by counting the frequency of each character and checking if it is possible.","If you take x characters from the left side, what is the minimum number of characters you need to take from the right side? Find this for all values of x in the range 0 ≤ x ≤ s.length.","Use a two-pointers approach to avoid computing the same information multiple times."],"sampleTestCase":"\"aabaaaacaabc\"\n2","exampleTestcases":"\"aabaaaacaabc\"\n2\n\"a\"\n1","content":"<p>You are given a string <code>s</code> consisting of the characters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code> and a non-negative integer <code>k</code>. Each minute, you may take either the <strong>leftmost</strong> character of <code>s</code>, or the <strong>rightmost</strong> character of <code>s</code>.</p>\n\n<p>Return<em> the <strong>minimum</strong> number of minutes needed for you to take <strong>at least</strong> </em><code>k</code><em> of each character, or return </em><code>-1</code><em> if it is not possible to take </em><code>k</code><em> of each character.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabaaaacaabc&quot;, k = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nTake three characters from the left of s. You now have two &#39;a&#39; characters, and one &#39;b&#39; character.\nTake five characters from the right of s. You now have four &#39;a&#39; characters, two &#39;b&#39; characters, and two &#39;c&#39; characters.\nA total of 3 + 5 = 8 minutes is needed.\nIt can be proven that 8 is the minimum number of minutes needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is not possible to take one &#39;b&#39; or &#39;c&#39; so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only the letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n","translatedContent":"<p>给你一个由字符 <code>'a'</code>、<code>'b'</code>、<code>'c'</code> 组成的字符串 <code>s</code> 和一个非负整数 <code>k</code> 。每分钟，你可以选择取走 <code>s</code> <strong>最左侧</strong> 还是 <strong>最右侧</strong> 的那个字符。</p>\n\n<p>你必须取走每种字符 <strong>至少</strong> <code>k</code> 个，返回需要的 <strong>最少</strong> 分钟数；如果无法取到，则返回<em> </em><code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"aabaaaacaabc\", k = 2\n<strong>输出：</strong>8\n<strong>解释：</strong>\n从 s 的左侧取三个字符，现在共取到两个字符 'a' 、一个字符 'b' 。\n从 s 的右侧取五个字符，现在共取到四个字符 'a' 、两个字符 'b' 和两个字符 'c' 。\n共需要 3 + 5 = 8 分钟。\n可以证明需要的最少分钟数是 8 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"a\", k = 1\n<strong>输出：</strong>-1\n<strong>解释：</strong>无法取到一个字符 'b' 或者 'c'，所以返回 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> 仅由字母 <code>'a'</code>、<code>'b'</code>、<code>'c'</code> 组成</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n","translatedTitle":"每种字符至少取 K 个","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int takeCharacters(string s, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int takeCharacters(String s, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def takeCharacters(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def takeCharacters(self, s: str, k: int) -> int:"},{"lang":"C","langSlug":"c","code":"int takeCharacters(char * s, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int TakeCharacters(string s, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar takeCharacters = function(s, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef take_characters(s, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func takeCharacters(_ s: String, _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func takeCharacters(s string, k int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def takeCharacters(s: String, k: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun takeCharacters(s: String, k: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn take_characters(s: String, k: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function takeCharacters($s, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function takeCharacters(s: string, k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (take-characters s k)\n  (-> string? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec take_characters(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ntake_characters(S, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec take_characters(s :: String.t, k :: integer) :: integer\n  def take_characters(s, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int takeCharacters(String s, int k) {\n\n  }\n}"}]}