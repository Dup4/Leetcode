{"slug":"maximum-tastiness-of-candy-basket","id":2600,"frontendId":6271,"title":"Maximum Tastiness of Candy Basket","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":864,"totalSubmission":1514,"hints":["The answer is binary searchable.","For some x, we can use a greedy strategy to check if it is possible to pick k distinct candies with tastiness being at least x.","Sort prices and iterate from left to right. For some price[i] check if the price difference between the last taken candy and price[i] is at least x. If so, add the candy i to the basket.","So, a candy basket with tastiness x can be achieved if the basket size is bigger than or equal to k."],"sampleTestCase":"[13,5,1,8,21,2]\n3","exampleTestcases":"[13,5,1,8,21,2]\n3\n[1,3,1]\n2\n[7,7,7,7]\n2","content":"<p>You are given an array of positive integers <code>price</code> where <code>price[i]</code> denotes the price of the <code>i<sup>th</sup></code> candy and a positive integer <code>k</code>.</p>\n\n<p>The store sells baskets of <code>k</code> <strong>distinct</strong> candies. The <strong>tastiness</strong> of a candy basket is the smallest absolute difference of the <strong>prices</strong> of any two candies in the basket.</p>\n\n<p>Return <em>the <strong>maximum</strong> tastiness of a candy basket.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> price = [13,5,1,8,21,2], k = 3\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Choose the candies with the prices [13,5,21].\nThe tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.\nIt can be proven that 8 is the maximum tastiness that can be achieved.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> price = [1,3,1], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Choose the candies with the prices [1,3].\nThe tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.\nIt can be proven that 2 is the maximum tastiness that can be achieved.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> price = [7,7,7,7], k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Choosing any two distinct candies from the candies we have will result in a tastiness of 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= price.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= price[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>2 &lt;= k &lt;= price.length</code></li>\n</ul>\n","translatedContent":"<p>给你一个正整数数组 <code>price</code> ，其中 <code>price[i]</code> 表示第 <code>i</code> 类糖果的价格，另给你一个正整数 <code>k</code> 。</p>\n\n<p>商店组合 <code>k</code> 类 <strong>不同</strong> 糖果打包成礼盒出售。礼盒的 <strong>甜蜜度</strong> 是礼盒中任意两种糖果 <strong>价格</strong> 绝对差的最小值。</p>\n\n<p>返回礼盒的 <strong>最大 </strong>甜蜜度<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>price = [13,5,1,8,21,2], k = 3\n<strong>输出：</strong>8\n<strong>解释：</strong>选出价格分别为 [13,5,21] 的三类糖果。\n礼盒的甜蜜度为 min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8 。\n可以证明能够取得的最大甜蜜度就是 8 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>price = [1,3,1], k = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>选出价格分别为 [1,3] 的两类糖果。 \n礼盒的甜蜜度为 min(|1 - 3|) = min(2) = 2 。\n可以证明能够取得的最大甜蜜度就是 2 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>price = [7,7,7,7], k = 2\n<strong>输出：</strong>0\n<strong>解释：</strong>从现有的糖果中任选两类糖果，甜蜜度都会是 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= price.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= price[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>2 &lt;= k &lt;= price.length</code></li>\n</ul>\n","translatedTitle":"礼盒的最大甜蜜度","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int maximumTastiness(vector<int>& price, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int maximumTastiness(int[] price, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumTastiness(self, price, k):\n        \"\"\"\n        :type price: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:"},{"lang":"C","langSlug":"c","code":"int maximumTastiness(int* price, int priceSize, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MaximumTastiness(int[] price, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} price\n * @param {number} k\n * @return {number}\n */\nvar maximumTastiness = function(price, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} price\n# @param {Integer} k\n# @return {Integer}\ndef maximum_tastiness(price, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumTastiness(_ price: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumTastiness(price []int, k int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumTastiness(price: Array[Int], k: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumTastiness(price: IntArray, k: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_tastiness(price: Vec<i32>, k: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $price\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumTastiness($price, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumTastiness(price: number[], k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-tastiness price k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_tastiness(Price :: [integer()], K :: integer()) -> integer().\nmaximum_tastiness(Price, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_tastiness(price :: [integer], k :: integer) :: integer\n  def maximum_tastiness(price, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int maximumTastiness(List<int> price, int k) {\n\n  }\n}"}]}