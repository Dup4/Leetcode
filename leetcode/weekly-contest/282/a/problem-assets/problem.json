{"slug":"counting-words-with-a-given-prefix","id":2292,"frontendId":6008,"title":"Counting Words With a Given Prefix","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":0,"tag":[],"totalAccepted":6286,"totalSubmission":7871,"hints":["Go through each word in words and increment the answer if pref is a prefix of the word."],"sampleTestCase":"[\"pay\",\"attention\",\"practice\",\"attend\"]\n\"at\"","exampleTestcases":"[\"pay\",\"attention\",\"practice\",\"attend\"]\n\"at\"\n[\"leetcode\",\"win\",\"loops\",\"success\"]\n\"code\"","content":"<p>You are given an array of strings <code>words</code> and a string <code>pref</code>.</p>\n\n<p>Return <em>the number of strings in </em><code>words</code><em> that contain </em><code>pref</code><em> as a <strong>prefix</strong></em>.</p>\n\n<p>A <strong>prefix</strong> of a string <code>s</code> is any leading contiguous substring of <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;pay&quot;,&quot;<strong><u>at</u></strong>tention&quot;,&quot;practice&quot;,&quot;<u><strong>at</strong></u>tend&quot;], <code>pref </code>= &quot;at&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The 2 strings that contain &quot;at&quot; as a prefix are: &quot;<u><strong>at</strong></u>tention&quot; and &quot;<u><strong>at</strong></u>tend&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;leetcode&quot;,&quot;win&quot;,&quot;loops&quot;,&quot;success&quot;], <code>pref </code>= &quot;code&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no strings that contain &quot;code&quot; as a prefix.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length, pref.length &lt;= 100</code></li>\n\t<li><code>words[i]</code> and <code>pref</code> consist of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串数组 <code>words</code> 和一个字符串 <code>pref</code> 。</p>\n\n<p>返回 <code>words</code><em> </em>中以 <code>pref</code> 作为 <strong>前缀</strong> 的字符串的数目。</p>\n\n<p>字符串 <code>s</code> 的 <strong>前缀</strong> 就是&nbsp; <code>s</code> 的任一前导连续字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"pay\",\"<em><strong>at</strong></em>tention\",\"practice\",\"<em><strong>at</strong></em>tend\"], <code>pref </code>= \"at\"\n<strong>输出：</strong>2\n<strong>解释：</strong>以 \"at\" 作为前缀的字符串有两个，分别是：\"<em><strong>at</strong></em>tention\" 和 \"<em><strong>at</strong></em>tend\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"leetcode\",\"win\",\"loops\",\"success\"], <code>pref </code>= \"code\"\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在以 \"code\" 作为前缀的字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length, pref.length &lt;= 100</code></li>\n\t<li><code>words[i]</code> 和 <code>pref</code> 由小写英文字母组成</li>\n</ul>\n","translatedTitle":"统计包含给定前缀的字符串","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int prefixCount(vector<string>& words, string pref) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int prefixCount(String[] words, String pref) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def prefixCount(self, words, pref):\n        \"\"\"\n        :type words: List[str]\n        :type pref: str\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def prefixCount(self, words: List[str], pref: str) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint prefixCount(char ** words, int wordsSize, char * pref){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int PrefixCount(string[] words, string pref) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} words\n * @param {string} pref\n * @return {number}\n */\nvar prefixCount = function(words, pref) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} words\n# @param {String} pref\n# @return {Integer}\ndef prefix_count(words, pref)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func prefixCount(_ words: [String], _ pref: String) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func prefixCount(words []string, pref string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def prefixCount(words: Array[String], pref: String): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun prefixCount(words: Array<String>, pref: String): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn prefix_count(words: Vec<String>, pref: String) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $pref\n     * @return Integer\n     */\n    function prefixCount($words, $pref) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function prefixCount(words: string[], pref: string): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (prefix-count words pref)\n  (-> (listof string?) string? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec prefix_count(Words :: [unicode:unicode_binary()], Pref :: unicode:unicode_binary()) -> integer().\nprefix_count(Words, Pref) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec prefix_count(words :: [String.t], pref :: String.t) :: integer\n  def prefix_count(words, pref) do\n\n  end\nend"}]}