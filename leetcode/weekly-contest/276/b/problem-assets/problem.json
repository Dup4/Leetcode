{"slug":"minimum-moves-to-reach-target-score","id":1303,"title":"Minimum Moves to Reach Target Score","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":9,"dislikes":0,"status":0,"tag":[{"name":"Greedy","slug":"greedy","translatedName":"贪心"},{"name":"Math","slug":"math","translatedName":"数学"}],"totalAccepted":6160,"totalSubmission":12255,"hints":["Solve the opposite problem: start at the given score and move to 1.","It is better to use the move of the second type once we can to lose more scores fast."],"sampleTestCase":"5\n0","exampleTestcases":"5\n0\n19\n2\n10\n4","content":"<p>You are playing a game with integers. You start with the integer <code>1</code> and you want to reach the integer <code>target</code>.</p>\n\n<p>In one move, you can either:</p>\n\n<ul>\n\t<li><strong>Increment</strong> the current integer by one (i.e., <code>x = x + 1</code>).</li>\n\t<li><strong>Double</strong> the current integer (i.e., <code>x = 2 * x</code>).</li>\n</ul>\n\n<p>You can use the <strong>increment</strong> operation <strong>any</strong> number of times, however, you can only use the <strong>double</strong> operation <strong>at most</strong> <code>maxDoubles</code> times.</p>\n\n<p>Given the two integers <code>target</code> and <code>maxDoubles</code>, return <em>the minimum number of moves needed to reach </em><code>target</code><em> starting with </em><code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 5, maxDoubles = 0\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Keep incrementing by 1 until you reach target.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 19, maxDoubles = 2\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 10, maxDoubles = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong><b> </b>Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= maxDoubles &lt;= 100</code></li>\n</ul>\n","translatedContent":"<p>你正在玩一个整数游戏。从整数 <code>1</code> 开始，期望得到整数 <code>target</code> 。</p>\n\n<p>在一次行动中，你可以做下述两种操作之一：</p>\n\n<ul>\n\t<li><strong>递增</strong>，将当前整数的值加 1（即， <code>x = x + 1</code>）。</li>\n\t<li><strong>加倍</strong>，使当前整数的值翻倍（即，<code>x = 2 * x</code>）。</li>\n</ul>\n\n<p>在整个游戏过程中，你可以使用 <strong>递增</strong> 操作 <strong>任意</strong> 次数。但是只能使用 <strong>加倍</strong> 操作 <strong>至多</strong> <code>maxDoubles</code> 次。</p>\n\n<p>给你两个整数 <code>target</code> 和 <code>maxDoubles</code> ，返回从 1 开始得到<em> </em><code>target</code><em> </em>需要的最少行动次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>target = 5, maxDoubles = 0\n<strong>输出：</strong>4\n<strong>解释：</strong>一直递增 1 直到得到 target 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>target = 19, maxDoubles = 2\n<strong>输出：</strong>7\n<strong>解释：</strong>最初，x = 1 。\n递增 3 次，x = 4 。\n加倍 1 次，x = 8 。\n递增 1 次，x = 9 。\n加倍 1 次，x = 18 。\n递增 1 次，x = 19 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>target = 10, maxDoubles = 4\n<strong>输出：</strong>4\n<strong>解释：</strong>\n最初，x = 1 。 \n递增 1 次，x = 2 。 \n加倍 1 次，x = 4 。 \n递增 1 次，x = 5 。 \n加倍 1 次，x = 10 。 \n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= maxDoubles &lt;= 100</code></li>\n</ul>\n","translatedTitle":"得到目标值的最少行动次数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int minMoves(int target, int maxDoubles) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int minMoves(int target, int maxDoubles) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def minMoves(self, target, maxDoubles):\n        \"\"\"\n        :type target: int\n        :type maxDoubles: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def minMoves(self, target: int, maxDoubles: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint minMoves(int target, int maxDoubles){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MinMoves(int target, int maxDoubles) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} target\n * @param {number} maxDoubles\n * @return {number}\n */\nvar minMoves = function(target, maxDoubles) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} target\n# @param {Integer} max_doubles\n# @return {Integer}\ndef min_moves(target, max_doubles)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func minMoves(_ target: Int, _ maxDoubles: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func minMoves(target int, maxDoubles int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def minMoves(target: Int, maxDoubles: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun minMoves(target: Int, maxDoubles: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn min_moves(target: i32, max_doubles: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer $maxDoubles\n     * @return Integer\n     */\n    function minMoves($target, $maxDoubles) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function minMoves(target: number, maxDoubles: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (min-moves target maxDoubles)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec min_moves(Target :: integer(), MaxDoubles :: integer()) -> integer().\nmin_moves(Target, MaxDoubles) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec min_moves(target :: integer, max_doubles :: integer) :: integer\n  def min_moves(target, max_doubles) do\n\n  end\nend"}]}