{"slug":"largest-number-after-digit-swaps-by-parity","id":2327,"frontendId":6037,"title":"Largest Number After Digit Swaps by Parity","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":5494,"totalSubmission":9360,"hints":["The bigger digit should appear first (more to the left) because it contributes more to the value of the number.","Get all the even digits, as well as odd digits. Sort them separately.","Reconstruct the number by giving the earlier digits the highest available digit of the same parity."],"sampleTestCase":"1234","exampleTestcases":"1234\n65875","content":"<p>You are given a positive integer <code>num</code>. You may swap any two digits of <code>num</code> that have the same <strong>parity</strong> (i.e. both odd digits or both even digits).</p>\n\n<p>Return<em> the <strong>largest</strong> possible value of </em><code>num</code><em> after <strong>any</strong> number of swaps.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1234\n<strong>Output:</strong> 3412\n<strong>Explanation:</strong> Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 65875\n<strong>Output:</strong> 87655\n<strong>Explanation:</strong> Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个正整数 <code>num</code> 。你可以交换 <code>num</code> 中 <strong>奇偶性</strong> 相同的任意两位数字（即，都是奇数或者偶数）。</p>\n\n<p>返回交换 <strong>任意</strong> 次之后 <code>num</code> 的 <strong>最大</strong> 可能值<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>num = 1234\n<strong>输出：</strong>3412\n<strong>解释：</strong>交换数字 3 和数字 1 ，结果得到 3214 。\n交换数字 2 和数字 4 ，结果得到 3412 。\n注意，可能存在其他交换序列，但是可以证明 3412 是最大可能值。\n注意，不能交换数字 4 和数字 1 ，因为它们奇偶性不同。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>num = 65875\n<strong>输出：</strong>87655\n<strong>解释：</strong>交换数字 8 和数字 6 ，结果得到 85675 。\n交换数字 5 和数字 7 ，结果得到 87655 。\n注意，可能存在其他交换序列，但是可以证明 87655 是最大可能值。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"按奇偶性交换后的最大数字","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int largestInteger(int num) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int largestInteger(int num) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def largestInteger(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def largestInteger(self, num: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint largestInteger(int num){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int LargestInteger(int num) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} num\n * @return {number}\n */\nvar largestInteger = function(num) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} num\n# @return {Integer}\ndef largest_integer(num)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func largestInteger(_ num: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func largestInteger(num int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def largestInteger(num: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun largestInteger(num: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn largest_integer(num: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function largestInteger($num) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function largestInteger(num: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (largest-integer num)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec largest_integer(Num :: integer()) -> integer().\nlargest_integer(Num) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec largest_integer(num :: integer) :: integer\n  def largest_integer(num) do\n\n  end\nend"}]}