{"slug":"furthest-building-you-can-reach","id":1762,"title":"Furthest Building You Can Reach","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":73,"dislikes":0,"status":2,"tag":[{"name":"Greedy","slug":"greedy","translatedName":"贪心"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Heap (Priority Queue)","slug":"heap-priority-queue","translatedName":"堆（优先队列）"}],"totalAccepted":7224,"totalSubmission":15953,"hints":["Assume the problem is to check whether you can reach the last building or not.","You'll have to do a set of jumps, and choose for each one whether to do it using a ladder or bricks. It's always optimal to use ladders in the largest jumps.","Iterate on the buildings, maintaining the largest r jumps and the sum of the remaining ones so far, and stop whenever this sum exceeds b."],"sampleTestCase":"[4,2,7,6,9,14,12]\n5\n1","exampleTestcases":"[4,2,7,6,9,14,12]\n5\n1\n[4,12,2,7,3,18,20,3,19]\n10\n2\n[14,3,19,3]\n17\n0","content":"<p>You are given an integer array <code>heights</code> representing the heights of buildings, some <code>bricks</code>, and some <code>ladders</code>.</p>\n\n<p>You start your journey from building <code>0</code> and move to the next building by possibly using bricks or ladders.</p>\n\n<p>While moving from building <code>i</code> to building <code>i+1</code> (<strong>0-indexed</strong>),</p>\n\n<ul>\n\t<li>If the current building&#39;s height is <strong>greater than or equal</strong> to the next building&#39;s height, you do <strong>not</strong> need a ladder or bricks.</li>\n\t<li>If the current building&#39;s height is <b>less than</b> the next building&#39;s height, you can either use <strong>one ladder</strong> or <code>(h[i+1] - h[i])</code> <strong>bricks</strong>.</li>\n</ul>\n\n<p><em>Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2020-10-27-q4.gif\" style=\"width: 562px; height: 561px;\" />\n<pre>\n<strong>Input:</strong> heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 &gt;= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 &lt; 7.\n- Go to building 3 without using ladders nor bricks since 7 &gt;= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 &lt; 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\n<strong>Output:</strong> 7\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [14,3,19,3], bricks = 17, ladders = 0\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= bricks &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= ladders &lt;= heights.length</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>heights</code> ，表示建筑物的高度。另有一些砖块 <code>bricks</code> 和梯子 <code>ladders</code> 。</p>\n\n<p>你从建筑物 <code>0</code> 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。</p>\n\n<p>当从建筑物 <code>i</code> 移动到建筑物 <code>i+1</code>（下标<strong> 从 0 开始 </strong>）时：</p>\n\n<ul>\n\t<li>如果当前建筑物的高度 <strong>大于或等于</strong> 下一建筑物的高度，则不需要梯子或砖块</li>\n\t<li>如果当前建筑的高度 <strong>小于</strong> 下一个建筑的高度，您可以使用 <strong>一架梯子</strong> 或 <strong><code>(h[i+1] - h[i])</code> 个砖块</strong></li>\n</ul>\n如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标<strong> 从 0 开始 </strong>）。\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode-cn.com-aliyun-lc-upload-uploads-2020-10-31-q4.gif\" style=\"width: 562px; height: 561px;\" />\n<pre>\n<strong>输入：</strong>heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>从建筑物 0 出发，你可以按此方案完成旅程：\n- 不使用砖块或梯子到达建筑物 1 ，因为 4 >= 2\n- 使用 5 个砖块到达建筑物 2 。你必须使用砖块或梯子，因为 2 < 7\n- 不使用砖块或梯子到达建筑物 3 ，因为 7 >= 6\n- 使用唯一的梯子到达建筑物 4 。你必须使用砖块或梯子，因为 6 < 9\n无法越过建筑物 4 ，因为没有更多砖块或梯子。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\n<strong>输出：</strong>7\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>heights = [14,3,19,3], bricks = 17, ladders = 0\n<strong>输出：</strong>3\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= heights.length <= 10<sup>5</sup></code></li>\n\t<li><code>1 <= heights[i] <= 10<sup>6</sup></code></li>\n\t<li><code>0 <= bricks <= 10<sup>9</sup></code></li>\n\t<li><code>0 <= ladders <= heights.length</code></li>\n</ul>\n","translatedTitle":"可以到达的最远建筑","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int furthestBuilding(int[] heights, int bricks, int ladders) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def furthestBuilding(self, heights, bricks, ladders):\n        \"\"\"\n        :type heights: List[int]\n        :type bricks: int\n        :type ladders: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint furthestBuilding(int* heights, int heightsSize, int bricks, int ladders){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int FurthestBuilding(int[] heights, int bricks, int ladders) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} heights\n * @param {number} bricks\n * @param {number} ladders\n * @return {number}\n */\nvar furthestBuilding = function(heights, bricks, ladders) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} heights\n# @param {Integer} bricks\n# @param {Integer} ladders\n# @return {Integer}\ndef furthest_building(heights, bricks, ladders)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func furthestBuilding(_ heights: [Int], _ bricks: Int, _ ladders: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func furthestBuilding(heights []int, bricks int, ladders int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def furthestBuilding(heights: Array[Int], bricks: Int, ladders: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun furthestBuilding(heights: IntArray, bricks: Int, ladders: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn furthest_building(heights: Vec<i32>, bricks: i32, ladders: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @param Integer $bricks\n     * @param Integer $ladders\n     * @return Integer\n     */\n    function furthestBuilding($heights, $bricks, $ladders) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function furthestBuilding(heights: number[], bricks: number, ladders: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (furthest-building heights bricks ladders)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec furthest_building(Heights :: [integer()], Bricks :: integer(), Ladders :: integer()) -> integer().\nfurthest_building(Heights, Bricks, Ladders) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec furthest_building(heights :: [integer], bricks :: integer, ladders :: integer) :: integer\n  def furthest_building(heights, bricks, ladders) do\n\n  end\nend"}]}