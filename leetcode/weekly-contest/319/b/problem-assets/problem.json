{"slug":"number-of-subarrays-with-lcm-equal-to-k","id":2557,"frontendId":6234,"title":"Number of Subarrays With LCM Equal to K","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3346,"totalSubmission":10013,"hints":["The constraints on nums.length are small. It is possible to check every subarray.","To calculate LCM, you can use a built-in function or the formula lcm(a, b) = a * b / gcd(a, b).","As you calculate the LCM of more numbers, it can only become greater. Once it becomes greater than k, you know that any larger subarrays containing all the current elements will not work."],"sampleTestCase":"[3,6,2,7,1]\n6","exampleTestcases":"[3,6,2,7,1]\n6\n[3]\n2","content":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the number of <strong>subarrays</strong> of </em><code>nums</code><em> where the least common multiple of the subarray&#39;s elements is </em><code>k</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>The <strong>least common multiple of an array</strong> is the smallest positive integer that is divisible by all the array elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,6,2,7,1], k = 6\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The subarrays of nums where 6 is the least common multiple of all the subarray&#39;s elements are:\n- [<u><strong>3</strong></u>,<u><strong>6</strong></u>,2,7,1]\n- [<u><strong>3</strong></u>,<u><strong>6</strong></u>,<u><strong>2</strong></u>,7,1]\n- [3,<u><strong>6</strong></u>,2,7,1]\n- [3,<u><strong>6</strong></u>,<u><strong>2</strong></u>,7,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3], k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no subarrays of nums where 2 is the least common multiple of all the subarray&#39;s elements.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回 <code>nums</code> 的 <strong>子数组</strong> 中满足 <em>元素最小公倍数为 <code>k</code> </em>的子数组数目。</p>\n\n<p><strong>子数组</strong> 是数组中一个连续非空的元素序列。</p>\n\n<p><strong>数组的最小公倍数</strong> 是可被所有数组元素整除的最小正整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1 ：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,6,2,7,1], k = 6\n<strong>输出：</strong>4\n<strong>解释：</strong>以 6 为最小公倍数的子数组是：\n- [<em><strong>3</strong></em>,<em><strong>6</strong></em>,2,7,1]\n- [<em><strong>3</strong></em>,<em><strong>6</strong></em>,<em><strong>2</strong></em>,7,1]\n- [3,<em><strong>6</strong></em>,2,7,1]\n- [3,<em><strong>6</strong></em>,<em><strong>2</strong></em>,7,1]\n</pre>\n\n<p><strong>示例 2 ：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3], k = 2\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在以 2 为最小公倍数的子数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"最小公倍数为 K 的子数组数目","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int subarrayLCM(vector<int>& nums, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int subarrayLCM(int[] nums, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def subarrayLCM(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def subarrayLCM(self, nums: List[int], k: int) -> int:"},{"lang":"C","langSlug":"c","code":"int subarrayLCM(int* nums, int numsSize, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int SubarrayLCM(int[] nums, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarrayLCM = function(nums, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_lcm(nums, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func subarrayLCM(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func subarrayLCM(nums []int, k int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def subarrayLCM(nums: Array[Int], k: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun subarrayLCM(nums: IntArray, k: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn subarray_lcm(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subarrayLCM($nums, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function subarrayLCM(nums: number[], k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (subarray-lcm nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec subarray_lcm(Nums :: [integer()], K :: integer()) -> integer().\nsubarray_lcm(Nums, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec subarray_lcm(nums :: [integer], k :: integer) :: integer\n  def subarray_lcm(nums, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int subarrayLCM(List<int> nums, int k) {\n\n  }\n}"}]}