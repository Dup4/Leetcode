{"slug":"sort-the-people","id":2502,"frontendId":6188,"title":"Sort the People","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":5766,"totalSubmission":7218,"hints":["Find the tallest person and swap with the first person, then find the second tallest person and swap with the second person, etc. Repeat until you fix all n people."],"sampleTestCase":"[\"Mary\",\"John\",\"Emma\"]\n[180,165,170]","exampleTestcases":"[\"Mary\",\"John\",\"Emma\"]\n[180,165,170]\n[\"Alice\",\"Bob\",\"Bob\"]\n[155,185,150]","content":"<p>You are given an array of strings <code>names</code>, and an array <code>heights</code> that consists of <strong>distinct</strong> positive integers. Both arrays are of length <code>n</code>.</p>\n\n<p>For each index <code>i</code>, <code>names[i]</code> and <code>heights[i]</code> denote the name and height of the <code>i<sup>th</sup></code> person.</p>\n\n<p>Return <code>names</code><em> sorted in <strong>descending</strong> order by the people&#39;s heights</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;Mary&quot;,&quot;John&quot;,&quot;Emma&quot;], heights = [180,165,170]\n<strong>Output:</strong> [&quot;Mary&quot;,&quot;Emma&quot;,&quot;John&quot;]\n<strong>Explanation:</strong> Mary is the tallest, followed by Emma and John.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;Alice&quot;,&quot;Bob&quot;,&quot;Bob&quot;], heights = [155,185,150]\n<strong>Output:</strong> [&quot;Bob&quot;,&quot;Alice&quot;,&quot;Bob&quot;]\n<strong>Explanation:</strong> The first Bob is the tallest, followed by Alice and the second Bob.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == names.length == heights.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= names[i].length &lt;= 20</code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>names[i]</code> consists of lower and upper case English letters.</li>\n\t<li>All the values of <code>heights</code> are distinct.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串数组 <code>names</code> ，和一个由 <strong>互不相同</strong> 的正整数组成的数组 <code>heights</code> 。两个数组的长度均为 <code>n</code> 。</p>\n\n<p>对于每个下标 <code>i</code>，<code>names[i]</code> 和 <code>heights[i]</code> 表示第 <code>i</code> 个人的名字和身高。</p>\n\n<p>请按身高 <strong>降序</strong> 顺序返回对应的名字数组 <code>names</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\n<strong>输出：</strong>[\"Mary\",\"Emma\",\"John\"]\n<strong>解释：</strong>Mary 最高，接着是 Emma 和 John 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\n<strong>输出：</strong>[\"Bob\",\"Alice\",\"Bob\"]\n<strong>解释：</strong>第一个 Bob 最高，然后是 Alice 和第二个 Bob 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == names.length == heights.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= names[i].length &lt;= 20</code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>names[i]</code> 由大小写英文字母组成</li>\n\t<li><code>heights</code> 中的所有值互不相同</li>\n</ul>\n","translatedTitle":"按身高排序","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String[] sortPeople(String[] names, int[] heights) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def sortPeople(self, names, heights):\n        \"\"\"\n        :type names: List[str]\n        :type heights: List[int]\n        :rtype: List[str]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** sortPeople(char ** names, int namesSize, int* heights, int heightsSize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string[] SortPeople(string[] names, int[] heights) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} names\n * @param {number[]} heights\n * @return {string[]}\n */\nvar sortPeople = function(names, heights) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} names\n# @param {Integer[]} heights\n# @return {String[]}\ndef sort_people(names, heights)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func sortPeople(_ names: [String], _ heights: [Int]) -> [String] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func sortPeople(names []string, heights []int) []string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def sortPeople(names: Array[String], heights: Array[Int]): Array[String] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun sortPeople(names: Array<String>, heights: IntArray): Array<String> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn sort_people(names: Vec<String>, heights: Vec<i32>) -> Vec<String> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $names\n     * @param Integer[] $heights\n     * @return String[]\n     */\n    function sortPeople($names, $heights) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function sortPeople(names: string[], heights: number[]): string[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (sort-people names heights)\n  (-> (listof string?) (listof exact-integer?) (listof string?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec sort_people(Names :: [unicode:unicode_binary()], Heights :: [integer()]) -> [unicode:unicode_binary()].\nsort_people(Names, Heights) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec sort_people(names :: [String.t], heights :: [integer]) :: [String.t]\n  def sort_people(names, heights) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  List<String> sortPeople(List<String> names, List<int> heights) {\n\n  }\n}"}]}