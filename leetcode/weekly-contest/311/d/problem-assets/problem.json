{"slug":"sum-of-prefix-scores-of-strings","id":2494,"frontendId":6183,"title":"Sum of Prefix Scores of Strings","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":15,"dislikes":0,"status":2,"tag":[],"totalAccepted":5465,"totalSubmission":15178,"hints":["What data structure will allow you to efficiently keep track of the score of each prefix?","Use a Trie. Insert all the words into it, and keep a counter at each node that will tell you how many times we have visited each prefix."],"sampleTestCase":"[\"abc\",\"ab\",\"bc\",\"b\"]","exampleTestcases":"[\"abc\",\"ab\",\"bc\",\"b\"]\n[\"abcd\"]","content":"<p>You are given an array <code>words</code> of size <code>n</code> consisting of <strong>non-empty</strong> strings.</p>\n\n<p>We define the <strong>score</strong> of a string <code>word</code> as the <strong>number</strong> of strings <code>words[i]</code> such that <code>word</code> is a <strong>prefix</strong> of <code>words[i]</code>.</p>\n\n<ul>\n\t<li>For example, if <code>words = [&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, &quot;cab&quot;]</code>, then the score of <code>&quot;ab&quot;</code> is <code>2</code>, since <code>&quot;ab&quot;</code> is a prefix of both <code>&quot;ab&quot;</code> and <code>&quot;abc&quot;</code>.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>n</code><em> where </em><code>answer[i]</code><em> is the <strong>sum</strong> of scores of every <strong>non-empty</strong> prefix of </em><code>words[i]</code>.</p>\n\n<p><strong>Note</strong> that a string is considered as a prefix of itself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;ab&quot;,&quot;bc&quot;,&quot;b&quot;]\n<strong>Output:</strong> [5,4,3,2]\n<strong>Explanation:</strong> The answer for each string is the following:\n- &quot;abc&quot; has 3 prefixes: &quot;a&quot;, &quot;ab&quot;, and &quot;abc&quot;.\n- There are 2 strings with the prefix &quot;a&quot;, 2 strings with the prefix &quot;ab&quot;, and 1 string with the prefix &quot;abc&quot;.\nThe total is answer[0] = 2 + 2 + 1 = 5.\n- &quot;ab&quot; has 2 prefixes: &quot;a&quot; and &quot;ab&quot;.\n- There are 2 strings with the prefix &quot;a&quot;, and 2 strings with the prefix &quot;ab&quot;.\nThe total is answer[1] = 2 + 2 = 4.\n- &quot;bc&quot; has 2 prefixes: &quot;b&quot; and &quot;bc&quot;.\n- There are 2 strings with the prefix &quot;b&quot;, and 1 string with the prefix &quot;bc&quot;.\nThe total is answer[2] = 2 + 1 = 3.\n- &quot;b&quot; has 1 prefix: &quot;b&quot;.\n- There are 2 strings with the prefix &quot;b&quot;.\nThe total is answer[3] = 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;]\n<strong>Output:</strong> [4]\n<strong>Explanation:</strong>\n&quot;abcd&quot; has 4 prefixes: &quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, and &quot;abcd&quot;.\nEach prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你一个长度为 <code>n</code> 的数组 <code>words</code> ，该数组由 <strong>非空</strong> 字符串组成。</p>\n\n<p>定义字符串 <code>word</code> 的 <strong>分数</strong> 等于以 <code>word</code> 作为 <strong>前缀</strong> 的 <code>words[i]</code> 的数目。</p>\n\n<ul>\n\t<li>例如，如果 <code>words = [\"a\", \"ab\", \"abc\", \"cab\"]</code> ，那么 <code>\"ab\"</code> 的分数是 <code>2</code> ，因为 <code>\"ab\"</code> 是 <code>\"ab\"</code> 和 <code>\"abc\"</code> 的一个前缀。</li>\n</ul>\n\n<p>返回一个长度为<em> </em><code>n</code> 的数组<em> </em><code>answer</code><em> </em>，其中<em> </em><code>answer[i]</code><em> </em>是<em>&nbsp;</em><code>words[i]</code> 的每个非空前缀的分数 <strong>总和</strong> <em>。</em></p>\n\n<p><strong>注意：</strong>字符串视作它自身的一个前缀。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"abc\",\"ab\",\"bc\",\"b\"]\n<strong>输出：</strong>[5,4,3,2]\n<strong>解释：</strong>对应每个字符串的答案如下：\n- \"abc\" 有 3 个前缀：\"a\"、\"ab\" 和 \"abc\" 。\n- 2 个字符串的前缀为 \"a\" ，2 个字符串的前缀为 \"ab\" ，1 个字符串的前缀为 \"abc\" 。\n总计 answer[0] = 2 + 2 + 1 = 5 。\n- \"ab\" 有 2 个前缀：\"a\" 和 \"ab\" 。\n- 2 个字符串的前缀为 \"a\" ，2 个字符串的前缀为 \"ab\" 。\n总计 answer[1] = 2 + 2 = 4 。\n- \"bc\" 有 2 个前缀：\"b\" 和 \"bc\" 。\n- 2 个字符串的前缀为 \"b\" ，1 个字符串的前缀为 \"bc\" 。 \n总计 answer[2] = 2 + 1 = 3 。\n- \"b\" 有 1 个前缀：\"b\"。\n- 2 个字符串的前缀为 \"b\" 。\n总计 answer[3] = 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"abcd\"]\n<strong>输出：</strong>[4]\n<strong>解释：</strong>\n\"abcd\" 有 4 个前缀 \"a\"、\"ab\"、\"abc\" 和 \"abcd\"。\n每个前缀的分数都是 1 ，总计 answer[0] = 1 + 1 + 1 + 1 = 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> 由小写英文字母组成</li>\n</ul>\n","translatedTitle":"字符串的前缀分数和","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<int> sumPrefixScores(vector<string>& words) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int[] sumPrefixScores(String[] words) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def sumPrefixScores(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def sumPrefixScores(self, words: List[str]) -> List[int]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumPrefixScores(char ** words, int wordsSize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int[] SumPrefixScores(string[] words) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} words\n * @return {number[]}\n */\nvar sumPrefixScores = function(words) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} words\n# @return {Integer[]}\ndef sum_prefix_scores(words)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func sumPrefixScores(_ words: [String]) -> [Int] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func sumPrefixScores(words []string) []int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def sumPrefixScores(words: Array[String]): Array[Int] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun sumPrefixScores(words: Array<String>): IntArray {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn sum_prefix_scores(words: Vec<String>) -> Vec<i32> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function sumPrefixScores($words) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function sumPrefixScores(words: string[]): number[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (sum-prefix-scores words)\n  (-> (listof string?) (listof exact-integer?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec sum_prefix_scores(Words :: [unicode:unicode_binary()]) -> [integer()].\nsum_prefix_scores(Words) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec sum_prefix_scores(words :: [String.t]) :: [integer]\n  def sum_prefix_scores(words) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  List<int> sumPrefixScores(List<String> words) {\n\n  }\n}"}]}