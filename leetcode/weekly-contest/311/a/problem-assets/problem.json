{"slug":"smallest-even-multiple","id":2491,"frontendId":6180,"title":"Smallest Even Multiple","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":5,"dislikes":0,"status":2,"tag":[],"totalAccepted":7408,"totalSubmission":8065,"hints":["A guaranteed way to find a multiple of 2 and n is to multiply them together. When is this the answer, and when is there a smaller answer?","There is a smaller answer when n is even."],"sampleTestCase":"5","exampleTestcases":"5\n6","content":"Given a <strong>positive</strong> integer <code>n</code>, return <em>the smallest positive integer that is a multiple of <strong>both</strong> </em><code>2</code><em> and </em><code>n</code>.\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The smallest multiple of both 5 and 2 is 10.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 150</code></li>\n</ul>\n","translatedContent":"给你一个正整数 <code>n</code> ，返回 <code>2</code><em> </em>和<em> </em><code>n</code> 的最小公倍数（正整数）。\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>10\n<strong>解释：</strong>5 和 2 的最小公倍数是 10 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>6\n<strong>解释：</strong>6 和 2 的最小公倍数是 6 。注意数字会是它自身的倍数。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 150</code></li>\n</ul>\n","translatedTitle":"最小偶倍数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int smallestEvenMultiple(int n) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int smallestEvenMultiple(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def smallestEvenMultiple(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def smallestEvenMultiple(self, n: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint smallestEvenMultiple(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int SmallestEvenMultiple(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar smallestEvenMultiple = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {Integer}\ndef smallest_even_multiple(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func smallestEvenMultiple(_ n: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func smallestEvenMultiple(n int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def smallestEvenMultiple(n: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun smallestEvenMultiple(n: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn smallest_even_multiple(n: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function smallestEvenMultiple($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function smallestEvenMultiple(n: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (smallest-even-multiple n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec smallest_even_multiple(N :: integer()) -> integer().\nsmallest_even_multiple(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec smallest_even_multiple(n :: integer) :: integer\n  def smallest_even_multiple(n) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int smallestEvenMultiple(int n) {\n\n  }\n}"}]}