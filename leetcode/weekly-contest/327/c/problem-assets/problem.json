{"slug":"make-number-of-distinct-characters-equal","id":2615,"frontendId":6284,"title":"Make Number of Distinct Characters Equal","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":7,"dislikes":0,"status":2,"tag":[],"totalAccepted":2804,"totalSubmission":11578,"hints":["Create a frequency array of the letters of each string.","There are 26*26 possible pairs of letters to swap. Can we try them all?","Iterate over all possible pairs of letters and check if swapping them will yield two strings that have the same number of distinct characters. Use the frequency array for the check."],"sampleTestCase":"\"ac\"\n\"b\"","exampleTestcases":"\"ac\"\n\"b\"\n\"abcc\"\n\"aab\"\n\"abcde\"\n\"fghij\"","content":"<p>You are given two <strong>0-indexed</strong> strings <code>word1</code> and <code>word2</code>.</p>\n\n<p>A <strong>move</strong> consists of choosing two indices <code>i</code> and <code>j</code> such that <code>0 &lt;= i &lt; word1.length</code> and <code>0 &lt;= j &lt; word2.length</code> and swapping <code>word1[i]</code> with <code>word2[j]</code>.</p>\n\n<p>Return <code>true</code> <em>if it is possible to get the number of distinct characters in</em> <code>word1</code> <em>and</em> <code>word2</code> <em>to be equal with <strong>exactly one</strong> move. </em>Return <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;ac&quot;, word2 = &quot;b&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Any pair of swaps would yield two distinct characters in the first string, and one in the second string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;abcc&quot;, word2 = &quot;aab&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = &quot;abac&quot; and word2 = &quot;cab&quot;, which both have 3 distinct characters.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;abcde&quot;, word2 = &quot;fghij&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Both resulting strings will have 5 distinct characters, regardless of which indices we swap.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你两个下标从 <strong>0</strong> 开始的字符串 <code>word1</code> 和 <code>word2</code> 。</p>\n\n<p>一次 <strong>移动</strong> 由以下两个步骤组成：</p>\n\n<ul>\n\t<li>选中两个下标&nbsp;<code>i</code> 和 <code>j</code> ，分别满足 <code>0 &lt;= i &lt; word1.length</code> 和 <code>0 &lt;= j &lt; word2.length</code> ，</li>\n\t<li>交换 <code>word1[i]</code> 和 <code>word2[j]</code> 。</li>\n</ul>\n\n<p>如果可以通过 <strong>恰好一次</strong> 移动，使 <code>word1</code> 和 <code>word2</code> 中不同字符的数目相等，则返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>word1 = \"ac\", word2 = \"b\"\n<strong>输出：</strong>false\n<strong>解释：</strong>交换任何一组下标都会导致第一个字符串中有 2 个不同的字符，而在第二个字符串中只有 1 个不同字符。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>word1 = \"abcc\", word2 = \"aab\"\n<strong>输出：</strong>true\n<strong>解释：</strong>交换第一个字符串的下标 2 和第二个字符串的下标 0 。之后得到 word1 = \"abac\" 和 word2 = \"cab\" ，各有 3 个不同字符。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>word1 = \"abcde\", word2 = \"fghij\"\n<strong>输出：</strong>true\n<strong>解释：</strong>无论交换哪一组下标，两个字符串中都会有 5 个不同字符。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word1</code> 和 <code>word2</code> 仅由小写英文字母组成。</li>\n</ul>\n","translatedTitle":"使字符串总不同字符的数目相等","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool isItPossible(string word1, string word2) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean isItPossible(String word1, String word2) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def isItPossible(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def isItPossible(self, word1: str, word2: str) -> bool:"},{"lang":"C","langSlug":"c","code":"bool isItPossible(char * word1, char * word2){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool IsItPossible(string word1, string word2) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} word1\n * @param {string} word2\n * @return {boolean}\n */\nvar isItPossible = function(word1, word2) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} word1\n# @param {String} word2\n# @return {Boolean}\ndef is_it_possible(word1, word2)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func isItPossible(_ word1: String, _ word2: String) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func isItPossible(word1 string, word2 string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def isItPossible(word1: String, word2: String): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun isItPossible(word1: String, word2: String): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn is_it_possible(word1: String, word2: String) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Boolean\n     */\n    function isItPossible($word1, $word2) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function isItPossible(word1: string, word2: string): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (is-it-possible word1 word2)\n  (-> string? string? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec is_it_possible(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> boolean().\nis_it_possible(Word1, Word2) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec is_it_possible(word1 :: String.t, word2 :: String.t) :: boolean\n  def is_it_possible(word1, word2) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  bool isItPossible(String word1, String word2) {\n\n  }\n}"}]}