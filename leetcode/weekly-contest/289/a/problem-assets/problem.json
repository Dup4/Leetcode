{"slug":"calculate-digit-sum-of-a-string","id":2361,"frontendId":6070,"title":"Calculate Digit Sum of a String","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":3,"dislikes":0,"status":0,"tag":[],"totalAccepted":6224,"totalSubmission":10121,"hints":["Try simulating the entire process to find the final answer."],"sampleTestCase":"\"11111222223\"\n3","exampleTestcases":"\"11111222223\"\n3\n\"00000000\"\n3","content":"<p>You are given a string <code>s</code> consisting of digits and an integer <code>k</code>.</p>\n\n<p>A <strong>round</strong> can be completed if the length of <code>s</code> is greater than <code>k</code>. In one round, do the following:</p>\n\n<ol>\n\t<li><strong>Divide</strong> <code>s</code> into <strong>consecutive groups</strong> of size <code>k</code> such that the first <code>k</code> characters are in the first group, the next <code>k</code> characters are in the second group, and so on. <strong>Note</strong> that the size of the last group can be smaller than <code>k</code>.</li>\n\t<li><strong>Replace</strong> each group of <code>s</code> with a string representing the sum of all its digits. For example, <code>&quot;346&quot;</code> is replaced with <code>&quot;13&quot;</code> because <code>3 + 4 + 6 = 13</code>.</li>\n\t<li><strong>Merge</strong> consecutive groups together to form a new string. If the length of the string is greater than <code>k</code>, repeat from step <code>1</code>.</li>\n</ol>\n\n<p>Return <code>s</code> <em>after all rounds have been completed</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;11111222223&quot;, k = 3\n<strong>Output:</strong> &quot;135&quot;\n<strong>Explanation:</strong> \n- For the first round, we divide s into groups of size 3: &quot;111&quot;, &quot;112&quot;, &quot;222&quot;, and &quot;23&quot;.\n  ​​​​​Then we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. \n&nbsp; So, s becomes &quot;3&quot; + &quot;4&quot; + &quot;6&quot; + &quot;5&quot; = &quot;3465&quot; after the first round.\n- For the second round, we divide s into &quot;346&quot; and &quot;5&quot;.\n&nbsp; Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. \n&nbsp; So, s becomes &quot;13&quot; + &quot;5&quot; = &quot;135&quot; after second round. \nNow, s.length &lt;= k, so we return &quot;135&quot; as the answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00000000&quot;, k = 3\n<strong>Output:</strong> &quot;000&quot;\n<strong>Explanation:</strong> \nWe divide s into &quot;000&quot;, &quot;000&quot;, and &quot;00&quot;.\nThen we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. \ns becomes &quot;0&quot; + &quot;0&quot; + &quot;0&quot; = &quot;000&quot;, whose length is equal to k, so we return &quot;000&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>2 &lt;= k &lt;= 100</code></li>\n\t<li><code>s</code> consists of digits only.</li>\n</ul>\n","translatedContent":"<p>给你一个由若干数字（<code>0</code> - <code>9</code>）组成的字符串 <code>s</code> ，和一个整数。</p>\n\n<p>如果 <code>s</code> 的长度大于 <code>k</code> ，则可以执行一轮操作。在一轮操作中，需要完成以下工作：</p>\n\n<ol>\n\t<li>将 <code>s</code> <strong>拆分 </strong>成长度为 <code>k</code> 的若干 <strong>连续数字组</strong> ，使得前 <code>k</code> 个字符都分在第一组，接下来的 <code>k</code> 个字符都分在第二组，依此类推。<strong>注意</strong>，最后一个数字组的长度可以小于 <code>k</code> 。</li>\n\t<li>用表示每个数字组中所有数字之和的字符串来 <strong>替换</strong> 对应的数字组。例如，<code>\"346\"</code> 会替换为 <code>\"13\"</code> ，因为 <code>3 + 4 + 6 = 13</code> 。</li>\n\t<li><strong>合并</strong> 所有组以形成一个新字符串。如果新字符串的长度大于 <code>k</code> 则重复第一步。</li>\n</ol>\n\n<p>返回在完成所有轮操作后的 <code>s</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s = \"11111222223\", k = 3\n<strong>输出：</strong>\"135\"\n<strong>解释：</strong>\n- 第一轮，将 s 分成：\"111\"、\"112\"、\"222\" 和 \"23\" 。\n  接着，计算每一组的数字和：1 + 1 + 1 = 3、1 + 1 + 2 = 4、2 + 2 + 2 = 6 和 2 + 3 = 5 。 \n&nbsp; 这样，s 在第一轮之后变成 \"3\" + \"4\" + \"6\" + \"5\" = \"3465\" 。\n- 第二轮，将 s 分成：\"346\" 和 \"5\" 。\n&nbsp; 接着，计算每一组的数字和：3 + 4 + 6 = 13 、5 = 5 。\n&nbsp; 这样，s 在第二轮之后变成 \"13\" + \"5\" = \"135\" 。 \n现在，s.length &lt;= k ，所以返回 \"135\" 作为答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s = \"00000000\", k = 3\n<strong>输出：</strong>\"000\"\n<strong>解释：</strong>\n将 \"000\", \"000\", and \"00\".\n接着，计算每一组的数字和：0 + 0 + 0 = 0 、0 + 0 + 0 = 0 和 0 + 0 = 0 。 \ns 变为 \"0\" + \"0\" + \"0\" = \"000\" ，其长度等于 k ，所以返回 \"000\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>2 &lt;= k &lt;= 100</code></li>\n\t<li><code>s</code> 仅由数字（<code>0</code> - <code>9</code>）组成。</li>\n</ul>\n","translatedTitle":"计算字符串的数字和","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string digitSum(string s, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String digitSum(String s, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def digitSum(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def digitSum(self, s: str, k: int) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * digitSum(char * s, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string DigitSum(string s, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar digitSum = function(s, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef digit_sum(s, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func digitSum(_ s: String, _ k: Int) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func digitSum(s string, k int) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def digitSum(s: String, k: Int): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun digitSum(s: String, k: Int): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn digit_sum(s: String, k: i32) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function digitSum($s, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function digitSum(s: string, k: number): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (digit-sum s k)\n  (-> string? exact-integer? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec digit_sum(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\ndigit_sum(S, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec digit_sum(s :: String.t, k :: integer) :: String.t\n  def digit_sum(s, k) do\n\n  end\nend"}]}