{"slug":"three-consecutive-odds","id":1293,"title":"Three Consecutive Odds","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":12,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"}],"totalAccepted":22823,"totalSubmission":34793,"hints":["Check every three consecutive numbers in the array for parity."],"sampleTestCase":"[2,6,4,1]","exampleTestcases":"[2,6,4,1]\n[1,2,34,3,4,5,7,23,12]","content":"Given an integer array <code>arr</code>, return <code>true</code>&nbsp;if there are three consecutive odd numbers in the array. Otherwise, return&nbsp;<code>false</code>.\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,6,4,1]\n<strong>Output:</strong> false\n<b>Explanation:</b> There are no three consecutive odds.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,34,3,4,5,7,23,12]\n<strong>Output:</strong> true\n<b>Explanation:</b> [5,7,23] are three consecutive odds.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>arr</code>，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>arr = [2,6,4,1]\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在连续三个元素都是奇数的情况。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>arr = [1,2,34,3,4,5,7,23,12]\n<strong>输出：</strong>true\n<strong>解释：</strong>存在连续三个元素都是奇数的情况，即 [5,7,23] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"存在连续三个奇数的数组","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool threeConsecutiveOdds(vector<int>& arr) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean threeConsecutiveOdds(int[] arr) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def threeConsecutiveOdds(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool threeConsecutiveOdds(int* arr, int arrSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool ThreeConsecutiveOdds(int[] arr) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar threeConsecutiveOdds = function(arr) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} arr\n# @return {Boolean}\ndef three_consecutive_odds(arr)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func threeConsecutiveOdds(_ arr: [Int]) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func threeConsecutiveOdds(arr []int) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def threeConsecutiveOdds(arr: Array[Int]): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun threeConsecutiveOdds(arr: IntArray): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn three_consecutive_odds(arr: Vec<i32>) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function threeConsecutiveOdds($arr) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function threeConsecutiveOdds(arr: number[]): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (three-consecutive-odds arr)\n  (-> (listof exact-integer?) boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec three_consecutive_odds(Arr :: [integer()]) -> boolean().\nthree_consecutive_odds(Arr) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec three_consecutive_odds(arr :: [integer]) :: boolean\n  def three_consecutive_odds(arr) do\n\n  end\nend"}]}