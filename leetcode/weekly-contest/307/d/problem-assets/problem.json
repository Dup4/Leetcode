{"slug":"find-the-k-sum-of-an-array","id":2462,"frontendId":6155,"title":"Find the K-Sum of an Array","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":4,"dislikes":0,"status":2,"tag":[],"totalAccepted":582,"totalSubmission":2974,"hints":["Start from the largest sum possible, and keep finding the next largest sum until you reach the kth sum.","Starting from a sum, what are the two next largest sums that you can obtain from it?"],"sampleTestCase":"[2,4,-2]\n5","exampleTestcases":"[2,4,-2]\n5\n[1,-2,3,4,-10,12]\n16","content":"<p>You are given an integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>. You can choose any <strong>subsequence</strong> of the array and sum all of its elements together.</p>\n\n<p>We define the <strong>K-Sum</strong> of the array as the <code>k<sup>th</sup></code> <strong>largest</strong> subsequence sum that can be obtained (<strong>not</strong> necessarily distinct).</p>\n\n<p>Return <em>the K-Sum of the array</em>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p><strong>Note</strong> that the empty subsequence is considered to have a sum of <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,-2], k = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> All the possible subsequence sums that we can obtain are the following sorted in decreasing order:\n- 6, 4, 4, 2, <u>2</u>, 0, 0, -2.\nThe 5-Sum of the array is 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-2,3,4,-10,12], k = 16\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The 16-Sum of the array is 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= min(2000, 2<sup>n</sup>)</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> 和一个 <strong>正</strong> 整数 <code>k</code> 。你可以选择数组的任一 <strong>子序列</strong> 并且对其全部元素求和。</p>\n\n<p>数组的 <strong>第 k 大和</strong> 定义为：可以获得的第 <code>k</code> 个 <strong>最大</strong> 子序列和（子序列和允许出现重复）</p>\n\n<p>返回数组的 <strong>第 k 大和</strong> 。</p>\n\n<p>子序列是一个可以由其他数组删除某些或不删除元素排生而来的数组，且派生过程不改变剩余元素的顺序。</p>\n\n<p><strong>注意：</strong>空子序列的和视作 <code>0</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [2,4,-2], k = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>所有可能获得的子序列和列出如下，按递减顺序排列：\n- 6、4、4、2、<strong><em>2</em></strong>、0、0、-2\n数组的第 5 大和是 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,-2,3,4,-10,12], k = 16\n<strong>输出：</strong>10\n<strong>解释：</strong>数组的第 16 大和是 10 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= min(2000, 2<sup>n</sup>)</code></li>\n</ul>\n","translatedTitle":"找出数组的第 K 大和","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long kSum(vector<int>& nums, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long kSum(int[] nums, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def kSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def kSum(self, nums: List[int], k: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nlong long kSum(int* nums, int numsSize, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long KSum(int[] nums, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar kSum = function(nums, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef k_sum(nums, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func kSum(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func kSum(nums []int, k int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def kSum(nums: Array[Int], k: Int): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun kSum(nums: IntArray, k: Int): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn k_sum(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function kSum($nums, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function kSum(nums: number[], k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (k-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec k_sum(Nums :: [integer()], K :: integer()) -> integer().\nk_sum(Nums, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec k_sum(nums :: [integer], k :: integer) :: integer\n  def k_sum(nums, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int kSum(List<int> nums, int k) {\n\n  }\n}"}]}