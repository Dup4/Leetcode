{"slug":"largest-palindromic-number","id":2475,"frontendId":6166,"title":"Largest Palindromic Number","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":2,"tag":[],"totalAccepted":4559,"totalSubmission":17509,"hints":["In order to form a valid palindrome, other than the middle digit in an odd-length palindrome, every digit needs to exist on both sides.","A longer palindrome implies a larger valued palindrome. For palindromes of the same length, the larger digits should occur first.","We can count the occurrences of each digit and build the palindrome starting from the ends. Starting from the larger digits, if there are still at least 2 occurrences of a digit, we can place these digits on each side.","Make sure to consider the special case for the center digit (if any) and zeroes. There should not be leading zeroes."],"sampleTestCase":"\"444947137\"","exampleTestcases":"\"444947137\"\n\"00009\"","content":"<p>You are given a string <code>num</code> consisting of digits only.</p>\n\n<p>Return <em>the <strong>largest palindromic</strong> integer (in the form of a string) that can be formed using digits taken from </em><code>num</code>. It should not contain <strong>leading zeroes</strong>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>You do <strong>not</strong> need to use all the digits of <code>num</code>, but you must use <strong>at least</strong> one digit.</li>\n\t<li>The digits can be reordered.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;444947137&quot;\n<strong>Output:</strong> &quot;7449447&quot;\n<strong>Explanation:</strong> \nUse the digits &quot;4449477&quot; from &quot;<u><strong>44494</strong></u><u><strong>7</strong></u>13<u><strong>7</strong></u>&quot; to form the palindromic integer &quot;7449447&quot;.\nIt can be shown that &quot;7449447&quot; is the largest palindromic integer that can be formed.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;00009&quot;\n<strong>Output:</strong> &quot;9&quot;\n<strong>Explanation:</strong> \nIt can be shown that &quot;9&quot; is the largest palindromic integer that can be formed.\nNote that the integer returned should not contain leading zeroes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>num</code> consists of digits.</li>\n</ul>\n","translatedContent":"<p>给你一个仅由数字（<code>0 - 9</code>）组成的字符串 <code>num</code> 。</p>\n\n<p>请你找出能够使用 <code>num</code> 中数字形成的 <strong>最大回文</strong> 整数，并以字符串形式返回。该整数不含 <strong>前导零</strong> 。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>你 <strong>无需</strong> 使用 <code>num</code> 中的所有数字，但你必须使用 <strong>至少</strong> 一个数字。</li>\n\t<li>数字可以重新排序。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"444947137\"\n<strong>输出：</strong>\"7449447\"\n<strong>解释：</strong>\n从 \"<em><strong>44494</strong></em><em><strong>7</strong></em>13<em><strong>7</strong></em>\" 中选用数字 \"4449477\"，可以形成回文整数 \"7449447\" 。\n可以证明 \"7449447\" 是能够形成的最大回文整数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"00009\"\n<strong>输出：</strong>\"9\"\n<strong>解释：</strong>\n可以证明 \"9\" 能够形成的最大回文整数。\n注意返回的整数不应含前导零。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>num</code> 由数字（<code>0 - 9</code>）组成</li>\n</ul>\n","translatedTitle":"最大回文数字","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string largestPalindromic(string num) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String largestPalindromic(String num) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def largestPalindromic(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def largestPalindromic(self, num: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * largestPalindromic(char * num){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string LargestPalindromic(string num) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} num\n * @return {string}\n */\nvar largestPalindromic = function(num) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} num\n# @return {String}\ndef largest_palindromic(num)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func largestPalindromic(_ num: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func largestPalindromic(num string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def largestPalindromic(num: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun largestPalindromic(num: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn largest_palindromic(num: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $num\n     * @return String\n     */\n    function largestPalindromic($num) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function largestPalindromic(num: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (largest-palindromic num)\n  (-> string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec largest_palindromic(Num :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlargest_palindromic(Num) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec largest_palindromic(num :: String.t) :: String.t\n  def largest_palindromic(num) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  String largestPalindromic(String num) {\n\n  }\n}"}]}