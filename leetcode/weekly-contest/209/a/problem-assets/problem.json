{"slug":"special-array-with-x-elements-greater-than-or-equal-x","id":1730,"title":"Special Array With X Elements Greater Than or Equal X","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":34,"dislikes":0,"status":2,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Binary Search","slug":"binary-search","translatedName":"二分查找"},{"name":"Sorting","slug":"sorting","translatedName":"排序"}],"totalAccepted":11095,"totalSubmission":17410,"hints":["Count the number of elements greater than or equal to x for each x in the range [0, nums.length].","If for any x, the condition satisfies, return that x. Otherwise, there is no answer."],"sampleTestCase":"[3,5]","exampleTestcases":"[3,5]\n[0,0]\n[0,4,3,0,4]","content":"<p>You are given an array <code>nums</code> of non-negative integers. <code>nums</code> is considered <strong>special</strong> if there exists a number <code>x</code> such that there are <strong>exactly</strong> <code>x</code> numbers in <code>nums</code> that are <strong>greater than or equal to</strong> <code>x</code>.</p>\n\n<p>Notice that <code>x</code> <strong>does not</strong> have to be an element in <code>nums</code>.</p>\n\n<p>Return <code>x</code> <em>if the array is <strong>special</strong>, otherwise, return </em><code>-1</code>. It can be proven that if <code>nums</code> is special, the value for <code>x</code> is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 values (3 and 5) that are greater than or equal to 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers &gt;= x, but there are 2.\nIf x = 1, there should be 1 number &gt;= x, but there are 0.\nIf x = 2, there should be 2 numbers &gt;= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,4,3,0,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 values that are greater than or equal to 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n","translatedContent":"<p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x</code> 个元素 <strong>大于或者等于</strong> <code>x</code> ，那么就称 <code>nums</code> 是一个 <strong>特殊数组</strong> ，而 <code>x</code> 是该数组的 <strong>特征值</strong> 。</p>\n\n<p>注意： <code>x</code> <strong>不必</strong> 是 <code>nums</code> 的中的元素。</p>\n\n<p>如果数组 <code>nums</code> 是一个 <strong>特殊数组</strong> ，请返回它的特征值 <code>x</code> 。否则，返回<em> </em><code>-1</code> 。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 <strong>唯一的</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,5]\n<strong>输出：</strong>2\n<strong>解释：</strong>有 2 个元素（3 和 5）大于或等于 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [0,0]\n<strong>输出：</strong>-1\n<strong>解释：</strong>没有满足题目要求的特殊数组，故而也不存在特征值 x 。\n如果 x = 0，应该有 0 个元素 &gt;= x，但实际有 2 个。\n如果 x = 1，应该有 1 个元素 &gt;= x，但实际有 0 个。\n如果 x = 2，应该有 2 个元素 &gt;= x，但实际有 0 个。\nx 不能取更大的值，因为 nums 中只有两个元素。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [0,4,3,0,4]\n<strong>输出：</strong>3\n<strong>解释：</strong>有 3 个元素大于或等于 3 。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,6,7,7,0]\n<strong>输出：</strong>-1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n","translatedTitle":"特殊数组的特征值","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int specialArray(vector<int>& nums) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int specialArray(int[] nums) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def specialArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def specialArray(self, nums: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint specialArray(int* nums, int numsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int SpecialArray(int[] nums) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialArray = function(nums) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @return {Integer}\ndef special_array(nums)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func specialArray(_ nums: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func specialArray(nums []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def specialArray(nums: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun specialArray(nums: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn special_array(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function specialArray($nums) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function specialArray(nums: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (special-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec special_array(Nums :: [integer()]) -> integer().\nspecial_array(Nums) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec special_array(nums :: [integer]) :: integer\n  def special_array(nums) do\n\n  end\nend"}]}