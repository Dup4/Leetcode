{"slug":"minimum-one-bit-operations-to-make-integers-zero","id":1732,"title":"Minimum One Bit Operations to Make Integers Zero","categoryTitle":"Algorithms","difficulty":2,"starred":false,"locked":false,"likes":41,"dislikes":0,"status":2,"tag":[{"name":"Bit Manipulation","slug":"bit-manipulation","translatedName":"位运算"},{"name":"Memoization","slug":"memoization","translatedName":"记忆化搜索"},{"name":"Dynamic Programming","slug":"dynamic-programming","translatedName":"动态规划"}],"totalAccepted":2284,"totalSubmission":3749,"hints":["The fastest way to convert n to zero is to remove all set bits starting from the leftmost one. Try some simple examples to learn the rule of how many steps are needed to remove one set bit.","consider n=2^k case first, then solve for all n."],"sampleTestCase":"3","exampleTestcases":"3\n6","content":"<p>Given an integer <code>n</code>, you must transform it into <code>0</code> using the following operations any number of times:</p>\n\n<ul>\n\t<li>Change the rightmost (<code>0<sup>th</sup></code>) bit in the binary representation of <code>n</code>.</li>\n\t<li>Change the <code>i<sup>th</sup></code> bit in the binary representation of <code>n</code> if the <code>(i-1)<sup>th</sup></code> bit is set to <code>1</code> and the <code>(i-2)<sup>th</sup></code> through <code>0<sup>th</sup></code> bits are set to <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of operations to transform </em><code>n</code><em> into </em><code>0</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The binary representation of 3 is &quot;11&quot;.\n&quot;<u>1</u>1&quot; -&gt; &quot;<u>0</u>1&quot; with the 2<sup>nd</sup> operation since the 0<sup>th</sup> bit is 1.\n&quot;0<u>1</u>&quot; -&gt; &quot;0<u>0</u>&quot; with the 1<sup>st</sup> operation.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The binary representation of 6 is &quot;110&quot;.\n&quot;<u>1</u>10&quot; -&gt; &quot;<u>0</u>10&quot; with the 2<sup>nd</sup> operation since the 1<sup>st</sup> bit is 1 and 0<sup>th</sup> through 0<sup>th</sup> bits are 0.\n&quot;01<u>0</u>&quot; -&gt; &quot;01<u>1</u>&quot; with the 1<sup>st</sup> operation.\n&quot;0<u>1</u>1&quot; -&gt; &quot;0<u>0</u>1&quot; with the 2<sup>nd</sup> operation since the 0<sup>th</sup> bit is 1.\n&quot;00<u>1</u>&quot; -&gt; &quot;00<u>0</u>&quot; with the 1<sup>st</sup> operation.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数 <code>n</code>，你需要重复执行多次下述操作将其转换为 <code>0</code> ：</p>\n\n<ul>\n\t<li>翻转 <code>n</code> 的二进制表示中最右侧位（第 <code>0</code> 位）。</li>\n\t<li>如果第 <code>(i-1)</code> 位为 <code>1</code> 且从第 <code>(i-2)</code> 位到第 <code>0</code> 位都为 <code>0</code>，则翻转 <code>n</code> 的二进制表示中的第 <code>i</code> 位。</li>\n</ul>\n\n<p>返回将 <code>n</code> 转换为 <code>0</code> 的最小操作次数。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 0\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>3 的二进制表示为 \"11\"\n\"<strong>1</strong>1\" -> \"<strong>0</strong>1\" ，执行的是第 2 种操作，因为第 0 位为 1 。\n\"0<strong>1</strong>\" -> \"0<strong>0</strong>\" ，执行的是第 1 种操作。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 6\n<strong>输出：</strong>4\n<strong>解释：</strong>6 的二进制表示为 \"110\".\n\"<strong>1</strong>10\" -> \"<strong>0</strong>10\" ，执行的是第 2 种操作，因为第 1 位为 1 ，第 0 到 0 位为 0 。\n\"01<strong>0</strong>\" -> \"01<strong>1</strong>\" ，执行的是第 1 种操作。\n\"0<strong>1</strong>1\" -> \"0<strong>0</strong>1\" ，执行的是第 2 种操作，因为第 0 位为 1 。\n\"00<strong>1</strong>\" -> \"00<strong>0</strong>\" ，执行的是第 1 种操作。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 9\n<strong>输出：</strong>14\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 333\n<strong>输出：</strong>393\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= n <= 10<sup>9</sup></code></li>\n</ul>\n","translatedTitle":"使整数变为 0 的最少操作次数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int minimumOneBitOperations(int n) {\n\n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int minimumOneBitOperations(int n) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def minimumOneBitOperations(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def minimumOneBitOperations(self, n: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint minimumOneBitOperations(int n){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MinimumOneBitOperations(int n) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar minimumOneBitOperations = function(n) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} n\n# @return {Integer}\ndef minimum_one_bit_operations(n)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func minimumOneBitOperations(_ n: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func minimumOneBitOperations(n int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def minimumOneBitOperations(n: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun minimumOneBitOperations(n: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn minimum_one_bit_operations(n: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function minimumOneBitOperations($n) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function minimumOneBitOperations(n: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (minimum-one-bit-operations n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec minimum_one_bit_operations(N :: integer()) -> integer().\nminimum_one_bit_operations(N) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec minimum_one_bit_operations(n :: integer) :: integer\n  def minimum_one_bit_operations(n) do\n\n  end\nend"}]}