{"slug":"check-if-all-as-appears-before-all-bs","id":2243,"title":"Check if All A's Appears Before All B's","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":4,"dislikes":0,"status":0,"tag":[{"name":"String","slug":"string","translatedName":"字符串"}],"totalAccepted":6838,"totalSubmission":9499,"hints":["You can check the opposite: check if there is a ‘b’ before an ‘a’. Then, negate and return that answer.","s should not have any occurrences of “ba” as a substring."],"sampleTestCase":"\"aaabbb\"","exampleTestcases":"\"aaabbb\"\n\"abab\"\n\"bbb\"","content":"<p>Given a string <code>s</code> consisting of <strong>only</strong> the characters <code>&#39;a&#39;</code> and <code>&#39;b&#39;</code>, return <code>true</code> <em>if <strong>every</strong> </em><code>&#39;a&#39;</code> <em>appears before <strong>every</strong> </em><code>&#39;b&#39;</code><em> in the string</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabbb&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nThe &#39;a&#39;s are at indices 0, 1, and 2, while the &#39;b&#39;s are at indices 3, 4, and 5.\nHence, every &#39;a&#39; appears before every &#39;b&#39; and we return true.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nThere is an &#39;a&#39; at index 2 and a &#39;b&#39; at index 1.\nHence, not every &#39;a&#39; appears before every &#39;b&#39; and we return false.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbb&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nThere are no &#39;a&#39;s, hence, every &#39;a&#39; appears before every &#39;b&#39; and we return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;a&#39;</code> or <code>&#39;b&#39;</code>.</li>\n</ul>\n","translatedContent":"<p>给你一个 <strong>仅</strong> 由字符 <code>'a'</code> 和 <code>'b'</code> 组成的字符串&nbsp; <code>s</code> 。如果字符串中 <strong>每个</strong> <em> </em><code>'a'</code> 都出现在 <strong>每个</strong><em> </em><code>'b'</code><em> </em>之前，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s = \"aaabbb\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\n'a' 位于下标 0、1 和 2 ；而 'b' 位于下标 3、4 和 5 。\n因此，每个 'a' 都出现在每个 'b' 之前，所以返回 true 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abab\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\n存在一个 'a' 位于下标 2 ，而一个 'b' 位于下标 1 。\n因此，不能满足每个 'a' 都出现在每个 'b' 之前，所以返回 false 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>s = \"bbb\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\n不存在 'a' ，因此可以视作每个 'a' 都出现在每个 'b' 之前，所以返回 true 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s[i]</code> 为 <code>'a'</code> 或 <code>'b'</code></li>\n</ul>\n","translatedTitle":"检查是否所有 A 都在 B 之前","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool checkString(string s) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean checkString(String s) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def checkString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def checkString(self, s: str) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool checkString(char * s){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool CheckString(string s) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkString = function(s) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} s\n# @return {Boolean}\ndef check_string(s)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func checkString(_ s: String) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func checkString(s string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def checkString(s: String): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun checkString(s: String): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn check_string(s: String) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkString($s) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function checkString(s: string): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (check-string s)\n  (-> string? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec check_string(S :: unicode:unicode_binary()) -> boolean().\ncheck_string(S) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec check_string(s :: String.t) :: boolean\n  def check_string(s) do\n\n  end\nend"}]}