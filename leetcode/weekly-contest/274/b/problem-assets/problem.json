{"slug":"number-of-laser-beams-in-a-bank","id":2244,"title":"Number of Laser Beams in a Bank","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":5,"dislikes":0,"status":0,"tag":[{"name":"Array","slug":"array","translatedName":"数组"},{"name":"Math","slug":"math","translatedName":"数学"},{"name":"String","slug":"string","translatedName":"字符串"},{"name":"Matrix","slug":"matrix","translatedName":"矩阵"}],"totalAccepted":5953,"totalSubmission":7069,"hints":["What is the commonality between security devices on the same row?","Each device on the same row has the same number of beams pointing towards the devices on the next row with devices.","If you were given an integer array where each element is the number of security devices on each row, can you solve it?","Convert the input to such an array, skip any row with no security device, then find the sum of the product between adjacent elements."],"sampleTestCase":"[\"011001\",\"000000\",\"010100\",\"001000\"]","exampleTestcases":"[\"011001\",\"000000\",\"010100\",\"001000\"]\n[\"000\",\"111\",\"000\"]","content":"<p>Anti-theft security devices are activated inside a bank. You are given a <strong>0-indexed</strong> binary string array <code>bank</code> representing the floor plan of the bank, which is an <code>m x n</code> 2D matrix. <code>bank[i]</code> represents the <code>i<sup>th</sup></code> row, consisting of <code>&#39;0&#39;</code>s and <code>&#39;1&#39;</code>s. <code>&#39;0&#39;</code> means the cell is empty, while<code>&#39;1&#39;</code> means the cell has a security device.</p>\n\n<p>There is <strong>one</strong> laser beam between any <strong>two</strong> security devices <strong>if both</strong> conditions are met:</p>\n\n<ul>\n\t<li>The two devices are located on two <strong>different rows</strong>: <code>r<sub>1</sub></code> and <code>r<sub>2</sub></code>, where <code>r<sub>1</sub> &lt; r<sub>2</sub></code>.</li>\n\t<li>For <strong>each</strong> row <code>i</code> where <code>r<sub>1</sub> &lt; i &lt; r<sub>2</sub></code>, there are <strong>no security devices</strong> in the <code>i<sup>th</sup></code> row.</li>\n</ul>\n\n<p>Laser beams are independent, i.e., one beam does not interfere nor join with another.</p>\n\n<p>Return <em>the total number of laser beams in the bank</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-24-laser1.jpg\" style=\"width: 400px; height: 368px;\" />\n<pre>\n<strong>Input:</strong> bank = [&quot;011001&quot;,&quot;000000&quot;,&quot;010100&quot;,&quot;001000&quot;]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n * bank[0][1] -- bank[2][1]\n * bank[0][1] -- bank[2][3]\n * bank[0][2] -- bank[2][1]\n * bank[0][2] -- bank[2][3]\n * bank[0][5] -- bank[2][1]\n * bank[0][5] -- bank[2][3]\n * bank[2][1] -- bank[3][2]\n * bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0<sup>th</sup> row with any on the 3<sup>rd</sup> row.\nThis is because the 2<sup>nd</sup> row contains security devices, which breaks the second condition.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-24-laser2.jpg\" style=\"width: 244px; height: 325px;\" />\n<pre>\n<strong>Input:</strong> bank = [&quot;000&quot;,&quot;111&quot;,&quot;000&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There does not exist two devices located on two different rows.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == bank.length</code></li>\n\t<li><code>n == bank[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>bank[i][j]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n","translatedContent":"<p>银行内部的防盗安全装置已经激活。给你一个下标从 <strong>0</strong> 开始的二进制字符串数组 <code>bank</code> ，表示银行的平面图，这是一个大小为 <code>m x n</code> 的二维矩阵。 <code>bank[i]</code> 表示第 <code>i</code> 行的设备分布，由若干 <code>'0'</code> 和若干 <code>'1'</code> 组成。<code>'0'</code> 表示单元格是空的，而 <code>'1'</code> 表示单元格有一个安全设备。</p>\n\n<p>对任意两个安全设备而言，<strong>如果</strong><strong>同时</strong> 满足下面两个条件，则二者之间存在 <strong>一个</strong> 激光束：</p>\n\n<ul>\n\t<li>两个设备位于两个 <strong>不同行</strong> ：<code>r<sub>1</sub></code> 和 <code>r<sub>2</sub></code> ，其中 <code>r<sub>1</sub> &lt; r<sub>2</sub></code> 。</li>\n\t<li>满足&nbsp;<code>r<sub>1</sub> &lt; i &lt; r<sub>2</sub></code>&nbsp;的 <strong>所有&nbsp;</strong>行&nbsp;<code>i</code>&nbsp;，都&nbsp;<strong>没有安全设备</strong> 。</li>\n</ul>\n\n<p>激光束是独立的，也就是说，一个激光束既不会干扰另一个激光束，也不会与另一个激光束合并成一束。</p>\n\n<p>返回银行中激光束的总数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-24-laser1.jpg\" style=\"width: 400px; height: 368px;\" /></p>\n\n<pre>\n<strong>输入：</strong>bank = [\"011001\",\"000000\",\"010100\",\"001000\"]\n<strong>输出：</strong>8\n<strong>解释：</strong>在下面每组设备对之间，存在一条激光束。总共是 8 条激光束：\n * bank[0][1] -- bank[2][1]\n * bank[0][1] -- bank[2][3]\n * bank[0][2] -- bank[2][1]\n * bank[0][2] -- bank[2][3]\n * bank[0][5] -- bank[2][1]\n * bank[0][5] -- bank[2][3]\n * bank[2][1] -- bank[3][2]\n * bank[2][3] -- bank[3][2]\n注意，第 0 行和第 3 行上的设备之间不存在激光束。\n这是因为第 2 行存在安全设备，这不满足第 2 个条件。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"problem-assets/https:--assets.leetcode.com-uploads-2021-12-24-laser2.jpg\" style=\"width: 244px; height: 325px;\" /></p>\n\n<pre>\n<strong>输入：</strong>bank = [\"000\",\"111\",\"000\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在两个位于不同行的设备\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == bank.length</code></li>\n\t<li><code>n == bank[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>bank[i][j]</code> 为 <code>'0'</code> 或 <code>'1'</code></li>\n</ul>\n","translatedTitle":"银行中的激光束数量","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int numberOfBeams(vector<string>& bank) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int numberOfBeams(String[] bank) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def numberOfBeams(self, bank):\n        \"\"\"\n        :type bank: List[str]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def numberOfBeams(self, bank: List[str]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint numberOfBeams(char ** bank, int bankSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int NumberOfBeams(string[] bank) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} bank\n * @return {number}\n */\nvar numberOfBeams = function(bank) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} bank\n# @return {Integer}\ndef number_of_beams(bank)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func numberOfBeams(_ bank: [String]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func numberOfBeams(bank []string) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def numberOfBeams(bank: Array[String]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun numberOfBeams(bank: Array<String>): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn number_of_beams(bank: Vec<String>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $bank\n     * @return Integer\n     */\n    function numberOfBeams($bank) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function numberOfBeams(bank: string[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (number-of-beams bank)\n  (-> (listof string?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec number_of_beams(Bank :: [unicode:unicode_binary()]) -> integer().\nnumber_of_beams(Bank) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec number_of_beams(bank :: [String.t]) :: integer\n  def number_of_beams(bank) do\n\n  end\nend"}]}