{"slug":"find-resultant-array-after-removing-anagrams","id":1353,"frontendId":5234,"title":"Find Resultant Array After Removing Anagrams","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":0,"tag":[{"name":"Sort","slug":"sort","translatedName":"排序"},{"name":"Array","slug":"array","translatedName":"数组"},{"name":"String","slug":"string","translatedName":"字符串"}],"totalAccepted":5427,"totalSubmission":9832,"hints":["Instead of removing each repeating anagram, try to find all the strings in words which will not be present in the final answer.","For every index i, find the largest index j < i such that words[j] will be present in the final answer.","Check if words[i] and words[j] are anagrams. If they are, then it can be confirmed that words[i] will not be present in the final answer."],"sampleTestCase":"[\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]","exampleTestcases":"[\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]\n[\"a\",\"b\",\"c\",\"d\",\"e\"]","content":"<p>You are given a <strong>0-indexed</strong> string array <code>words</code>, where <code>words[i]</code> consists of lowercase English letters.</p>\n\n<p>In one operation, select any index <code>i</code> such that <code>0 &lt; i &lt; words.length</code> and <code>words[i - 1]</code> and <code>words[i]</code> are <strong>anagrams</strong>, and <strong>delete</strong> <code>words[i]</code> from <code>words</code>. Keep performing this operation as long as you can select an index that satisfies the conditions.</p>\n\n<p>Return <code>words</code> <em>after performing all operations</em>. It can be shown that selecting the indices for each operation in <strong>any</strong> arbitrary order will lead to the same result.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, <code>&quot;dacb&quot;</code> is an anagram of <code>&quot;abdc&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abba&quot;,&quot;baba&quot;,&quot;bbaa&quot;,&quot;cd&quot;,&quot;cd&quot;]\n<strong>Output:</strong> [&quot;abba&quot;,&quot;cd&quot;]\n<strong>Explanation:</strong>\nOne of the ways we can obtain the resultant array is by using the following operations:\n- Since words[2] = &quot;bbaa&quot; and words[1] = &quot;baba&quot; are anagrams, we choose index 2 and delete words[2].\n  Now words = [&quot;abba&quot;,&quot;baba&quot;,&quot;cd&quot;,&quot;cd&quot;].\n- Since words[1] = &quot;baba&quot; and words[0] = &quot;abba&quot; are anagrams, we choose index 1 and delete words[1].\n  Now words = [&quot;abba&quot;,&quot;cd&quot;,&quot;cd&quot;].\n- Since words[2] = &quot;cd&quot; and words[1] = &quot;cd&quot; are anagrams, we choose index 2 and delete words[2].\n  Now words = [&quot;abba&quot;,&quot;cd&quot;].\nWe can no longer perform any operations, so [&quot;abba&quot;,&quot;cd&quot;] is the final answer.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]\n<strong>Explanation:</strong>\nNo two adjacent strings in words are anagrams of each other, so no operations are performed.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n","translatedContent":"<p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>words</code> ，其中 <code>words[i]</code> 由小写英文字符组成。</p>\n\n<p>在一步操作中，需要选出任一下标 <code>i</code> ，从 <code>words</code> 中 <strong>删除</strong> <code>words[i]</code> 。其中下标 <code>i</code> 需要同时满足下述两个条件：</p>\n\n<ol>\n\t<li><code>0 &lt; i &lt; words.length</code></li>\n\t<li><code>words[i - 1]</code> 和 <code>words[i]</code> 是 <strong>字母异位词</strong> 。</li>\n</ol>\n\n<p>只要可以选出满足条件的下标，就一直执行这个操作。</p>\n\n<p>在执行所有操作后，返回 <code>words</code> 。可以证明，按任意顺序为每步操作选择下标都会得到相同的结果。</p>\n\n<p><strong>字母异位词</strong> 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。例如，<code>\"dacb\"</code> 是 <code>\"abdc\"</code> 的一个字母异位词。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]\n<strong>输出：</strong>[\"abba\",\"cd\"]\n<strong>解释：</strong>\n获取结果数组的方法之一是执行下述步骤：\n- 由于 words[2] = \"bbaa\" 和 words[1] = \"baba\" 是字母异位词，选择下标 2 并删除 words[2] 。\n  现在 words = [\"abba\",\"baba\",\"cd\",\"cd\"] 。\n- 由于 words[1] = \"baba\" 和 words[0] = \"abba\" 是字母异位词，选择下标 1 并删除 words[1] 。\n  现在 words = [\"abba\",\"cd\",\"cd\"] 。\n- 由于 words[2] = \"cd\" 和 words[1] = \"cd\" 是字母异位词，选择下标 2 并删除 words[2] 。\n  现在 words = [\"abba\",\"cd\"] 。\n无法再执行任何操作，所以 [\"abba\",\"cd\"] 是最终答案。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"a\",\"b\",\"c\",\"d\",\"e\"]\n<strong>输出：</strong>[\"a\",\"b\",\"c\",\"d\",\"e\"]\n<strong>解释：</strong>\nwords 中不存在互为字母异位词的两个相邻字符串，所以无需执行任何操作。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> 由小写英文字母组成</li>\n</ul>\n","translatedTitle":"移除字母异位词后的结果数组","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<string> removeAnagrams(vector<string>& words) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<String> removeAnagrams(String[] words) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def removeAnagrams(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def removeAnagrams(self, words: List[str]) -> List[str]:"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** removeAnagrams(char ** words, int wordsSize, int* returnSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<string> RemoveAnagrams(string[] words) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar removeAnagrams = function(words) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String[]} words\n# @return {String[]}\ndef remove_anagrams(words)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func removeAnagrams(_ words: [String]) -> [String] {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func removeAnagrams(words []string) []string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def removeAnagrams(words: Array[String]): List[String] = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun removeAnagrams(words: Array<String>): List<String> {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn remove_anagrams(words: Vec<String>) -> Vec<String> {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function removeAnagrams($words) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function removeAnagrams(words: string[]): string[] {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (remove-anagrams words)\n  (-> (listof string?) (listof string?))\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec remove_anagrams(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nremove_anagrams(Words) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec remove_anagrams(words :: [String.t]) :: [String.t]\n  def remove_anagrams(words) do\n\n  end\nend"}]}