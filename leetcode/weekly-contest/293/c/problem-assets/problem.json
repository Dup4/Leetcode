{"slug":"largest-combination-with-bitwise-and-greater-than-zero","id":2356,"frontendId":6065,"title":"Largest Combination With Bitwise AND Greater Than Zero","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":3063,"totalSubmission":6806,"hints":["For the bitwise AND to be greater than zero, at least one bit should be 1 for every number in the combination.","The candidates are 24 bits long, so for every bit position, we can calculate the size of the largest combination such that the bitwise AND will have a 1 at that bit position."],"sampleTestCase":"[16,17,71,62,12,24,14]","exampleTestcases":"[16,17,71,62,12,24,14]\n[8,8]","content":"<p>The <strong>bitwise AND</strong> of an array <code>nums</code> is the bitwise AND of all integers in <code>nums</code>.</p>\n\n<ul>\n\t<li>For example, for <code>nums = [1, 5, 3]</code>, the bitwise AND is equal to <code>1 &amp; 5 &amp; 3 = 1</code>.</li>\n\t<li>Also, for <code>nums = [7]</code>, the bitwise AND is <code>7</code>.</li>\n</ul>\n\n<p>You are given an array of positive integers <code>candidates</code>. Evaluate the <strong>bitwise AND</strong> of every <strong>combination</strong> of numbers of <code>candidates</code>. Each number in <code>candidates</code> may only be used <strong>once</strong> in each combination.</p>\n\n<p>Return <em>the size of the <strong>largest</strong> combination of </em><code>candidates</code><em> with a bitwise AND <strong>greater</strong> than </em><code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [16,17,71,62,12,24,14]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The combination [16,17,62,24] has a bitwise AND of 16 &amp; 17 &amp; 62 &amp; 24 = 16 &gt; 0.\nThe size of the combination is 4.\nIt can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.\nNote that more than one combination may have the largest size.\nFor example, the combination [62,12,24,14] has a bitwise AND of 62 &amp; 12 &amp; 24 &amp; 14 = 8 &gt; 0.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [8,8]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The largest combination [8,8] has a bitwise AND of 8 &amp; 8 = 8 &gt; 0.\nThe size of the combination is 2, so we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= candidates[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n","translatedContent":"<p>对数组&nbsp;<code>nums</code> 执行 <strong>按位与</strong> 相当于对数组&nbsp;<code>nums</code> 中的所有整数执行 <strong>按位与</strong> 。</p>\n\n<ul>\n\t<li>例如，对 <code>nums = [1, 5, 3]</code> 来说，按位与等于 <code>1 &amp; 5 &amp; 3 = 1</code> 。</li>\n\t<li>同样，对 <code>nums = [7]</code> 而言，按位与等于 <code>7</code> 。</li>\n</ul>\n\n<p>给你一个正整数数组 <code>candidates</code> 。计算 <code>candidates</code> 中的数字每种组合下 <strong>按位与</strong> 的结果。 <code>candidates</code> 中的每个数字在每种组合中只能使用 <strong>一次</strong> 。</p>\n\n<p>返回按位与结果大于 <code>0</code> 的 <strong>最长</strong> 组合的长度<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>candidates = [16,17,71,62,12,24,14]\n<strong>输出：</strong>4\n<strong>解释：</strong>组合 [16,17,62,24] 的按位与结果是 16 &amp; 17 &amp; 62 &amp; 24 = 16 &gt; 0 。\n组合长度是 4 。\n可以证明不存在按位与结果大于 0 且长度大于 4 的组合。\n注意，符合长度最大的组合可能不止一种。\n例如，组合 [62,12,24,14] 的按位与结果是 62 &amp; 12 &amp; 24 &amp; 14 = 8 &gt; 0 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>candidates = [8,8]\n<strong>输出：</strong>2\n<strong>解释：</strong>最长组合是 [8,8] ，按位与结果 8 &amp; 8 = 8 &gt; 0 。\n组合长度是 2 ，所以返回 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= candidates[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n","translatedTitle":"按位与结果大于零的最长组合","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int largestCombination(vector<int>& candidates) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int largestCombination(int[] candidates) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def largestCombination(self, candidates):\n        \"\"\"\n        :type candidates: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def largestCombination(self, candidates: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint largestCombination(int* candidates, int candidatesSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int LargestCombination(int[] candidates) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} candidates\n * @return {number}\n */\nvar largestCombination = function(candidates) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} candidates\n# @return {Integer}\ndef largest_combination(candidates)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func largestCombination(_ candidates: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func largestCombination(candidates []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def largestCombination(candidates: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun largestCombination(candidates: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn largest_combination(candidates: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @return Integer\n     */\n    function largestCombination($candidates) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function largestCombination(candidates: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (largest-combination candidates)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec largest_combination(Candidates :: [integer()]) -> integer().\nlargest_combination(Candidates) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec largest_combination(candidates :: [integer]) :: integer\n  def largest_combination(candidates) do\n\n  end\nend"}]}