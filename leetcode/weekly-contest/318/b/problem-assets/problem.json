{"slug":"maximum-sum-of-distinct-subarrays-with-length-k","id":2552,"frontendId":6230,"title":"Maximum Sum of Distinct Subarrays With Length K","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":3020,"totalSubmission":12671,"hints":["Which elements change when moving from the subarray of size k that ends at index i to the subarray of size k that ends at index i + 1?","Only two elements change, the element at i + 1 is added into the subarray, and the element at i - k + 1 gets removed from the subarray.","Iterate through each subarray of size k and keep track of the sum of the subarray and the frequency of each element."],"sampleTestCase":"[1,5,4,2,9,9,9]\n3","exampleTestcases":"[1,5,4,2,9,9,9]\n3\n[4,4,4]\n3","content":"<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. Find the maximum subarray sum of all the subarrays of <code>nums</code> that meet the following conditions:</p>\n\n<ul>\n\t<li>The length of the subarray is <code>k</code>, and</li>\n\t<li>All the elements of the subarray are <strong>distinct</strong>.</li>\n</ul>\n\n<p>Return <em>the maximum subarray sum of all the subarrays that meet the conditions</em><em>.</em> If no subarray meets the conditions, return <code>0</code>.</p>\n\n<p><em>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,4,2,9,9,9], k = 3\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The subarrays of nums with length 3 are:\n- [1,5,4] which meets the requirements and has a sum of 10.\n- [5,4,2] which meets the requirements and has a sum of 11.\n- [4,2,9] which meets the requirements and has a sum of 15.\n- [2,9,9] which does not meet the requirements because the element 9 is repeated.\n- [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,4,4], k = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The subarrays of nums with length 3 are:\n- [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。请你从 <code>nums</code> 中满足下述条件的全部子数组中找出最大子数组和：</p>\n\n<ul>\n\t<li>子数组的长度是 <code>k</code>，且</li>\n\t<li>子数组中的所有元素 <strong>各不相同 。</strong></li>\n</ul>\n\n<p>返回满足题面要求的最大子数组和。如果不存在子数组满足这些条件，返回 <code>0</code> 。</p>\n\n<p><strong>子数组</strong> 是数组中一段连续非空的元素序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,5,4,2,9,9,9], k = 3\n<strong>输出：</strong>15\n<strong>解释：</strong>nums 中长度为 3 的子数组是：\n- [1,5,4] 满足全部条件，和为 10 。\n- [5,4,2] 满足全部条件，和为 11 。\n- [4,2,9] 满足全部条件，和为 15 。\n- [2,9,9] 不满足全部条件，因为元素 9 出现重复。\n- [9,9,9] 不满足全部条件，因为元素 9 出现重复。\n因为 15 是满足全部条件的所有子数组中的最大子数组和，所以返回 15 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [4,4,4], k = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>nums 中长度为 3 的子数组是：\n- [4,4,4] 不满足全部条件，因为元素 4 出现重复。\n因为不存在满足全部条件的子数组，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","translatedTitle":"长度为 K 子数组中的最大和","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public long maximumSubarraySum(int[] nums, int k) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def maximumSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:"},{"lang":"C","langSlug":"c","code":"long long maximumSubarraySum(int* nums, int numsSize, int k){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public long MaximumSubarraySum(int[] nums, int k) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumSubarraySum = function(nums, k) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_subarray_sum(nums, k)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func maximumSubarraySum(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func maximumSubarraySum(nums []int, k int) int64 {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def maximumSubarraySum(nums: Array[Int], k: Int): Long = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun maximumSubarraySum(nums: IntArray, k: Int): Long {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn maximum_subarray_sum(nums: Vec<i32>, k: i32) -> i64 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumSubarraySum($nums, $k) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function maximumSubarraySum(nums: number[], k: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (maximum-subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec maximum_subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_subarray_sum(Nums, K) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec maximum_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def maximum_subarray_sum(nums, k) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int maximumSubarraySum(List<int> nums, int k) {\n\n  }\n}"}]}