{"slug":"count-the-digits-that-divide-a-number","id":2608,"frontendId":6278,"title":"Count the Digits That Divide a Number","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":3048,"totalSubmission":3388,"hints":["Use mod by 10 to retrieve the least significant digit of the number","Divide the number by 10, then round it down so that the second least significant digit becomes the least significant digit of the number","Use your language’s mod operator to see if a number is a divisor of another."],"sampleTestCase":"7","exampleTestcases":"7\n121\n1248","content":"<p>Given an integer <code>num</code>, return <em>the number of digits in <code>num</code> that divide </em><code>num</code>.</p>\n\n<p>An integer <code>val</code> divides <code>nums</code> if <code>nums % val == 0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 7\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 7 divides itself, hence the answer is 1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 121\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1248\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 1248 is divisible by all of its digits, hence the answer is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>9</sup></code></li>\n\t<li><code>num</code> does not contain <code>0</code> as one of its digits.</li>\n</ul>\n","translatedContent":"<p>给你一个整数 <code>num</code> ，返回 <code>num</code> 中能整除 <code>num</code> 的数位的数目。</p>\n\n<p>如果满足&nbsp;<code>nums % val == 0</code> ，则认为整数 <code>val</code> 可以整除 <code>nums</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>num = 7\n<strong>输出：</strong>1\n<strong>解释：</strong>7 被自己整除，因此答案是 1 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>num = 121\n<strong>输出：</strong>2\n<strong>解释：</strong>121 可以被 1 整除，但无法被 2 整除。由于 1 出现两次，所以返回 2 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>num = 1248\n<strong>输出：</strong>4\n<strong>解释：</strong>1248 可以被它每一位上的数字整除，因此答案是 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>9</sup></code></li>\n\t<li><code>num</code> 的数位中不含 <code>0</code></li>\n</ul>\n","translatedTitle":"统计能整除数字的位数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int countDigits(int num) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int countDigits(int num) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countDigits(self, num: int) -> int:"},{"lang":"C","langSlug":"c","code":"int countDigits(int num){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int CountDigits(int num) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number} num\n * @return {number}\n */\nvar countDigits = function(num) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer} num\n# @return {Integer}\ndef count_digits(num)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countDigits(_ num: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countDigits(num int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countDigits(num: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countDigits(num: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_digits(num: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function countDigits($num) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countDigits(num: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-digits num)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_digits(Num :: integer()) -> integer().\ncount_digits(Num) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_digits(num :: integer) :: integer\n  def count_digits(num) do\n\n  end\nend"},{"lang":"Dart","langSlug":"dart","code":"class Solution {\n  int countDigits(int num) {\n\n  }\n}"}]}