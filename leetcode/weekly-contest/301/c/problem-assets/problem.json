{"slug":"move-pieces-to-obtain-a-string","id":2414,"frontendId":6114,"title":"Move Pieces to Obtain a String","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":2955,"totalSubmission":8673,"hints":["After some sequence of moves, can the order of the pieces change?","Try to match each piece in s with a piece in e."],"sampleTestCase":"\"_L__R__R_\"\n\"L______RR\"","exampleTestcases":"\"_L__R__R_\"\n\"L______RR\"\n\"R_L_\"\n\"__LR\"\n\"_R\"\n\"R_\"","content":"<p>You are given two strings <code>start</code> and <code>target</code>, both of length <code>n</code>. Each string consists <strong>only</strong> of the characters <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;_&#39;</code> where:</p>\n\n<ul>\n\t<li>The characters <code>&#39;L&#39;</code> and <code>&#39;R&#39;</code> represent pieces, where a piece <code>&#39;L&#39;</code> can move to the <strong>left</strong> only if there is a <strong>blank</strong> space directly to its left, and a piece <code>&#39;R&#39;</code> can move to the <strong>right</strong> only if there is a <strong>blank</strong> space directly to its right.</li>\n\t<li>The character <code>&#39;_&#39;</code> represents a blank space that can be occupied by <strong>any</strong> of the <code>&#39;L&#39;</code> or <code>&#39;R&#39;</code> pieces.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if it is possible to obtain the string</em> <code>target</code><em> by moving the pieces of the string </em><code>start</code><em> <strong>any</strong> number of times</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;_L__R__R_&quot;, target = &quot;L______RR&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can obtain the string target from start by doing the following moves:\n- Move the first piece one step to the left, start becomes equal to &quot;<strong>L</strong>___R__R_&quot;.\n- Move the last piece one step to the right, start becomes equal to &quot;L___R___<strong>R</strong>&quot;.\n- Move the second piece three steps to the right, start becomes equal to &quot;L______<strong>R</strong>R&quot;.\nSince it is possible to get the string target from start, we return true.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;R_L_&quot;, target = &quot;__LR&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The &#39;R&#39; piece in the string start can move one step to the right to obtain &quot;_<strong>R</strong>L_&quot;.\nAfter that, no pieces can move anymore, so it is impossible to obtain the string target from start.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;_R&quot;, target = &quot;R_&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == start.length == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>start</code> and <code>target</code> consist of the characters <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;_&#39;</code>.</li>\n</ul>\n","translatedContent":"<p>给你两个字符串 <code>start</code> 和 <code>target</code> ，长度均为 <code>n</code> 。每个字符串 <strong>仅</strong> 由字符 <code>'L'</code>、<code>'R'</code> 和 <code>'_'</code> 组成，其中：</p>\n\n<ul>\n\t<li>字符 <code>'L'</code> 和 <code>'R'</code> 表示片段，其中片段 <code>'L'</code> 只有在其左侧直接存在一个 <strong>空位</strong> 时才能向 <strong>左</strong> 移动，而片段 <code>'R'</code> 只有在其右侧直接存在一个 <strong>空位</strong> 时才能向 <strong>右</strong> 移动。</li>\n\t<li>字符 <code>'_'</code> 表示可以被 <strong>任意</strong> <code>'L'</code> 或 <code>'R'</code> 片段占据的空位。</li>\n</ul>\n\n<p>如果在移动字符串 <code>start</code> 中的片段任意次之后可以得到字符串 <code>target</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>start = \"_L__R__R_\", target = \"L______RR\"\n<strong>输出：</strong>true\n<strong>解释：</strong>可以从字符串 start 获得 target ，需要进行下面的移动：\n- 将第一个片段向左移动一步，字符串现在变为 \"<strong>L</strong>___R__R_\" 。\n- 将最后一个片段向右移动一步，字符串现在变为 \"L___R___<strong>R</strong>\" 。\n- 将第二个片段向右移动散步，字符串现在变为 \"L______<strong>R</strong>R\" 。\n可以从字符串 start 得到 target ，所以返回 true 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>start = \"R_L_\", target = \"__LR\"\n<strong>输出：</strong>false\n<strong>解释：</strong>字符串 start 中的 'R' 片段可以向右移动一步得到 \"_<strong>R</strong>L_\" 。\n但是，在这一步之后，不存在可以移动的片段，所以无法从字符串 start 得到 target 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>start = \"_R\", target = \"R_\"\n<strong>输出：</strong>false\n<strong>解释：</strong>字符串 start 中的片段只能向右移动，所以无法从字符串 start 得到 target 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == start.length == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>start</code> 和 <code>target</code> 由字符 <code>'L'</code>、<code>'R'</code> 和 <code>'_'</code> 组成</li>\n</ul>\n","translatedTitle":"移动片段得到字符串","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    bool canChange(string start, string target) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public boolean canChange(String start, String target) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def canChange(self, start, target):\n        \"\"\"\n        :type start: str\n        :type target: str\n        :rtype: bool\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def canChange(self, start: str, target: str) -> bool:"},{"lang":"C","langSlug":"c","code":"\n\nbool canChange(char * start, char * target){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public bool CanChange(string start, string target) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} start\n * @param {string} target\n * @return {boolean}\n */\nvar canChange = function(start, target) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} start\n# @param {String} target\n# @return {Boolean}\ndef can_change(start, target)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func canChange(_ start: String, _ target: String) -> Bool {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func canChange(start string, target string) bool {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def canChange(start: String, target: String): Boolean = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun canChange(start: String, target: String): Boolean {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn can_change(start: String, target: String) -> bool {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $start\n     * @param String $target\n     * @return Boolean\n     */\n    function canChange($start, $target) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function canChange(start: string, target: string): boolean {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (can-change start target)\n  (-> string? string? boolean?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec can_change(Start :: unicode:unicode_binary(), Target :: unicode:unicode_binary()) -> boolean().\ncan_change(Start, Target) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec can_change(start :: String.t, target :: String.t) :: boolean\n  def can_change(start, target) do\n\n  end\nend"}]}