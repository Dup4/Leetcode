{"slug":"minimum-amount-of-time-to-fill-cups","id":2412,"frontendId":6112,"title":"Minimum Amount of Time to Fill Cups","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":0,"dislikes":0,"status":2,"tag":[],"totalAccepted":5245,"totalSubmission":9906,"hints":["To minimize the amount of time needed, you want to fill up as many cups as possible in each second. This means that you want to maximize the number of seconds where you are filling up two cups.","You always want to fill up the two types of water with the most unfilled cups."],"sampleTestCase":"[1,4,2]","exampleTestcases":"[1,4,2]\n[5,4,4]\n[5,0,0]","content":"<p>You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up <code>2</code> cups with <strong>different</strong> types of water, or <code>1</code> cup of any type of water.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>amount</code> of length <code>3</code> where <code>amount[0]</code>, <code>amount[1]</code>, and <code>amount[2]</code> denote the number of cold, warm, and hot water cups you need to fill respectively. Return <em>the <strong>minimum</strong> number of seconds needed to fill up all the cups</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = [1,4,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = [5,4,4]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = [5,0,0]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Every second, we fill up a cold cup.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>amount.length == 3</code></li>\n\t<li><code>0 &lt;= amount[i] &lt;= 100</code></li>\n</ul>\n","translatedContent":"<p>现有一台饮水机，可以制备冷水、温水和热水。每秒钟，可以装满 <code>2</code> 杯 <strong>不同</strong> 类型的水或者 <code>1</code> 杯任意类型的水。</p>\n\n<p>给你一个下标从 <strong>0</strong> 开始、长度为 <code>3</code> 的整数数组 <code>amount</code> ，其中 <code>amount[0]</code>、<code>amount[1]</code> 和 <code>amount[2]</code> 分别表示需要装满冷水、温水和热水的杯子数量。返回装满所有杯子所需的 <strong>最少</strong> 秒数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>amount = [1,4,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>下面给出一种方案：\n第 1 秒：装满一杯冷水和一杯温水。\n第 2 秒：装满一杯温水和一杯热水。\n第 3 秒：装满一杯温水和一杯热水。\n第 4 秒：装满一杯温水。\n可以证明最少需要 4 秒才能装满所有杯子。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>amount = [5,4,4]\n<strong>输出：</strong>7\n<strong>解释：</strong>下面给出一种方案：\n第 1 秒：装满一杯冷水和一杯热水。\n第 2 秒：装满一杯冷水和一杯温水。\n第 3 秒：装满一杯冷水和一杯温水。\n第 4 秒：装满一杯温水和一杯热水。\n第 5 秒：装满一杯冷水和一杯热水。\n第 6 秒：装满一杯冷水和一杯温水。\n第 7 秒：装满一杯热水。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>amount = [5,0,0]\n<strong>输出：</strong>5\n<strong>解释：</strong>每秒装满一杯冷水。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>amount.length == 3</code></li>\n\t<li><code>0 &lt;= amount[i] &lt;= 100</code></li>\n</ul>\n","translatedTitle":"装满杯子需要的最短总时长","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int fillCups(vector<int>& amount) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int fillCups(int[] amount) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def fillCups(self, amount):\n        \"\"\"\n        :type amount: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def fillCups(self, amount: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint fillCups(int* amount, int amountSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int FillCups(int[] amount) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} amount\n * @return {number}\n */\nvar fillCups = function(amount) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} amount\n# @return {Integer}\ndef fill_cups(amount)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func fillCups(_ amount: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func fillCups(amount []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def fillCups(amount: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun fillCups(amount: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn fill_cups(amount: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $amount\n     * @return Integer\n     */\n    function fillCups($amount) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function fillCups(amount: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (fill-cups amount)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec fill_cups(Amount :: [integer()]) -> integer().\nfill_cups(Amount) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec fill_cups(amount :: [integer]) :: integer\n  def fill_cups(amount) do\n\n  end\nend"}]}