{"slug":"smallest-number-in-infinite-set","id":2413,"frontendId":6113,"title":"Smallest Number in Infinite Set","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":1,"dislikes":0,"status":2,"tag":[],"totalAccepted":4883,"totalSubmission":7288,"hints":["Based on the constraints, what is the maximum element that can possibly be popped?","Maintain whether elements are in or not in the set. How many elements do we consider?"],"sampleTestCase":"[\"SmallestInfiniteSet\",\"addBack\",\"popSmallest\",\"popSmallest\",\"popSmallest\",\"addBack\",\"popSmallest\",\"popSmallest\",\"popSmallest\"]\n[[],[2],[],[],[],[1],[],[],[]]","exampleTestcases":"[\"SmallestInfiniteSet\",\"addBack\",\"popSmallest\",\"popSmallest\",\"popSmallest\",\"addBack\",\"popSmallest\",\"popSmallest\",\"popSmallest\"]\n[[],[2],[],[],[],[1],[],[],[]]","content":"<p>You have a set which contains all positive integers <code>[1, 2, 3, 4, 5, ...]</code>.</p>\n\n<p>Implement the <code>SmallestInfiniteSet</code> class:</p>\n\n<ul>\n\t<li><code>SmallestInfiniteSet()</code> Initializes the <strong>SmallestInfiniteSet</strong> object to contain <strong>all</strong> positive integers.</li>\n\t<li><code>int popSmallest()</code> <strong>Removes</strong> and returns the smallest integer contained in the infinite set.</li>\n\t<li><code>void addBack(int num)</code> <strong>Adds</strong> a positive integer <code>num</code> back into the infinite set, if it is <strong>not</strong> already in the infinite set.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SmallestInfiniteSet&quot;, &quot;addBack&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;, &quot;addBack&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;]\n[[], [2], [], [], [], [1], [], [], []]\n<strong>Output</strong>\n[null, null, 1, 2, 3, null, 1, 4, 5]\n\n<strong>Explanation</strong>\nSmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();\nsmallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.\nsmallestInfiniteSet.addBack(1);    // 1 is added back to the set.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and\n                                   // is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 1000</code></li>\n\t<li>At most <code>1000</code> calls will be made <strong>in total</strong> to <code>popSmallest</code> and <code>addBack</code>.</li>\n</ul>\n","translatedContent":"<p>现有一个包含所有正整数的集合 <code>[1, 2, 3, 4, 5, ...]</code> 。</p>\n\n<p>实现 <code>SmallestInfiniteSet</code> 类：</p>\n\n<ul>\n\t<li><code>SmallestInfiniteSet()</code> 初始化 <strong>SmallestInfiniteSet</strong> 对象以包含 <strong>所有</strong> 正整数。</li>\n\t<li><code>int popSmallest()</code> <strong>移除</strong> 并返回该无限集中的最小整数。</li>\n\t<li><code>void addBack(int num)</code> 如果正整数 <code>num</code> <strong>不</strong> 存在于无限集中，则将一个 <code>num</code> <strong>添加</strong> 到该无限集中。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入</strong>\n[\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n[[], [2], [], [], [], [1], [], [], []]\n<strong>输出</strong>\n[null, null, 1, 2, 3, null, 1, 4, 5]\n\n<strong>解释</strong>\nSmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();\nsmallestInfiniteSet.addBack(2);    // 2 已经在集合中，所以不做任何变更。\nsmallestInfiniteSet.popSmallest(); // 返回 1 ，因为 1 是最小的整数，并将其从集合中移除。\nsmallestInfiniteSet.popSmallest(); // 返回 2 ，并将其从集合中移除。\nsmallestInfiniteSet.popSmallest(); // 返回 3 ，并将其从集合中移除。\nsmallestInfiniteSet.addBack(1);    // 将 1 添加到该集合中。\nsmallestInfiniteSet.popSmallest(); // 返回 1 ，因为 1 在上一步中被添加到集合中，\n                                   // 且 1 是最小的整数，并将其从集合中移除。\nsmallestInfiniteSet.popSmallest(); // 返回 4 ，并将其从集合中移除。\nsmallestInfiniteSet.popSmallest(); // 返回 5 ，并将其从集合中移除。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 1000</code></li>\n\t<li>最多调用 <code>popSmallest</code> 和 <code>addBack</code> 方法 <strong>共计</strong> <code>1000</code> 次</li>\n</ul>\n","translatedTitle":"无限集中的最小数字","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class SmallestInfiniteSet {\npublic:\n    SmallestInfiniteSet() {\n\n    }\n    \n    int popSmallest() {\n\n    }\n    \n    void addBack(int num) {\n\n    }\n};\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet* obj = new SmallestInfiniteSet();\n * int param_1 = obj->popSmallest();\n * obj->addBack(num);\n */"},{"lang":"Java","langSlug":"java","code":"class SmallestInfiniteSet {\n\n    public SmallestInfiniteSet() {\n\n    }\n    \n    public int popSmallest() {\n\n    }\n    \n    public void addBack(int num) {\n\n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet obj = new SmallestInfiniteSet();\n * int param_1 = obj.popSmallest();\n * obj.addBack(num);\n */"},{"lang":"Python","langSlug":"python","code":"class SmallestInfiniteSet(object):\n\n    def __init__(self):\n\n\n    def popSmallest(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n    def addBack(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n\n\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet()\n# param_1 = obj.popSmallest()\n# obj.addBack(num)"},{"lang":"Python3","langSlug":"python3","code":"class SmallestInfiniteSet:\n\n    def __init__(self):\n\n\n    def popSmallest(self) -> int:\n\n\n    def addBack(self, num: int) -> None:\n\n\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet()\n# param_1 = obj.popSmallest()\n# obj.addBack(num)"},{"lang":"C","langSlug":"c","code":"\n\n\ntypedef struct {\n\n} SmallestInfiniteSet;\n\n\nSmallestInfiniteSet* smallestInfiniteSetCreate() {\n\n}\n\nint smallestInfiniteSetPopSmallest(SmallestInfiniteSet* obj) {\n\n}\n\nvoid smallestInfiniteSetAddBack(SmallestInfiniteSet* obj, int num) {\n\n}\n\nvoid smallestInfiniteSetFree(SmallestInfiniteSet* obj) {\n\n}\n\n/**\n * Your SmallestInfiniteSet struct will be instantiated and called as such:\n * SmallestInfiniteSet* obj = smallestInfiniteSetCreate();\n * int param_1 = smallestInfiniteSetPopSmallest(obj);\n \n * smallestInfiniteSetAddBack(obj, num);\n \n * smallestInfiniteSetFree(obj);\n*/"},{"lang":"C#","langSlug":"csharp","code":"public class SmallestInfiniteSet {\n\n    public SmallestInfiniteSet() {\n\n    }\n    \n    public int PopSmallest() {\n\n    }\n    \n    public void AddBack(int num) {\n\n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet obj = new SmallestInfiniteSet();\n * int param_1 = obj.PopSmallest();\n * obj.AddBack(num);\n */"},{"lang":"JavaScript","langSlug":"javascript","code":"\nvar SmallestInfiniteSet = function() {\n\n};\n\n/**\n * @return {number}\n */\nSmallestInfiniteSet.prototype.popSmallest = function() {\n\n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nSmallestInfiniteSet.prototype.addBack = function(num) {\n\n};\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * var obj = new SmallestInfiniteSet()\n * var param_1 = obj.popSmallest()\n * obj.addBack(num)\n */"},{"lang":"Ruby","langSlug":"ruby","code":"class SmallestInfiniteSet\n    def initialize()\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_smallest()\n\n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_back(num)\n\n    end\n\n\nend\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet.new()\n# param_1 = obj.pop_smallest()\n# obj.add_back(num)"},{"lang":"Swift","langSlug":"swift","code":"\nclass SmallestInfiniteSet {\n\n    init() {\n\n    }\n    \n    func popSmallest() -> Int {\n\n    }\n    \n    func addBack(_ num: Int) {\n\n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * let obj = SmallestInfiniteSet()\n * let ret_1: Int = obj.popSmallest()\n * obj.addBack(num)\n */"},{"lang":"Go","langSlug":"golang","code":"type SmallestInfiniteSet struct {\n\n}\n\n\nfunc Constructor() SmallestInfiniteSet {\n\n}\n\n\nfunc (this *SmallestInfiniteSet) PopSmallest() int {\n\n}\n\n\nfunc (this *SmallestInfiniteSet) AddBack(num int)  {\n\n}\n\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.PopSmallest();\n * obj.AddBack(num);\n */"},{"lang":"Scala","langSlug":"scala","code":"class SmallestInfiniteSet() {\n\n    def popSmallest(): Int = {\n\n    }\n\n    def addBack(num: Int) {\n\n    }\n\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * var obj = new SmallestInfiniteSet()\n * var param_1 = obj.popSmallest()\n * obj.addBack(num)\n */"},{"lang":"Kotlin","langSlug":"kotlin","code":"class SmallestInfiniteSet() {\n\n    fun popSmallest(): Int {\n\n    }\n\n    fun addBack(num: Int) {\n\n    }\n\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * var obj = SmallestInfiniteSet()\n * var param_1 = obj.popSmallest()\n * obj.addBack(num)\n */"},{"lang":"Rust","langSlug":"rust","code":"struct SmallestInfiniteSet {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SmallestInfiniteSet {\n\n    fn new() -> Self {\n\n    }\n    \n    fn pop_smallest(&self) -> i32 {\n\n    }\n    \n    fn add_back(&self, num: i32) {\n\n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * let obj = SmallestInfiniteSet::new();\n * let ret_1: i32 = obj.pop_smallest();\n * obj.add_back(num);\n */"},{"lang":"PHP","langSlug":"php","code":"class SmallestInfiniteSet {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function popSmallest() {\n\n    }\n\n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addBack($num) {\n\n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * $obj = SmallestInfiniteSet();\n * $ret_1 = $obj->popSmallest();\n * $obj->addBack($num);\n */"},{"lang":"TypeScript","langSlug":"typescript","code":"class SmallestInfiniteSet {\n    constructor() {\n\n    }\n\n    popSmallest(): number {\n\n    }\n\n    addBack(num: number): void {\n\n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * var obj = new SmallestInfiniteSet()\n * var param_1 = obj.popSmallest()\n * obj.addBack(num)\n */"},{"lang":"Racket","langSlug":"racket","code":"(define smallest-infinite-set%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; pop-smallest : -> exact-integer?\n    (define/public (pop-smallest)\n\n      )\n    ; add-back : exact-integer? -> void?\n    (define/public (add-back num)\n\n      )))\n\n;; Your smallest-infinite-set% object will be instantiated and called as such:\n;; (define obj (new smallest-infinite-set%))\n;; (define param_1 (send obj pop-smallest))\n;; (send obj add-back num)"},{"lang":"Erlang","langSlug":"erlang","code":"-spec smallest_infinite_set_init_() -> any().\nsmallest_infinite_set_init_() ->\n  .\n\n-spec smallest_infinite_set_pop_smallest() -> integer().\nsmallest_infinite_set_pop_smallest() ->\n  .\n\n-spec smallest_infinite_set_add_back(Num :: integer()) -> any().\nsmallest_infinite_set_add_back(Num) ->\n  .\n\n\n%% Your functions will be called as such:\n%% smallest_infinite_set_init_(),\n%% Param_1 = smallest_infinite_set_pop_smallest(),\n%% smallest_infinite_set_add_back(Num),\n\n%% smallest_infinite_set_init_ will be called before every test case, in which you can do some necessary initializations."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule SmallestInfiniteSet do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec pop_smallest() :: integer\n  def pop_smallest() do\n\n  end\n\n  @spec add_back(num :: integer) :: any\n  def add_back(num) do\n\n  end\nend\n\n# Your functions will be called as such:\n# SmallestInfiniteSet.init_()\n# param_1 = SmallestInfiniteSet.pop_smallest()\n# SmallestInfiniteSet.add_back(num)\n\n# SmallestInfiniteSet.init_ will be called before every test case, in which you can do some necessary initializations."}]}