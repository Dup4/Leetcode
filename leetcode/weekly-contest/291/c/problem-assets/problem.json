{"slug":"k-divisible-elements-subarrays","id":2339,"frontendId":6049,"title":"K Divisible Elements Subarrays","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":3664,"totalSubmission":8170,"hints":["Enumerate all subarrays and find the ones that satisfy all the conditions.","Use any suitable method to hash the subarrays to avoid duplicates."],"sampleTestCase":"[2,3,3,2,2]\n2\n2","exampleTestcases":"[2,3,3,2,2]\n2\n2\n[1,2,3,4]\n4\n1","content":"<p>Given an integer array <code>nums</code> and two integers <code>k</code> and <code>p</code>, return <em>the number of <strong>distinct subarrays</strong> which have <strong>at most</strong></em> <code>k</code> <em>elements divisible by</em> <code>p</code>.</p>\n\n<p>Two arrays <code>nums1</code> and <code>nums2</code> are said to be <strong>distinct</strong> if:</p>\n\n<ul>\n\t<li>They are of <strong>different</strong> lengths, or</li>\n\t<li>There exists <strong>at least</strong> one index <code>i</code> where <code>nums1[i] != nums2[i]</code>.</li>\n</ul>\n\n<p>A <strong>subarray</strong> is defined as a <strong>non-empty</strong> contiguous sequence of elements in an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [<u><strong>2</strong></u>,3,3,<u><strong>2</strong></u>,<u><strong>2</strong></u>], k = 2, p = 2\n<strong>Output:</strong> 11\n<strong>Explanation:</strong>\nThe elements at indices 0, 3, and 4 are divisible by p = 2.\nThe 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:\n[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].\nNote that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.\nThe subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], k = 4, p = 1\n<strong>Output:</strong> 10\n<strong>Explanation:</strong>\nAll element of nums are divisible by p = 1.\nAlso, every subarray of nums will have at most 4 elements that are divisible by 1.\nSince all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i], p &lt;= 200</code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>nums</code> 和两个整数 <code>k</code> 和 <code>p</code> ，找出并返回满足要求的不同的子数组数，要求子数组中最多 <code>k</code> 个可被 <code>p</code> 整除的元素。</p>\n\n<p>如果满足下述条件之一，则认为数组 <code>nums1</code> 和 <code>nums2</code> 是 <strong>不同</strong> 数组：</p>\n\n<ul>\n\t<li>两数组长度 <strong>不同</strong> ，或者</li>\n\t<li>存在 <strong>至少 </strong>一个下标 <code>i</code> 满足 <code>nums1[i] != nums2[i]</code> 。</li>\n</ul>\n\n<p><strong>子数组</strong> 定义为：数组中的连续元素组成的一个 <strong>非空</strong> 序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [<em><strong>2</strong></em>,3,3,<em><strong>2</strong></em>,<em><strong>2</strong></em>], k = 2, p = 2\n<strong>输出：</strong>11\n<strong>解释：</strong>\n位于下标 0、3 和 4 的元素都可以被 p = 2 整除。\n共计 11 个不同子数组都满足最多含 k = 2 个可以被 2 整除的元素：\n[2]、[2,3]、[2,3,3]、[2,3,3,2]、[3]、[3,3]、[3,3,2]、[3,3,2,2]、[3,2]、[3,2,2] 和 [2,2] 。\n注意，尽管子数组 [2] 和 [3] 在 nums 中出现不止一次，但统计时只计数一次。\n子数组 [2,3,3,2,2] 不满足条件，因为其中有 3 个元素可以被 2 整除。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,4], k = 4, p = 1\n<strong>输出：</strong>10\n<strong>解释：</strong>\nnums 中的所有元素都可以被 p = 1 整除。\n此外，nums 中的每个子数组都满足最多 4 个元素可以被 1 整除。\n因为所有子数组互不相同，因此满足所有限制条件的子数组总数为 10 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i], p &lt;= 200</code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n","translatedTitle":"含最多 K 个可整除元素的子数组","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int countDistinct(vector<int>& nums, int k, int p) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int countDistinct(int[] nums, int k, int p) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def countDistinct(self, nums, k, p):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type p: int\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def countDistinct(self, nums: List[int], k: int, p: int) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint countDistinct(int* nums, int numsSize, int k, int p){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int CountDistinct(int[] nums, int k, int p) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\nvar countDistinct = function(nums, k, p) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} p\n# @return {Integer}\ndef count_distinct(nums, k, p)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func countDistinct(_ nums: [Int], _ k: Int, _ p: Int) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func countDistinct(nums []int, k int, p int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def countDistinct(nums: Array[Int], k: Int, p: Int): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun countDistinct(nums: IntArray, k: Int, p: Int): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn count_distinct(nums: Vec<i32>, k: i32, p: i32) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $p\n     * @return Integer\n     */\n    function countDistinct($nums, $k, $p) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function countDistinct(nums: number[], k: number, p: number): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (count-distinct nums k p)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec count_distinct(Nums :: [integer()], K :: integer(), P :: integer()) -> integer().\ncount_distinct(Nums, K, P) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec count_distinct(nums :: [integer], k :: integer, p :: integer) :: integer\n  def count_distinct(nums, k, p) do\n\n  end\nend"}]}