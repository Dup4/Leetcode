{"slug":"remove-digit-from-number-to-maximize-result","id":2337,"frontendId":6047,"title":"Remove Digit From Number to Maximize Result","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":5393,"totalSubmission":11745,"hints":["The maximum length of number is really small.","Iterate through the digits of number and every time we see digit, try removing it.","To remove a character at index i, concatenate the substring from index 0 to i - 1 and the substring from index i + 1 to number.length - 1."],"sampleTestCase":"\"123\"\n\"3\"","exampleTestcases":"\"123\"\n\"3\"\n\"1231\"\n\"1\"\n\"551\"\n\"5\"","content":"<p>You are given a string <code>number</code> representing a <strong>positive integer</strong> and a character <code>digit</code>.</p>\n\n<p>Return <em>the resulting string after removing <strong>exactly one occurrence</strong> of </em><code>digit</code><em> from </em><code>number</code><em> such that the value of the resulting string in <strong>decimal</strong> form is <strong>maximized</strong></em>. The test cases are generated such that <code>digit</code> occurs at least once in <code>number</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> number = &quot;123&quot;, digit = &quot;3&quot;\n<strong>Output:</strong> &quot;12&quot;\n<strong>Explanation:</strong> There is only one &#39;3&#39; in &quot;123&quot;. After removing &#39;3&#39;, the result is &quot;12&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> number = &quot;1231&quot;, digit = &quot;1&quot;\n<strong>Output:</strong> &quot;231&quot;\n<strong>Explanation:</strong> We can remove the first &#39;1&#39; to get &quot;231&quot; or remove the second &#39;1&#39; to get &quot;123&quot;.\nSince 231 &gt; 123, we return &quot;231&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> number = &quot;551&quot;, digit = &quot;5&quot;\n<strong>Output:</strong> &quot;51&quot;\n<strong>Explanation:</strong> We can remove either the first or second &#39;5&#39; from &quot;551&quot;.\nBoth result in the string &quot;51&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= number.length &lt;= 100</code></li>\n\t<li><code>number</code> consists of digits from <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>.</li>\n\t<li><code>digit</code> is a digit from <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>.</li>\n\t<li><code>digit</code> occurs at least once in <code>number</code>.</li>\n</ul>\n","translatedContent":"<p>给你一个表示某个正整数的字符串 <code>number</code> 和一个字符 <code>digit</code> 。</p>\n\n<p>从 <code>number</code> 中 <strong>恰好</strong> 移除 <strong>一个</strong> 等于&nbsp;<code>digit</code> 的字符后，找出并返回按 <strong>十进制</strong> 表示 <strong>最大</strong> 的结果字符串。生成的测试用例满足 <code>digit</code> 在 <code>number</code> 中出现至少一次。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>number = \"123\", digit = \"3\"\n<strong>输出：</strong>\"12\"\n<strong>解释：</strong>\"123\" 中只有一个 '3' ，在移除 '3' 之后，结果为 \"12\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>number = \"1231\", digit = \"1\"\n<strong>输出：</strong>\"231\"\n<strong>解释：</strong>可以移除第一个 '1' 得到 \"231\" 或者移除第二个 '1' 得到 \"123\" 。\n由于 231 &gt; 123 ，返回 \"231\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>number = \"551\", digit = \"5\"\n<strong>输出：</strong>\"51\"\n<strong>解释：</strong>可以从 \"551\" 中移除第一个或者第二个 '5' 。\n两种方案的结果都是 \"51\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= number.length &lt;= 100</code></li>\n\t<li><code>number</code> 由数字 <code>'1'</code> 到 <code>'9'</code> 组成</li>\n\t<li><code>digit</code> 是 <code>'1'</code> 到 <code>'9'</code> 中的一个数字</li>\n\t<li><code>digit</code> 在 <code>number</code> 中出现至少一次</li>\n</ul>\n","translatedTitle":"移除指定数字得到的最大结果","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string removeDigit(string number, char digit) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String removeDigit(String number, char digit) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def removeDigit(self, number, digit):\n        \"\"\"\n        :type number: str\n        :type digit: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def removeDigit(self, number: str, digit: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * removeDigit(char * number, char digit){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string RemoveDigit(string number, char digit) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} number\n * @param {character} digit\n * @return {string}\n */\nvar removeDigit = function(number, digit) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} number\n# @param {Character} digit\n# @return {String}\ndef remove_digit(number, digit)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func removeDigit(_ number: String, _ digit: Character) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func removeDigit(number string, digit byte) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def removeDigit(number: String, digit: Char): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun removeDigit(number: String, digit: Char): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn remove_digit(number: String, digit: char) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $number\n     * @param String $digit\n     * @return String\n     */\n    function removeDigit($number, $digit) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function removeDigit(number: string, digit: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (remove-digit number digit)\n  (-> string? char? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec remove_digit(Number :: unicode:unicode_binary(), Digit :: char()) -> unicode:unicode_binary().\nremove_digit(Number, Digit) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec remove_digit(number :: String.t, digit :: char) :: String.t\n  def remove_digit(number, digit) do\n\n  end\nend"}]}