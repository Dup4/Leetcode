{"slug":"minimum-consecutive-cards-to-pick-up","id":2338,"frontendId":6048,"title":"Minimum Consecutive Cards to Pick Up","categoryTitle":"Algorithms","difficulty":1,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":5033,"totalSubmission":10876,"hints":["Iterate through the cards and store the location of the last occurrence of each number.","What data structure could you use to get the last occurrence of a number in O(1) or O(log n)?"],"sampleTestCase":"[3,4,2,3,4,7]","exampleTestcases":"[3,4,2,3,4,7]\n[1,0,5,3]","content":"<p>You are given an integer array <code>cards</code> where <code>cards[i]</code> represents the <strong>value</strong> of the <code>i<sup>th</sup></code> card. A pair of cards are <strong>matching</strong> if the cards have the <strong>same</strong> value.</p>\n\n<p>Return<em> the <strong>minimum</strong> number of <strong>consecutive</strong> cards you have to pick up to have a pair of <strong>matching</strong> cards among the picked cards.</em> If it is impossible to have matching cards, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [3,4,2,3,4,7]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [1,0,5,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no way to pick up a set of consecutive cards that contain a pair of matching cards.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cards.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= cards[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n","translatedContent":"<p>给你一个整数数组 <code>cards</code> ，其中 <code>cards[i]</code> 表示第 <code>i</code> 张卡牌的 <strong>值</strong> 。如果两张卡牌的值相同，则认为这一对卡牌 <strong>匹配</strong> 。</p>\n\n<p>返回你必须拿起的最小连续卡牌数，以使在拿起的卡牌中有一对匹配的卡牌。如果无法得到一对匹配的卡牌，返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>cards = [3,4,2,3,4,7]\n<strong>输出：</strong>4\n<strong>解释：</strong>拿起卡牌 [3,4,2,3] 将会包含一对值为 3 的匹配卡牌。注意，拿起 [4,2,3,4] 也是最优方案。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>cards = [1,0,5,3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>无法找出含一对匹配卡牌的一组连续卡牌。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cards.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= cards[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n","translatedTitle":"必须拿起的最小连续卡牌数","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int minimumCardPickup(vector<int>& cards) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int minimumCardPickup(int[] cards) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def minimumCardPickup(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: int\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def minimumCardPickup(self, cards: List[int]) -> int:"},{"lang":"C","langSlug":"c","code":"\n\nint minimumCardPickup(int* cards, int cardsSize){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int MinimumCardPickup(int[] cards) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {number[]} cards\n * @return {number}\n */\nvar minimumCardPickup = function(cards) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {Integer[]} cards\n# @return {Integer}\ndef minimum_card_pickup(cards)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func minimumCardPickup(_ cards: [Int]) -> Int {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func minimumCardPickup(cards []int) int {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def minimumCardPickup(cards: Array[Int]): Int = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun minimumCardPickup(cards: IntArray): Int {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn minimum_card_pickup(cards: Vec<i32>) -> i32 {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param Integer[] $cards\n     * @return Integer\n     */\n    function minimumCardPickup($cards) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function minimumCardPickup(cards: number[]): number {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (minimum-card-pickup cards)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec minimum_card_pickup(Cards :: [integer()]) -> integer().\nminimum_card_pickup(Cards) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec minimum_card_pickup(cards :: [integer]) :: integer\n  def minimum_card_pickup(cards) do\n\n  end\nend"}]}