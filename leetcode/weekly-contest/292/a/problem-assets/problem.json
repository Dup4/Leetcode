{"slug":"largest-3-same-digit-number-in-string","id":2346,"frontendId":6056,"title":"Largest 3-Same-Digit Number in String","categoryTitle":"Algorithms","difficulty":0,"starred":false,"locked":false,"likes":2,"dislikes":0,"status":0,"tag":[],"totalAccepted":6016,"totalSubmission":9675,"hints":["We can sequentially check if “999”, “888”, “777”, … , “000” exists in num in that order. The first to be found is the maximum good integer.","If we cannot find any of the above integers, we return an empty string “”."],"sampleTestCase":"\"6777133339\"","exampleTestcases":"\"6777133339\"\n\"2300019\"\n\"42352338\"","content":"<p>You are given a string <code>num</code> representing a large integer. An integer is <strong>good</strong> if it meets the following conditions:</p>\n\n<ul>\n\t<li>It is a <strong>substring</strong> of <code>num</code> with length <code>3</code>.</li>\n\t<li>It consists of only one unique digit.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum good </strong>integer as a <strong>string</strong> or an empty string </em><code>&quot;&quot;</code><em> if no such integer exists</em>.</p>\n\n<p>Note:</p>\n\n<ul>\n\t<li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li>\n\t<li>There may be <strong>leading zeroes</strong> in <code>num</code> or a good integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;6<strong><u>777</u></strong>133339&quot;\n<strong>Output:</strong> &quot;777&quot;\n<strong>Explanation:</strong> There are two distinct good integers: &quot;777&quot; and &quot;333&quot;.\n&quot;777&quot; is the largest, so we return &quot;777&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;23<strong><u>000</u></strong>19&quot;\n<strong>Output:</strong> &quot;000&quot;\n<strong>Explanation:</strong> &quot;000&quot; is the only good integer.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;42352338&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= num.length &lt;= 1000</code></li>\n\t<li><code>num</code> only consists of digits.</li>\n</ul>\n","translatedContent":"<p>给你一个字符串 <code>num</code> ，表示一个大整数。如果一个整数满足下述所有条件，则认为该整数是一个 <strong>优质整数</strong> ：</p>\n\n<ul>\n\t<li>该整数是 <code>num</code> 的一个长度为 <code>3</code> 的 <strong>子字符串</strong> 。</li>\n\t<li>该整数由唯一一个数字重复 <code>3</code> 次组成。</li>\n</ul>\n\n<p>以字符串形式返回 <strong>最大的优质整数</strong> 。如果不存在满足要求的整数，则返回一个空字符串 <code>\"\"</code> 。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><strong>子字符串</strong> 是字符串中的一个连续字符序列。</li>\n\t<li><code>num</code> 或优质整数中可能存在 <strong>前导零</strong> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"6<em><strong>777</strong></em>133339\"\n<strong>输出：</strong>\"777\"\n<strong>解释：</strong>num 中存在两个优质整数：\"777\" 和 \"333\" 。\n\"777\" 是最大的那个，所以返回 \"777\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"23<em><strong>000</strong></em>19\"\n<strong>输出：</strong>\"000\"\n<strong>解释：</strong>\"000\" 是唯一一个优质整数。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"42352338\"\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>不存在长度为 3 且仅由一个唯一数字组成的整数。因此，不存在优质整数。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= num.length &lt;= 1000</code></li>\n\t<li><code>num</code> 仅由数字（<code>0</code> - <code>9</code>）组成</li>\n</ul>\n","translatedTitle":"字符串中最大的 3 位相同数字","codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    string largestGoodInteger(string num) {\n        \n    }\n};"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public String largestGoodInteger(String num) {\n\n    }\n}"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def largestGoodInteger(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\""},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def largestGoodInteger(self, num: str) -> str:"},{"lang":"C","langSlug":"c","code":"\n\nchar * largestGoodInteger(char * num){\n\n}"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public string LargestGoodInteger(string num) {\n\n    }\n}"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} num\n * @return {string}\n */\nvar largestGoodInteger = function(num) {\n\n};"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} num\n# @return {String}\ndef largest_good_integer(num)\n\nend"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func largestGoodInteger(_ num: String) -> String {\n\n    }\n}"},{"lang":"Go","langSlug":"golang","code":"func largestGoodInteger(num string) string {\n\n}"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def largestGoodInteger(num: String): String = {\n\n    }\n}"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun largestGoodInteger(num: String): String {\n\n    }\n}"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn largest_good_integer(num: String) -> String {\n\n    }\n}"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $num\n     * @return String\n     */\n    function largestGoodInteger($num) {\n\n    }\n}"},{"lang":"TypeScript","langSlug":"typescript","code":"function largestGoodInteger(num: string): string {\n\n};"},{"lang":"Racket","langSlug":"racket","code":"(define/contract (largest-good-integer num)\n  (-> string? string?)\n\n  )"},{"lang":"Erlang","langSlug":"erlang","code":"-spec largest_good_integer(Num :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlargest_good_integer(Num) ->\n  ."},{"lang":"Elixir","langSlug":"elixir","code":"defmodule Solution do\n  @spec largest_good_integer(num :: String.t) :: String.t\n  def largest_good_integer(num) do\n\n  end\nend"}]}